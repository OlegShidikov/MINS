
MINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080107a0  080107a0  000207a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109b4  080109b4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080109b4  080109b4  000209b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109bc  080109bc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109bc  080109bc  000209bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080109c0  080109c0  000209c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080109c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005848  200001dc  08010ba0  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005a24  08010ba0  00035a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002efa3  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006400  00000000  00000000  0005f1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  000655b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002300  00000000  00000000  00067b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a3d1  00000000  00000000  00069e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033e27  00000000  00000000  00074231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c425  00000000  00000000  000a8058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b447d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a058  00000000  00000000  001b44d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010788 	.word	0x08010788

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08010788 	.word	0x08010788

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f9bb 	bl	8001892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f88e 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fc1e 	bl	8000d60 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000524:	f000 f9a0 	bl	8000868 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000528:	f009 f936 	bl	8009798 <MX_FATFS_Init>
  MX_I2C1_Init();
 800052c:	f000 f8f6 	bl	800071c <MX_I2C1_Init>
  MX_I2C4_Init();
 8000530:	f000 f934 	bl	800079c <MX_I2C4_Init>
  MX_RTC_Init();
 8000534:	f000 f972 	bl	800081c <MX_RTC_Init>
  MX_TIM1_Init();
 8000538:	f000 f9b6 	bl	80008a8 <MX_TIM1_Init>
  MX_TIM9_Init();
 800053c:	f000 fa0e 	bl	800095c <MX_TIM9_Init>
  MX_TIM12_Init();
 8000540:	f000 fa78 	bl	8000a34 <MX_TIM12_Init>
  MX_UART4_Init();
 8000544:	f000 fabc 	bl	8000ac0 <MX_UART4_Init>
  MX_UART7_Init();
 8000548:	f000 faea 	bl	8000b20 <MX_UART7_Init>
  MX_UART8_Init();
 800054c:	f000 fb18 	bl	8000b80 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000550:	f000 fb46 	bl	8000be0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000554:	f000 fb74 	bl	8000c40 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000558:	f000 fba2 	bl	8000ca0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800055c:	f000 fbd0 	bl	8000d00 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f009 fba4 	bl	8009cac <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of loggingQueue */
  loggingQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &loggingQueue_attributes);
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <main+0xd8>)
 8000566:	2102      	movs	r1, #2
 8000568:	2010      	movs	r0, #16
 800056a:	f009 fd27 	bl	8009fbc <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <main+0xdc>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of calculationQueue */
  calculationQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &calculationQueue_attributes);
 8000574:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <main+0xe0>)
 8000576:	2102      	movs	r1, #2
 8000578:	2010      	movs	r0, #16
 800057a:	f009 fd1f 	bl	8009fbc <osMessageQueueNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <main+0xe4>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of bridgeQueue */
  bridgeQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &bridgeQueue_attributes);
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <main+0xe8>)
 8000586:	2102      	movs	r1, #2
 8000588:	2010      	movs	r0, #16
 800058a:	f009 fd17 	bl	8009fbc <osMessageQueueNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <main+0xec>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of gyroModuleQueue */
  gyroModuleQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &gyroModuleQueue_attributes);
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <main+0xf0>)
 8000596:	2102      	movs	r1, #2
 8000598:	2010      	movs	r0, #16
 800059a:	f009 fd0f 	bl	8009fbc <osMessageQueueNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <main+0xf4>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(startLoggingTask, NULL, &loggingTask_attributes);
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <main+0xf8>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <main+0xfc>)
 80005aa:	f009 fc33 	bl	8009e14 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a18      	ldr	r2, [pc, #96]	; (8000614 <main+0x100>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of calculationTask */
  calculationTaskHandle = osThreadNew(startCalculationTask, NULL, &calculationTask_attributes);
 80005b4:	4a18      	ldr	r2, [pc, #96]	; (8000618 <main+0x104>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0x108>)
 80005ba:	f009 fc2b 	bl	8009e14 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <main+0x10c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of bridgeTask */
  bridgeTaskHandle = osThreadNew(startBridgeTask, NULL, &bridgeTask_attributes);
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <main+0x110>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <main+0x114>)
 80005ca:	f009 fc23 	bl	8009e14 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <main+0x118>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of gyroModuleTask */
  gyroModuleTaskHandle = osThreadNew(startGyroModuleTask, NULL, &gyroModuleTask_attributes);
 80005d4:	4a16      	ldr	r2, [pc, #88]	; (8000630 <main+0x11c>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4816      	ldr	r0, [pc, #88]	; (8000634 <main+0x120>)
 80005da:	f009 fc1b 	bl	8009e14 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a15      	ldr	r2, [pc, #84]	; (8000638 <main+0x124>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f009 fbb8 	bl	8009d58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0xd4>
 80005ea:	bf00      	nop
 80005ec:	08010904 	.word	0x08010904
 80005f0:	200007c4 	.word	0x200007c4
 80005f4:	0801091c 	.word	0x0801091c
 80005f8:	200007c8 	.word	0x200007c8
 80005fc:	08010934 	.word	0x08010934
 8000600:	200007cc 	.word	0x200007cc
 8000604:	0801094c 	.word	0x0801094c
 8000608:	200007d0 	.word	0x200007d0
 800060c:	08010874 	.word	0x08010874
 8000610:	08000df1 	.word	0x08000df1
 8000614:	200007b4 	.word	0x200007b4
 8000618:	08010898 	.word	0x08010898
 800061c:	08000e05 	.word	0x08000e05
 8000620:	200007b8 	.word	0x200007b8
 8000624:	080108bc 	.word	0x080108bc
 8000628:	08000e15 	.word	0x08000e15
 800062c:	200007bc 	.word	0x200007bc
 8000630:	080108e0 	.word	0x080108e0
 8000634:	08000e25 	.word	0x08000e25
 8000638:	200007c0 	.word	0x200007c0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00f ff96 	bl	801057c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <SystemClock_Config+0xd8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <SystemClock_Config+0xd8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xd8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemClock_Config+0xdc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a25      	ldr	r2, [pc, #148]	; (8000718 <SystemClock_Config+0xdc>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemClock_Config+0xdc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000694:	230a      	movs	r3, #10
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 f811 	bl	80036e8 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 fbb2 	bl	8000e34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d0:	f002 ffba 	bl	8003648 <HAL_PWREx_EnableOverDrive>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006da:	f000 fbab 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80006ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fa98 	bl	8003c30 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000706:	f000 fb95 	bl	8000e34 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C1_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C1_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_I2C1_Init+0x74>)
 8000758:	f001 fc74 	bl	8002044 <HAL_I2C_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 fb67 	bl	8000e34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_I2C1_Init+0x74>)
 800076a:	f001 fcfb 	bl	8002164 <HAL_I2CEx_ConfigAnalogFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 fb5e 	bl	8000e34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2C1_Init+0x74>)
 800077c:	f001 fd3d 	bl	80021fa <HAL_I2CEx_ConfigDigitalFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 fb55 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001f8 	.word	0x200001f8
 8000794:	40005400 	.word	0x40005400
 8000798:	20303e5d 	.word	0x20303e5d

0800079c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C4_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C4_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C4_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C4_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C4_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C4_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C4_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C4_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C4_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C4_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C4_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_I2C4_Init+0x74>)
 80007d8:	f001 fc34 	bl	8002044 <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 fb27 	bl	8000e34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C4_Init+0x74>)
 80007ea:	f001 fcbb 	bl	8002164 <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 fb1e 	bl	8000e34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_I2C4_Init+0x74>)
 80007fc:	f001 fcfd 	bl	80021fa <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 fb15 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000244 	.word	0x20000244
 8000814:	40006000 	.word	0x40006000
 8000818:	20303e5d 	.word	0x20303e5d

0800081c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_RTC_Init+0x44>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <MX_RTC_Init+0x48>)
 8000824:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_RTC_Init+0x44>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_RTC_Init+0x44>)
 800082e:	227f      	movs	r2, #127	; 0x7f
 8000830:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_RTC_Init+0x44>)
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_RTC_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_RTC_Init+0x44>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_RTC_Init+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_RTC_Init+0x44>)
 800084c:	f003 ffc6 	bl	80047dc <HAL_RTC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000856:	f000 faed 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000290 	.word	0x20000290
 8000864:	40002800 	.word	0x40002800

08000868 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SDMMC1_SD_Init+0x38>)
 800086e:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <MX_SDMMC1_SD_Init+0x3c>)
 8000870:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_SDMMC1_SD_Init+0x38>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SDMMC1_SD_Init+0x38>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_SDMMC1_SD_Init+0x38>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SDMMC1_SD_Init+0x38>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <MX_SDMMC1_SD_Init+0x38>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 3;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <MX_SDMMC1_SD_Init+0x38>)
 8000892:	2203      	movs	r2, #3
 8000894:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	200002b0 	.word	0x200002b0
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2224      	movs	r2, #36	; 0x24
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00f fe60 	bl	801057c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_TIM1_Init+0xac>)
 80008c8:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_TIM1_Init+0xb0>)
 80008ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_TIM1_Init+0xac>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_TIM1_Init+0xac>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_TIM1_Init+0xac>)
 80008da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_TIM1_Init+0xac>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_TIM1_Init+0xac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_TIM1_Init+0xac>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008fa:	2301      	movs	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800090a:	2301      	movs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_TIM1_Init+0xac>)
 800091e:	f005 f993 	bl	8005c48 <HAL_TIM_Encoder_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000928:	f000 fa84 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_TIM1_Init+0xac>)
 800093e:	f006 f957 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000948:	f000 fa74 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3730      	adds	r7, #48	; 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000334 	.word	0x20000334
 8000958:	40010000 	.word	0x40010000

0800095c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_TIM9_Init+0xd0>)
 8000980:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <MX_TIM9_Init+0xd4>)
 8000982:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_TIM9_Init+0xd0>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_TIM9_Init+0xd0>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_TIM9_Init+0xd0>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_TIM9_Init+0xd0>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_TIM9_Init+0xd0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80009a4:	4821      	ldr	r0, [pc, #132]	; (8000a2c <MX_TIM9_Init+0xd0>)
 80009a6:	f005 f8f7 	bl	8005b98 <HAL_TIM_IC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM9_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 fa40 	bl	8000e34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009b8:	2350      	movs	r3, #80	; 0x50
 80009ba:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <MX_TIM9_Init+0xd0>)
 80009d0:	f005 fb90 	bl	80060f4 <HAL_TIM_SlaveConfigSynchro>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80009da:	f000 fa2b 	bl	8000e34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_TIM9_Init+0xd0>)
 80009f6:	f005 f9cd 	bl	8005d94 <HAL_TIM_IC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8000a00:	f000 fa18 	bl	8000e34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a04:	2302      	movs	r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2204      	movs	r2, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_TIM9_Init+0xd0>)
 8000a14:	f005 f9be 	bl	8005d94 <HAL_TIM_IC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8000a1e:	f000 fa09 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000380 	.word	0x20000380
 8000a30:	40014000 	.word	0x40014000

08000a34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_TIM12_Init+0x88>)
 8000a50:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000a72:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a74:	f005 f839 	bl	8005aea <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000a7e:	f000 f9d9 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	; 0x60
 8000a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000a9a:	f005 fa17 	bl	8005ecc <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000aa4:	f000 f9c6 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <MX_TIM12_Init+0x84>)
 8000aaa:	f000 fbf1 	bl	8001290 <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200003cc 	.word	0x200003cc
 8000abc:	40001800 	.word	0x40001800

08000ac0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <MX_UART4_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_UART4_Init+0x58>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_UART4_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_UART4_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_UART4_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_UART4_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_UART4_Init+0x58>)
 8000b04:	f006 f902 	bl	8006d0c <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f991 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000418 	.word	0x20000418
 8000b1c:	40004c00 	.word	0x40004c00

08000b20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_UART7_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_UART7_Init+0x58>)
 8000b64:	f006 f8d2 	bl	8006d0c <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f961 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000049c 	.word	0x2000049c
 8000b7c:	40007800 	.word	0x40007800

08000b80 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <MX_UART8_Init+0x5c>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_UART8_Init+0x58>)
 8000bc4:	f006 f8a2 	bl	8006d0c <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 f931 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000520 	.word	0x20000520
 8000bdc:	40007c00 	.word	0x40007c00

08000be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <MX_USART1_UART_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c24:	f006 f872 	bl	8006d0c <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 f901 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200005a4 	.word	0x200005a4
 8000c3c:	40011000 	.word	0x40011000

08000c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART2_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c84:	f006 f842 	bl	8006d0c <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 f8d1 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000628 	.word	0x20000628
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_USART3_UART_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ce4:	f006 f812 	bl	8006d0c <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 f8a1 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200006ac 	.word	0x200006ac
 8000cfc:	40004800 	.word	0x40004800

08000d00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_USART6_UART_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART6_UART_Init+0x58>)
 8000d44:	f005 ffe2 	bl	8006d0c <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f000 f871 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000730 	.word	0x20000730
 8000d5c:	40011400 	.word	0x40011400

08000d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

}
 8000dde:	bf00      	nop
 8000de0:	371c      	adds	r7, #28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <startLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startLoggingTask */
void startLoggingTask(void *argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000df8:	f00e fe0c 	bl	800fa14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f009 f8af 	bl	8009f60 <osDelay>
 8000e02:	e7fb      	b.n	8000dfc <startLoggingTask+0xc>

08000e04 <startCalculationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCalculationTask */
void startCalculationTask(void *argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCalculationTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f009 f8a7 	bl	8009f60 <osDelay>
 8000e12:	e7fb      	b.n	8000e0c <startCalculationTask+0x8>

08000e14 <startBridgeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBridgeTask */
void startBridgeTask(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBridgeTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f009 f89f 	bl	8009f60 <osDelay>
 8000e22:	e7fb      	b.n	8000e1c <startBridgeTask+0x8>

08000e24 <startGyroModuleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGyroModuleTask */
void startGyroModuleTask(void *argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGyroModuleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f009 f897 	bl	8009f60 <osDelay>
 8000e32:	e7fb      	b.n	8000e2c <startGyroModuleTask+0x8>

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	210f      	movs	r1, #15
 8000e7a:	f06f 0001 	mvn.w	r0, #1
 8000e7e:	f000 fe64 	bl	8001b4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0ac      	sub	sp, #176	; 0xb0
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	2284      	movs	r2, #132	; 0x84
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00f fb63 	bl	801057c <memset>
  if(hi2c->Instance==I2C1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a43      	ldr	r2, [pc, #268]	; (8000fc8 <HAL_I2C_MspInit+0x138>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d13c      	bne.n	8000f3a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ec4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 f894 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eda:	f7ff ffab 	bl	8000e34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef6:	23c0      	movs	r3, #192	; 0xc0
 8000ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	482d      	ldr	r0, [pc, #180]	; (8000fd0 <HAL_I2C_MspInit+0x140>)
 8000f1c:	f000 fee6 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000f38:	e042      	b.n	8000fc0 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C4)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13d      	bne.n	8000fc0 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 f851 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8000f60:	f7ff ff68 	bl	8000e34 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f84:	2312      	movs	r3, #18
 8000f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_I2C_MspInit+0x148>)
 8000fa4:	f000 fea2 	bl	8001cec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_I2C_MspInit+0x13c>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	37b0      	adds	r7, #176	; 0xb0
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40006000 	.word	0x40006000
 8000fd8:	40020c00 	.word	0x40020c00

08000fdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0a4      	sub	sp, #144	; 0x90
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2284      	movs	r2, #132	; 0x84
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00f fac5 	bl	801057c <memset>
  if(hrtc->Instance==RTC)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_RTC_MspInit+0x54>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d114      	bne.n	8001026 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fff6 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001016:	f7ff ff0d 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_RTC_MspInit+0x58>)
 800101c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_RTC_MspInit+0x58>)
 8001020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001024:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3790      	adds	r7, #144	; 0x90
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40002800 	.word	0x40002800
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ac      	sub	sp, #176	; 0xb0
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	2284      	movs	r2, #132	; 0x84
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f00f fa8f 	bl	801057c <memset>
  if(hsd->Instance==SDMMC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a33      	ldr	r2, [pc, #204]	; (8001130 <HAL_SD_MspInit+0xf8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d15f      	bne.n	8001128 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001068:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800106c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 800106e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001072:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f002 ffbe 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001086:	f7ff fed5 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_SD_MspInit+0xfc>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <HAL_SD_MspInit+0xfc>)
 8001090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <HAL_SD_MspInit+0xfc>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_SD_MspInit+0xfc>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <HAL_SD_MspInit+0xfc>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_SD_MspInit+0xfc>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_SD_MspInit+0xfc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_SD_MspInit+0xfc>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_SD_MspInit+0xfc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010d2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010ec:	230c      	movs	r3, #12
 80010ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f6:	4619      	mov	r1, r3
 80010f8:	480f      	ldr	r0, [pc, #60]	; (8001138 <HAL_SD_MspInit+0x100>)
 80010fa:	f000 fdf7 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fe:	2304      	movs	r3, #4
 8001100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001116:	230c      	movs	r3, #12
 8001118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <HAL_SD_MspInit+0x104>)
 8001124:	f000 fde2 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	37b0      	adds	r7, #176	; 0xb0
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40012c00 	.word	0x40012c00
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00

08001140 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_TIM_Encoder_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d128      	bne.n	80011b4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x80>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001192:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_TIM_Encoder_MspInit+0x84>)
 80011b0:	f000 fd9c 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40010000 	.word	0x40010000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_TIM_IC_MspInit+0x7c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d127      	bne.n	800123a <HAL_TIM_IC_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_TIM_IC_MspInit+0x80>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_TIM_IC_MspInit+0x80>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_TIM_IC_MspInit+0x80>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_TIM_IC_MspInit+0x80>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_TIM_IC_MspInit+0x80>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_TIM_IC_MspInit+0x80>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800121a:	2320      	movs	r3, #32
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800122a:	2303      	movs	r3, #3
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_TIM_IC_MspInit+0x84>)
 8001236:	f000 fd59 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40014000 	.word	0x40014000
 8001248:	40023800 	.word	0x40023800
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_TIM_PWM_MspInit+0x38>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10b      	bne.n	800127a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_TIM_PWM_MspInit+0x3c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_TIM_PWM_MspInit+0x3c>)
 8001268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_TIM_PWM_MspInit+0x3c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40001800 	.word	0x40001800
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_TIM_MspPostInit+0x64>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d11c      	bne.n	80012ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_TIM_MspPostInit+0x68>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_TIM_MspPostInit+0x68>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_TIM_MspPostInit+0x68>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80012dc:	2309      	movs	r3, #9
 80012de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012e8:	f000 fd00 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40001800 	.word	0x40001800
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0b8      	sub	sp, #224	; 0xe0
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800131c:	2284      	movs	r2, #132	; 0x84
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00f f92b 	bl	801057c <memset>
  if(huart->Instance==UART4)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4ab7      	ldr	r2, [pc, #732]	; (8001608 <HAL_UART_MspInit+0x308>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d13d      	bne.n	80013ac <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fe5b 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800134c:	f7ff fd72 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001350:	4bae      	ldr	r3, [pc, #696]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4aad      	ldr	r2, [pc, #692]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4bab      	ldr	r3, [pc, #684]	; (800160c <HAL_UART_MspInit+0x30c>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001364:	647b      	str	r3, [r7, #68]	; 0x44
 8001366:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4ba8      	ldr	r3, [pc, #672]	; (800160c <HAL_UART_MspInit+0x30c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4aa7      	ldr	r2, [pc, #668]	; (800160c <HAL_UART_MspInit+0x30c>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6313      	str	r3, [r2, #48]	; 0x30
 8001374:	4ba5      	ldr	r3, [pc, #660]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
 800137e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001380:	2303      	movs	r3, #3
 8001382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001398:	2308      	movs	r3, #8
 800139a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a2:	4619      	mov	r1, r3
 80013a4:	489a      	ldr	r0, [pc, #616]	; (8001610 <HAL_UART_MspInit+0x310>)
 80013a6:	f000 fca1 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013aa:	e1c5      	b.n	8001738 <HAL_UART_MspInit+0x438>
  else if(huart->Instance==UART7)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a98      	ldr	r2, [pc, #608]	; (8001614 <HAL_UART_MspInit+0x314>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d13e      	bne.n	8001434 <HAL_UART_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fe18 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80013d2:	f7ff fd2f 	bl	8000e34 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80013d6:	4b8d      	ldr	r3, [pc, #564]	; (800160c <HAL_UART_MspInit+0x30c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a8c      	ldr	r2, [pc, #560]	; (800160c <HAL_UART_MspInit+0x30c>)
 80013dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b8a      	ldr	r3, [pc, #552]	; (800160c <HAL_UART_MspInit+0x30c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4b87      	ldr	r3, [pc, #540]	; (800160c <HAL_UART_MspInit+0x30c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a86      	ldr	r2, [pc, #536]	; (800160c <HAL_UART_MspInit+0x30c>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b84      	ldr	r3, [pc, #528]	; (800160c <HAL_UART_MspInit+0x30c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	63bb      	str	r3, [r7, #56]	; 0x38
 8001404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001406:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800140a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001420:	2308      	movs	r3, #8
 8001422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001426:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800142a:	4619      	mov	r1, r3
 800142c:	487a      	ldr	r0, [pc, #488]	; (8001618 <HAL_UART_MspInit+0x318>)
 800142e:	f000 fc5d 	bl	8001cec <HAL_GPIO_Init>
}
 8001432:	e181      	b.n	8001738 <HAL_UART_MspInit+0x438>
  else if(huart->Instance==UART8)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a78      	ldr	r2, [pc, #480]	; (800161c <HAL_UART_MspInit+0x31c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d13d      	bne.n	80014ba <HAL_UART_MspInit+0x1ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fdd4 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_UART_MspInit+0x15e>
      Error_Handler();
 800145a:	f7ff fceb 	bl	8000e34 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800145e:	4b6b      	ldr	r3, [pc, #428]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a6a      	ldr	r2, [pc, #424]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_UART_MspInit+0x30c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
 8001474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a64      	ldr	r2, [pc, #400]	; (800160c <HAL_UART_MspInit+0x30c>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b62      	ldr	r3, [pc, #392]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
 800148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80014a6:	2308      	movs	r3, #8
 80014a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014b0:	4619      	mov	r1, r3
 80014b2:	4859      	ldr	r0, [pc, #356]	; (8001618 <HAL_UART_MspInit+0x318>)
 80014b4:	f000 fc1a 	bl	8001cec <HAL_GPIO_Init>
}
 80014b8:	e13e      	b.n	8001738 <HAL_UART_MspInit+0x438>
  else if(huart->Instance==USART1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_UART_MspInit+0x320>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d13d      	bne.n	8001540 <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fd92 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 80014de:	f7ff fca9 	bl	8000e34 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <HAL_UART_MspInit+0x30c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a49      	ldr	r2, [pc, #292]	; (800160c <HAL_UART_MspInit+0x30c>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_UART_MspInit+0x30c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <HAL_UART_MspInit+0x30c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a43      	ldr	r2, [pc, #268]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001512:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001516:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800152c:	2307      	movs	r3, #7
 800152e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001536:	4619      	mov	r1, r3
 8001538:	4835      	ldr	r0, [pc, #212]	; (8001610 <HAL_UART_MspInit+0x310>)
 800153a:	f000 fbd7 	bl	8001cec <HAL_GPIO_Init>
}
 800153e:	e0fb      	b.n	8001738 <HAL_UART_MspInit+0x438>
  else if(huart->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a37      	ldr	r2, [pc, #220]	; (8001624 <HAL_UART_MspInit+0x324>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d170      	bne.n	800162c <HAL_UART_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001554:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fd4f 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8001564:	f7ff fc66 	bl	8000e34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_UART_MspInit+0x30c>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <HAL_UART_MspInit+0x30c>)
 800156e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_UART_MspInit+0x30c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_UART_MspInit+0x30c>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_UART_MspInit+0x30c>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_UART_MspInit+0x30c>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_UART_MspInit+0x30c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b0:	2304      	movs	r3, #4
 80015b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c8:	2307      	movs	r3, #7
 80015ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015d2:	4619      	mov	r1, r3
 80015d4:	480e      	ldr	r0, [pc, #56]	; (8001610 <HAL_UART_MspInit+0x310>)
 80015d6:	f000 fb89 	bl	8001cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015da:	2340      	movs	r3, #64	; 0x40
 80015dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f2:	2307      	movs	r3, #7
 80015f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015fc:	4619      	mov	r1, r3
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <HAL_UART_MspInit+0x328>)
 8001600:	f000 fb74 	bl	8001cec <HAL_GPIO_Init>
}
 8001604:	e098      	b.n	8001738 <HAL_UART_MspInit+0x438>
 8001606:	bf00      	nop
 8001608:	40004c00 	.word	0x40004c00
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40007800 	.word	0x40007800
 8001618:	40021000 	.word	0x40021000
 800161c:	40007c00 	.word	0x40007c00
 8001620:	40011000 	.word	0x40011000
 8001624:	40004400 	.word	0x40004400
 8001628:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a43      	ldr	r2, [pc, #268]	; (8001740 <HAL_UART_MspInit+0x440>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d13e      	bne.n	80016b4 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fcd8 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x356>
      Error_Handler();
 8001652:	f7ff fbef 	bl	8000e34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_UART_MspInit+0x444>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <HAL_UART_MspInit+0x444>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_UART_MspInit+0x444>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_UART_MspInit+0x444>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a34      	ldr	r2, [pc, #208]	; (8001744 <HAL_UART_MspInit+0x444>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_UART_MspInit+0x444>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a0:	2307      	movs	r3, #7
 80016a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016aa:	4619      	mov	r1, r3
 80016ac:	4826      	ldr	r0, [pc, #152]	; (8001748 <HAL_UART_MspInit+0x448>)
 80016ae:	f000 fb1d 	bl	8001cec <HAL_GPIO_Init>
}
 80016b2:	e041      	b.n	8001738 <HAL_UART_MspInit+0x438>
  else if(huart->Instance==USART6)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a24      	ldr	r2, [pc, #144]	; (800174c <HAL_UART_MspInit+0x44c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d13c      	bne.n	8001738 <HAL_UART_MspInit+0x438>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80016be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fc94 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_UART_MspInit+0x3de>
      Error_Handler();
 80016da:	f7ff fbab 	bl	8000e34 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_UART_MspInit+0x444>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_UART_MspInit+0x444>)
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_UART_MspInit+0x444>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_UART_MspInit+0x444>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_UART_MspInit+0x444>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_UART_MspInit+0x444>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001726:	2308      	movs	r3, #8
 8001728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <HAL_UART_MspInit+0x450>)
 8001734:	f000 fada 	bl	8001cec <HAL_GPIO_Init>
}
 8001738:	bf00      	nop
 800173a:	37e0      	adds	r7, #224	; 0xe0
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40004800 	.word	0x40004800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40011400 	.word	0x40011400
 8001750:	40020800 	.word	0x40020800

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 f8c2 	bl	800190c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001788:	f00a feae 	bl	800c4e8 <xTaskGetSchedulerState>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001792:	f009 f9f1 	bl	800ab78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <OTG_HS_IRQHandler+0x10>)
 80017a2:	f000 febc 	bl	800251e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20005610 	.word	0x20005610

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f00e fe84 	bl	80104ec <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20050000 	.word	0x20050000
 8001810:	00000400 	.word	0x00000400
 8001814:	200007d4 	.word	0x200007d4
 8001818:	20005a28 	.word	0x20005a28

0800181c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopFillZerobss+0x26>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186a:	f7ff ffd7 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f00e fe43 	bl	80104f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7fe fe4f 	bl	8000514 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001878:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001884:	080109c4 	.word	0x080109c4
  ldr r2, =_sbss
 8001888:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800188c:	20005a24 	.word	0x20005a24

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>

08001892 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001896:	2003      	movs	r0, #3
 8001898:	f000 f94c 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189c:	200f      	movs	r0, #15
 800189e:	f000 f805 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a2:	f7ff facd 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f967 	bl	8001b9e <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f92f 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000008 	.word	0x20000008
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	200007d8 	.word	0x200007d8

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200007d8 	.word	0x200007d8

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00
 80019d8:	05fa0000 	.word	0x05fa0000

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff8e 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff29 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff3e 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff8e 	bl	8001a88 <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5d 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff31 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Start_IT+0x26>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e048      	b.n	8001c6e <HAL_DMA_Start_IT+0xb8>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d137      	bne.n	8001c60 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f842 	bl	8001c8e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	223f      	movs	r2, #63	; 0x3f
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0216 	orr.w	r2, r2, #22
 8001c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c34:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0208 	orr.w	r2, r2, #8
 8001c4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e005      	b.n	8001c6c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001caa:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b40      	cmp	r3, #64	; 0x40
 8001cba:	d108      	bne.n	8001cce <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ccc:	e007      	b.n	8001cde <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	60da      	str	r2, [r3, #12]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e175      	b.n	8001ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8164 	bne.w	8001ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x56>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80be 	beq.w	8001ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a65      	ldr	r2, [pc, #404]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e8e:	4a61      	ldr	r2, [pc, #388]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_GPIO_Init+0x32c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d037      	beq.n	8001f2a <HAL_GPIO_Init+0x23e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_GPIO_Init+0x330>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0x23a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x236>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a55      	ldr	r2, [pc, #340]	; (8002024 <HAL_GPIO_Init+0x338>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x232>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x33c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x22e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a53      	ldr	r2, [pc, #332]	; (800202c <HAL_GPIO_Init+0x340>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x22a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x344>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x348>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x34c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x350>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001f02:	2309      	movs	r3, #9
 8001f04:	e012      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f06:	230a      	movs	r3, #10
 8001f08:	e010      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e00e      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f3c:	4935      	ldr	r1, [pc, #212]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae86 	bls.w	8001d0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40013800 	.word	0x40013800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40021000 	.word	0x40021000
 800202c:	40021400 	.word	0x40021400
 8002030:	40021800 	.word	0x40021800
 8002034:	40021c00 	.word	0x40021c00
 8002038:	40022000 	.word	0x40022000
 800203c:	40022400 	.word	0x40022400
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07f      	b.n	8002156 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe ff10 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	e006      	b.n	80020cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d104      	bne.n	80020de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_I2C_Init+0x11c>)
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69d9      	ldr	r1, [r3, #28]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	02008000 	.word	0x02008000

08002164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	d138      	bne.n	80021ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002184:	2302      	movs	r3, #2
 8002186:	e032      	b.n	80021ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	d139      	bne.n	8002284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800221a:	2302      	movs	r3, #2
 800221c:	e033      	b.n	8002286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2224      	movs	r2, #36	; 0x24
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800224c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002294:	b08f      	sub	sp, #60	; 0x3c
 8002296:	af0a      	add	r7, sp, #40	; 0x28
 8002298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e116      	b.n	80024d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f00d fd5e 	bl	800fd80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f005 ffcf 	bl	8008286 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	687e      	ldr	r6, [r7, #4]
 80022f0:	466d      	mov	r5, sp
 80022f2:	f106 0410 	add.w	r4, r6, #16
 80022f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002302:	e885 0003 	stmia.w	r5, {r0, r1}
 8002306:	1d33      	adds	r3, r6, #4
 8002308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f005 feb0 	bl	8008070 <USB_CoreInit>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0d7      	b.n	80024d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f005 ffbd 	bl	80082a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e04a      	b.n	80023ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	333d      	adds	r3, #61	; 0x3d
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	333c      	adds	r3, #60	; 0x3c
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	b298      	uxth	r0, r3
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3342      	adds	r3, #66	; 0x42
 8002370:	4602      	mov	r2, r0
 8002372:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	333f      	adds	r3, #63	; 0x3f
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	3344      	adds	r3, #68	; 0x44
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3348      	adds	r3, #72	; 0x48
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3350      	adds	r3, #80	; 0x50
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	3301      	adds	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3af      	bcc.n	8002334 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e044      	b.n	8002464 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3b5      	bcc.n	80023da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	687e      	ldr	r6, [r7, #4]
 8002476:	466d      	mov	r5, sp
 8002478:	f106 0410 	add.w	r4, r6, #16
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002488:	e885 0003 	stmia.w	r5, {r0, r1}
 800248c:	1d33      	adds	r3, r6, #4
 800248e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f005 ff55 	bl	8008340 <USB_DevInit>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e014      	b.n	80024d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f001 f89d 	bl	8003600 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f006 ffed 	bl	80094aa <USB_DevDisconnect>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_PCD_Start+0x16>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e012      	b.n	8002516 <HAL_PCD_Start+0x3c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f005 feb1 	bl	8008264 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f006 ffae 	bl	8009468 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800251e:	b590      	push	{r4, r7, lr}
 8002520:	b08d      	sub	sp, #52	; 0x34
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f007 f86c 	bl	8009612 <USB_GetMode>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 83ba 	bne.w	8002cb6 <HAL_PCD_IRQHandler+0x798>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f006 ffd0 	bl	80094ec <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 83b0 	beq.w	8002cb4 <HAL_PCD_IRQHandler+0x796>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f006 ffc7 	bl	80094ec <USB_ReadInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b02      	cmp	r3, #2
 8002566:	d107      	bne.n	8002578 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f002 0202 	and.w	r2, r2, #2
 8002576:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f006 ffb5 	bl	80094ec <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d161      	bne.n	8002650 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0210 	bic.w	r2, r2, #16
 800259a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	0c5b      	lsrs	r3, r3, #17
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d124      	bne.n	8002612 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d035      	beq.n	8002640 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6a38      	ldr	r0, [r7, #32]
 80025e8:	f006 fdec 	bl	80091c4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f8:	441a      	add	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260a:	441a      	add	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	619a      	str	r2, [r3, #24]
 8002610:	e016      	b.n	8002640 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	0c5b      	lsrs	r3, r3, #17
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	2b06      	cmp	r3, #6
 800261c:	d110      	bne.n	8002640 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002624:	2208      	movs	r2, #8
 8002626:	4619      	mov	r1, r3
 8002628:	6a38      	ldr	r0, [r7, #32]
 800262a:	f006 fdcb 	bl	80091c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	441a      	add	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0210 	orr.w	r2, r2, #16
 800264e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f006 ff49 	bl	80094ec <USB_ReadInterrupts>
 800265a:	4603      	mov	r3, r0
 800265c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002660:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002664:	d16e      	bne.n	8002744 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f006 ff4f 	bl	8009512 <USB_ReadDevAllOutEpInterrupt>
 8002674:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002676:	e062      	b.n	800273e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d057      	beq.n	8002732 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f006 ff74 	bl	800957a <USB_ReadDevOutEPInterrupt>
 8002692:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026aa:	461a      	mov	r2, r3
 80026ac:	2301      	movs	r3, #1
 80026ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fdfa 	bl	80032ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ce:	461a      	mov	r2, r3
 80026d0:	2308      	movs	r3, #8
 80026d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fef4 	bl	80034c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f2:	461a      	mov	r2, r3
 80026f4:	2310      	movs	r3, #16
 80026f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270e:	461a      	mov	r2, r3
 8002710:	2320      	movs	r3, #32
 8002712:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272a:	461a      	mov	r2, r3
 800272c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002730:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	3301      	adds	r3, #1
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d199      	bne.n	8002678 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f006 fecf 	bl	80094ec <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002758:	f040 80c0 	bne.w	80028dc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f006 fef0 	bl	8009546 <USB_ReadDevAllInEpInterrupt>
 8002766:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800276c:	e0b2      	b.n	80028d4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a7 	beq.w	80028c8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f006 ff16 	bl	80095b6 <USB_ReadDevInEPInterrupt>
 800278a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d057      	beq.n	8002846 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	2201      	movs	r2, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69f9      	ldr	r1, [r7, #28]
 80027b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027b6:	4013      	ands	r3, r2
 80027b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c6:	461a      	mov	r2, r3
 80027c8:	2301      	movs	r3, #1
 80027ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d132      	bne.n	800283a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3348      	adds	r3, #72	; 0x48
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4403      	add	r3, r0
 80027f4:	3344      	adds	r3, #68	; 0x44
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4419      	add	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4403      	add	r3, r0
 8002808:	3348      	adds	r3, #72	; 0x48
 800280a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d113      	bne.n	800283a <HAL_PCD_IRQHandler+0x31c>
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3350      	adds	r3, #80	; 0x50
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d108      	bne.n	800283a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002832:	461a      	mov	r2, r3
 8002834:	2101      	movs	r1, #1
 8002836:	f006 ff1f 	bl	8009678 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f00d fb5e 	bl	800ff02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285c:	461a      	mov	r2, r3
 800285e:	2308      	movs	r3, #8
 8002860:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002878:	461a      	mov	r2, r3
 800287a:	2310      	movs	r3, #16
 800287c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002894:	461a      	mov	r2, r3
 8002896:	2340      	movs	r3, #64	; 0x40
 8002898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	2302      	movs	r3, #2
 80028b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fc65 	bl	8003192 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	3301      	adds	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f47f af49 	bne.w	800276e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 fe03 	bl	80094ec <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f0:	d122      	bne.n	8002938 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002918:	2100      	movs	r1, #0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f00d fd66 	bl	80103ec <HAL_PCDEx_LPM_Callback>
 8002920:	e002      	b.n	8002928 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f00d fb64 	bl	800fff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f006 fdd5 	bl	80094ec <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294c:	d112      	bne.n	8002974 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f00d fb20 	bl	800ffa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002972:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f006 fdb7 	bl	80094ec <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002988:	d121      	bne.n	80029ce <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002998:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029be:	2101      	movs	r1, #1
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f00d fd13 	bl	80103ec <HAL_PCDEx_LPM_Callback>
 80029c6:	e002      	b.n	80029ce <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f00d faeb 	bl	800ffa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f006 fd8a 	bl	80094ec <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e2:	f040 80b7 	bne.w	8002b54 <HAL_PCD_IRQHandler+0x636>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2110      	movs	r1, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f005 fdfb 	bl	80085fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0a:	e046      	b.n	8002a9a <HAL_PCD_IRQHandler+0x57c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a84:	0151      	lsls	r1, r2, #5
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	440a      	add	r2, r1
 8002a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	3301      	adds	r3, #1
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3b3      	bcc.n	8002a0c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ab6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d016      	beq.n	8002aee <HAL_PCD_IRQHandler+0x5d0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad0:	f043 030b 	orr.w	r3, r3, #11
 8002ad4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae6:	f043 030b 	orr.w	r3, r3, #11
 8002aea:	6453      	str	r3, [r2, #68]	; 0x44
 8002aec:	e015      	b.n	8002b1a <HAL_PCD_IRQHandler+0x5fc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	4619      	mov	r1, r3
 8002afe:	f242 032b 	movw	r3, #8235	; 0x202b
 8002b02:	4313      	orrs	r3, r2
 8002b04:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b14:	f043 030b 	orr.w	r3, r3, #11
 8002b18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f006 fd9a 	bl	8009678 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f006 fcc7 	bl	80094ec <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b68:	d124      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x696>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f006 fd5e 	bl	8009630 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f005 fdb8 	bl	80086ee <USB_GetDevSpeed>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681c      	ldr	r4, [r3, #0]
 8002b8a:	f001 fa03 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8002b8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f005 fac1 	bl	8008120 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f00d f9d7 	bl	800ff52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f006 fc97 	bl	80094ec <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d10a      	bne.n	8002bde <HAL_PCD_IRQHandler+0x6c0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f00d f9b4 	bl	800ff36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f002 0208 	and.w	r2, r2, #8
 8002bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f006 fc82 	bl	80094ec <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf2:	d10f      	bne.n	8002c14 <HAL_PCD_IRQHandler+0x6f6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f00d fa16 	bl	8010030 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f006 fc67 	bl	80094ec <USB_ReadInterrupts>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c28:	d10f      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x72c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f00d f9e9 	bl	801000c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f006 fc4c 	bl	80094ec <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d10a      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x758>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f00d f9f7 	bl	8010054 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f006 fc36 	bl	80094ec <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d115      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x798>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x784>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f00d f9e7 	bl	8010070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e000      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x798>
      return;
 8002cb4:	bf00      	nop
    }
  }
}
 8002cb6:	3734      	adds	r7, #52	; 0x34
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}

08002cbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_PCD_SetAddress+0x1a>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e013      	b.n	8002cfe <HAL_PCD_SetAddress+0x42>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f006 fb94 	bl	800941c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	4608      	mov	r0, r1
 8002d10:	4611      	mov	r1, r2
 8002d12:	461a      	mov	r2, r3
 8002d14:	4603      	mov	r3, r0
 8002d16:	70fb      	strb	r3, [r7, #3]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	803b      	strh	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da0f      	bge.n	8002d4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3338      	adds	r3, #56	; 0x38
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	705a      	strb	r2, [r3, #1]
 8002d4a:	e00f      	b.n	8002d6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d78:	883a      	ldrh	r2, [r7, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	78ba      	ldrb	r2, [r7, #2]
 8002d82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d96:	78bb      	ldrb	r3, [r7, #2]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d102      	bne.n	8002da2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_PCD_EP_Open+0xaa>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00e      	b.n	8002dce <HAL_PCD_EP_Open+0xc8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68f9      	ldr	r1, [r7, #12]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f005 fcba 	bl	8008738 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0f      	bge.n	8002e0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3338      	adds	r3, #56	; 0x38
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	705a      	strb	r2, [r3, #1]
 8002e08:	e00f      	b.n	8002e2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_PCD_EP_Close+0x6e>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e00e      	b.n	8002e62 <HAL_PCD_EP_Close+0x8c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68f9      	ldr	r1, [r7, #12]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fcf8 	bl	8008848 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	460b      	mov	r3, r1
 8002e78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7a:	7afb      	ldrb	r3, [r7, #11]
 8002e7c:	f003 020f 	and.w	r2, r3, #15
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	6979      	ldr	r1, [r7, #20]
 8002ede:	f005 ffdb 	bl	8008e98 <USB_EP0StartXfer>
 8002ee2:	e008      	b.n	8002ef6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	6979      	ldr	r1, [r7, #20]
 8002ef2:	f005 fd85 	bl	8008a00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 020f 	and.w	r2, r3, #15
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	3338      	adds	r3, #56	; 0x38
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	3304      	adds	r3, #4
 8002f56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2200      	movs	r2, #0
 8002f68:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d102      	bne.n	8002f8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6979      	ldr	r1, [r7, #20]
 8002fa2:	f005 ff79 	bl	8008e98 <USB_EP0StartXfer>
 8002fa6:	e008      	b.n	8002fba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6979      	ldr	r1, [r7, #20]
 8002fb6:	f005 fd23 	bl	8008a00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d901      	bls.n	8002fe2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e050      	b.n	8003084 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da0f      	bge.n	800300a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	3338      	adds	r3, #56	; 0x38
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3304      	adds	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	705a      	strb	r2, [r3, #1]
 8003008:	e00d      	b.n	8003026 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	3304      	adds	r3, #4
 800301e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_PCD_EP_SetStall+0x82>
 8003042:	2302      	movs	r3, #2
 8003044:	e01e      	b.n	8003084 <HAL_PCD_EP_SetStall+0xc0>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	f006 f90d 	bl	8009274 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	b2d9      	uxtb	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003074:	461a      	mov	r2, r3
 8003076:	f006 faff 	bl	8009678 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d901      	bls.n	80030aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e042      	b.n	8003130 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da0f      	bge.n	80030d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	3338      	adds	r3, #56	; 0x38
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	3304      	adds	r3, #4
 80030c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	705a      	strb	r2, [r3, #1]
 80030d0:	e00f      	b.n	80030f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_PCD_EP_ClrStall+0x86>
 800310e:	2302      	movs	r3, #2
 8003110:	e00e      	b.n	8003130 <HAL_PCD_EP_ClrStall+0xa4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f006 f915 	bl	8009350 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_PCD_EP_Flush+0x1a>
 800314e:	2302      	movs	r3, #2
 8003150:	e01b      	b.n	800318a <HAL_PCD_EP_Flush+0x52>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800315a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da09      	bge.n	8003176 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f005 fa44 	bl	80085fc <USB_FlushTxFifo>
 8003174:	e004      	b.n	8003180 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f005 fa70 	bl	8008660 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b08a      	sub	sp, #40	; 0x28
 8003196:	af02      	add	r7, sp, #8
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3338      	adds	r3, #56	; 0x38
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d901      	bls.n	80031ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e06c      	b.n	80032a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d902      	bls.n	80031e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3303      	adds	r3, #3
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ee:	e02b      	b.n	8003248 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	d902      	bls.n	800320c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3303      	adds	r3, #3
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68d9      	ldr	r1, [r3, #12]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003224:	b2db      	uxtb	r3, r3
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	4603      	mov	r3, r0
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f005 ff8c 	bl	8009148 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	441a      	add	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	441a      	add	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	b29b      	uxth	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	429a      	cmp	r2, r3
 800325c:	d809      	bhi.n	8003272 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003266:	429a      	cmp	r2, r3
 8003268:	d203      	bcs.n	8003272 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1be      	bne.n	80031f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	429a      	cmp	r2, r3
 800327c:	d811      	bhi.n	80032a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	2201      	movs	r2, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	43db      	mvns	r3, r3
 8003298:	6939      	ldr	r1, [r7, #16]
 800329a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800329e:	4013      	ands	r3, r2
 80032a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3720      	adds	r7, #32
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	333c      	adds	r3, #60	; 0x3c
 80032c4:	3304      	adds	r3, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	f040 80a0 	bne.w	8003424 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a72      	ldr	r2, [pc, #456]	; (80034bc <PCD_EP_OutXfrComplete_int+0x210>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	f240 80dd 	bls.w	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80d7 	beq.w	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	6093      	str	r3, [r2, #8]
 8003318:	e0cb      	b.n	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003330:	461a      	mov	r2, r3
 8003332:	2320      	movs	r3, #32
 8003334:	6093      	str	r3, [r2, #8]
 8003336:	e0bc      	b.n	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 80b7 	bne.w	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <PCD_EP_OutXfrComplete_int+0x210>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d90f      	bls.n	800336c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	461a      	mov	r2, r3
 8003364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003368:	6093      	str	r3, [r2, #8]
 800336a:	e0a2      	b.n	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800337e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	440b      	add	r3, r1
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003392:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4403      	add	r3, r0
 80033a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4403      	add	r3, r0
 80033ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4419      	add	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4403      	add	r3, r0
 80033e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d114      	bne.n	8003416 <PCD_EP_OutXfrComplete_int+0x16a>
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800340e:	461a      	mov	r2, r3
 8003410:	2101      	movs	r1, #1
 8003412:	f006 f931 	bl	8009678 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	4619      	mov	r1, r3
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f00c fd55 	bl	800fecc <HAL_PCD_DataOutStageCallback>
 8003422:	e046      	b.n	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d124      	bne.n	8003476 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e032      	b.n	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2320      	movs	r3, #32
 8003466:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f00c fd2c 	bl	800fecc <HAL_PCD_DataOutStageCallback>
 8003474:	e01d      	b.n	80034b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d114      	bne.n	80034a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d108      	bne.n	80034a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800349e:	461a      	mov	r2, r3
 80034a0:	2100      	movs	r1, #0
 80034a2:	f006 f8e9 	bl	8009678 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f00c fd0d 	bl	800fecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	4f54300a 	.word	0x4f54300a
 80034c0:	4f54310a 	.word	0x4f54310a

080034c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	333c      	adds	r3, #60	; 0x3c
 80034dc:	3304      	adds	r3, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <PCD_EP_OutSetupPacket_int+0x88>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d90e      	bls.n	8003518 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003500:	2b00      	cmp	r3, #0
 8003502:	d009      	beq.n	8003518 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003510:	461a      	mov	r2, r3
 8003512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003516:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f00c fcc5 	bl	800fea8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <PCD_EP_OutSetupPacket_int+0x88>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d90c      	bls.n	8003540 <PCD_EP_OutSetupPacket_int+0x7c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d108      	bne.n	8003540 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003538:	461a      	mov	r2, r3
 800353a:	2101      	movs	r1, #1
 800353c:	f006 f89c 	bl	8009678 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	4f54300a 	.word	0x4f54300a

08003550 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
 800355c:	4613      	mov	r3, r2
 800355e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800356e:	883b      	ldrh	r3, [r7, #0]
 8003570:	0419      	lsls	r1, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	430a      	orrs	r2, r1
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
 800357c:	e028      	b.n	80035d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4413      	add	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e00d      	b.n	80035ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3340      	adds	r3, #64	; 0x40
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4413      	add	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	3301      	adds	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3ec      	bcc.n	8003592 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035b8:	883b      	ldrh	r3, [r7, #0]
 80035ba:	0418      	lsls	r0, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	4302      	orrs	r2, r0
 80035c8:	3340      	adds	r3, #64	; 0x40
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_PCDEx_ActivateLPM+0x44>)
 8003630:	4313      	orrs	r3, r2
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	10000003 	.word	0x10000003

08003648 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800366a:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003676:	f7fe f95d 	bl	8001934 <HAL_GetTick>
 800367a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800367c:	e009      	b.n	8003692 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800367e:	f7fe f959 	bl	8001934 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800368c:	d901      	bls.n	8003692 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e022      	b.n	80036d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369e:	d1ee      	bne.n	800367e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ac:	f7fe f942 	bl	8001934 <HAL_GetTick>
 80036b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036b2:	e009      	b.n	80036c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b4:	f7fe f93e 	bl	8001934 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c2:	d901      	bls.n	80036c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e007      	b.n	80036d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036d4:	d1ee      	bne.n	80036b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40007000 	.word	0x40007000

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e291      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8087 	beq.w	800381a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800370c:	4b96      	ldr	r3, [pc, #600]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b04      	cmp	r3, #4
 8003716:	d00c      	beq.n	8003732 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003718:	4b93      	ldr	r3, [pc, #588]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d112      	bne.n	800374a <HAL_RCC_OscConfig+0x62>
 8003724:	4b90      	ldr	r3, [pc, #576]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003730:	d10b      	bne.n	800374a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003732:	4b8d      	ldr	r3, [pc, #564]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06c      	beq.n	8003818 <HAL_RCC_OscConfig+0x130>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d168      	bne.n	8003818 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e26b      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x7a>
 8003754:	4b84      	ldr	r3, [pc, #528]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a83      	ldr	r2, [pc, #524]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	e02e      	b.n	80037c0 <HAL_RCC_OscConfig+0xd8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x9c>
 800376a:	4b7f      	ldr	r3, [pc, #508]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7e      	ldr	r2, [pc, #504]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b7c      	ldr	r3, [pc, #496]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7b      	ldr	r2, [pc, #492]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800377c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xd8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0xc0>
 800378e:	4b76      	ldr	r3, [pc, #472]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a75      	ldr	r2, [pc, #468]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b73      	ldr	r3, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a72      	ldr	r2, [pc, #456]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xd8>
 80037a8:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6e      	ldr	r2, [pc, #440]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b6c      	ldr	r3, [pc, #432]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6b      	ldr	r2, [pc, #428]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe f8b4 	bl	8001934 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe f8b0 	bl	8001934 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e21f      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b61      	ldr	r3, [pc, #388]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xe8>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe f8a0 	bl	8001934 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fe f89c 	bl	8001934 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e20b      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b57      	ldr	r3, [pc, #348]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x110>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d069      	beq.n	80038fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003826:	4b50      	ldr	r3, [pc, #320]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d11c      	bne.n	8003878 <HAL_RCC_OscConfig+0x190>
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x17a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1df      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	493d      	ldr	r1, [pc, #244]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	e040      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe f852 	bl	8001934 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003894:	f7fe f84e 	bl	8001934 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1bd      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b30      	ldr	r3, [pc, #192]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4929      	ldr	r1, [pc, #164]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
 80038c6:	e018      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a26      	ldr	r2, [pc, #152]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe f82e 	bl	8001934 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fe f82a 	bl	8001934 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e199      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d038      	beq.n	8003978 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	4a15      	ldr	r2, [pc, #84]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fe f80b 	bl	8001934 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003922:	f7fe f807 	bl	8001934 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e176      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x23a>
 8003940:	e01a      	b.n	8003978 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd fff1 	bl	8001934 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd ffed 	bl	8001934 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d903      	bls.n	800396c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e15c      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
 8003968:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b91      	ldr	r3, [pc, #580]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ee      	bne.n	8003956 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a4 	beq.w	8003ace <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003986:	4b8b      	ldr	r3, [pc, #556]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a87      	ldr	r2, [pc, #540]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b85      	ldr	r3, [pc, #532]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ae:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039ba:	4b7f      	ldr	r3, [pc, #508]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7e      	ldr	r2, [pc, #504]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fd ffb5 	bl	8001934 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fd ffb1 	bl	8001934 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	; 0x64
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e120      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e0:	4b75      	ldr	r3, [pc, #468]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x31a>
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a6e      	ldr	r2, [pc, #440]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	e02d      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x33c>
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	4a66      	ldr	r2, [pc, #408]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	6713      	str	r3, [r2, #112]	; 0x70
 8003a22:	e01c      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x35e>
 8003a2c:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a60      	ldr	r2, [pc, #384]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	4b5e      	ldr	r3, [pc, #376]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	e00b      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
 8003a46:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	4b58      	ldr	r3, [pc, #352]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a57      	ldr	r2, [pc, #348]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fd ff65 	bl	8001934 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fd ff61 	bl	8001934 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e0ce      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCC_OscConfig+0x386>
 8003a90:	e014      	b.n	8003abc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fd ff4f 	bl	8001934 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd ff4b 	bl	8001934 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0b8      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ee      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac2:	4b3c      	ldr	r3, [pc, #240]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a3b      	ldr	r2, [pc, #236]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a4 	beq.w	8003c20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d06b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d149      	bne.n	8003b80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fd ff1c 	bl	8001934 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd ff18 	bl	8001934 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e087      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	019b      	lsls	r3, r3, #6
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	3b01      	subs	r3, #1
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	4313      	orrs	r3, r2
 8003b44:	4a1b      	ldr	r2, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd feec 	bl	8001934 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fd fee8 	bl	8001934 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e057      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x478>
 8003b7e:	e04f      	b.n	8003c20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fed2 	bl	8001934 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fd fece 	bl	8001934 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e03d      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4ac>
 8003bb2:	e035      	b.n	8003c20 <HAL_RCC_OscConfig+0x538>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x544>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d028      	beq.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d121      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d11a      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d111      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	3b01      	subs	r3, #1
 8003c06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800

08003c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0d0      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d910      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 020f 	bic.w	r2, r3, #15
 8003c5e:	4965      	ldr	r1, [pc, #404]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b8      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c90:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a58      	ldr	r2, [pc, #352]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a52      	ldr	r2, [pc, #328]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	494d      	ldr	r1, [pc, #308]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d040      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d115      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e073      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e06b      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d12:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 0203 	bic.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4936      	ldr	r1, [pc, #216]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d24:	f7fd fe06 	bl	8001934 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2c:	f7fd fe02 	bl	8001934 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e053      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 020c 	and.w	r2, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1eb      	bne.n	8003d2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d210      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	4922      	ldr	r1, [pc, #136]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e032      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4916      	ldr	r1, [pc, #88]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dc2:	f000 f821 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	490a      	ldr	r1, [pc, #40]	; (8003dfc <HAL_RCC_ClockConfig+0x1cc>)
 8003dd4:	5ccb      	ldrb	r3, [r1, r3]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x1d0>)
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_ClockConfig+0x1d4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fd62 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08010964 	.word	0x08010964
 8003e00:	20000000 	.word	0x20000000
 8003e04:	20000004 	.word	0x20000004

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b090      	sub	sp, #64	; 0x40
 8003e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
 8003e14:	2300      	movs	r3, #0
 8003e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e18:	2300      	movs	r3, #0
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e20:	4b59      	ldr	r3, [pc, #356]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d00d      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x40>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	f200 80a1 	bhi.w	8003f74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e3a:	e09b      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e40:	e09b      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e42:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e46:	e098      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e48:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e52:	4b4d      	ldr	r3, [pc, #308]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d028      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	2200      	movs	r2, #0
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	627a      	str	r2, [r7, #36]	; 0x24
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e70:	2100      	movs	r1, #0
 8003e72:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e74:	fb03 f201 	mul.w	r2, r3, r1
 8003e78:	2300      	movs	r3, #0
 8003e7a:	fb00 f303 	mul.w	r3, r0, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	4a43      	ldr	r2, [pc, #268]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e82:	fba0 1202 	umull	r1, r2, r0, r2
 8003e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e88:	460a      	mov	r2, r1
 8003e8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8e:	4413      	add	r3, r2
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	2200      	movs	r2, #0
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	61fa      	str	r2, [r7, #28]
 8003e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ea2:	f7fc f9b5 	bl	8000210 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4613      	mov	r3, r2
 8003eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eae:	e053      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb0:	4b35      	ldr	r3, [pc, #212]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	617a      	str	r2, [r7, #20]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ec2:	f04f 0b00 	mov.w	fp, #0
 8003ec6:	4652      	mov	r2, sl
 8003ec8:	465b      	mov	r3, fp
 8003eca:	f04f 0000 	mov.w	r0, #0
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	0159      	lsls	r1, r3, #5
 8003ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed8:	0150      	lsls	r0, r2, #5
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	ebb2 080a 	subs.w	r8, r2, sl
 8003ee2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ef2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ef6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003efa:	ebb2 0408 	subs.w	r4, r2, r8
 8003efe:	eb63 0509 	sbc.w	r5, r3, r9
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	00eb      	lsls	r3, r5, #3
 8003f0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f10:	00e2      	lsls	r2, r4, #3
 8003f12:	4614      	mov	r4, r2
 8003f14:	461d      	mov	r5, r3
 8003f16:	eb14 030a 	adds.w	r3, r4, sl
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	eb45 030b 	adc.w	r3, r5, fp
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	028b      	lsls	r3, r1, #10
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f38:	4621      	mov	r1, r4
 8003f3a:	028a      	lsls	r2, r1, #10
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	2200      	movs	r2, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	60fa      	str	r2, [r7, #12]
 8003f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f4c:	f7fc f960 	bl	8000210 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f72:	e002      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3740      	adds	r7, #64	; 0x40
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	017d7840 	.word	0x017d7840

08003f94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000000 	.word	0x20000000

08003fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb0:	f7ff fff0 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0a9b      	lsrs	r3, r3, #10
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4903      	ldr	r1, [pc, #12]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	08010974 	.word	0x08010974

08003fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd8:	f7ff ffdc 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0b5b      	lsrs	r3, r3, #13
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	08010974 	.word	0x08010974

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004024:	4b69      	ldr	r3, [pc, #420]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a68      	ldr	r2, [pc, #416]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800402e:	6093      	str	r3, [r2, #8]
 8004030:	4b66      	ldr	r3, [pc, #408]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	4964      	ldr	r1, [pc, #400]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004046:	2301      	movs	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d017      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004056:	4b5d      	ldr	r3, [pc, #372]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	4959      	ldr	r1, [pc, #356]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004074:	d101      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d017      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004092:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004098:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	494a      	ldr	r1, [pc, #296]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d101      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 808b 	beq.w	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	4a39      	ldr	r2, [pc, #228]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6413      	str	r3, [r2, #64]	; 0x40
 80040ec:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040f8:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a34      	ldr	r2, [pc, #208]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fd fc16 	bl	8001934 <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fd fc12 	bl	8001934 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e357      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800411e:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800412a:	4b28      	ldr	r3, [pc, #160]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d035      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d02e      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004150:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004168:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004170:	4b16      	ldr	r3, [pc, #88]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d114      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fbda 	bl	8001934 <HAL_GetTick>
 8004180:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd fbd6 	bl	8001934 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e319      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b2:	d111      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041c2:	400b      	ands	r3, r1
 80041c4:	4901      	ldr	r1, [pc, #4]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
 80041ca:	e00b      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000
 80041d4:	0ffffcff 	.word	0x0ffffcff
 80041d8:	4baa      	ldr	r3, [pc, #680]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4aa9      	ldr	r2, [pc, #676]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041e2:	6093      	str	r3, [r2, #8]
 80041e4:	4ba7      	ldr	r3, [pc, #668]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	49a4      	ldr	r1, [pc, #656]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d010      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004202:	4ba0      	ldr	r3, [pc, #640]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004208:	4a9e      	ldr	r2, [pc, #632]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800420e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004212:	4b9c      	ldr	r3, [pc, #624]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004214:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	4999      	ldr	r1, [pc, #612]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004230:	4b94      	ldr	r3, [pc, #592]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423e:	4991      	ldr	r1, [pc, #580]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004252:	4b8c      	ldr	r3, [pc, #560]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004260:	4988      	ldr	r1, [pc, #544]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004274:	4b83      	ldr	r3, [pc, #524]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004282:	4980      	ldr	r1, [pc, #512]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004296:	4b7b      	ldr	r3, [pc, #492]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	4977      	ldr	r1, [pc, #476]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b8:	4b72      	ldr	r3, [pc, #456]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	496f      	ldr	r1, [pc, #444]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042da:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f023 020c 	bic.w	r2, r3, #12
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e8:	4966      	ldr	r1, [pc, #408]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042fc:	4b61      	ldr	r3, [pc, #388]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	495e      	ldr	r1, [pc, #376]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800431e:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	4955      	ldr	r1, [pc, #340]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004340:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	494d      	ldr	r1, [pc, #308]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004362:	4b48      	ldr	r3, [pc, #288]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	4944      	ldr	r1, [pc, #272]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004384:	4b3f      	ldr	r3, [pc, #252]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	493c      	ldr	r1, [pc, #240]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b4:	4933      	ldr	r1, [pc, #204]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043c8:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d6:	492b      	ldr	r1, [pc, #172]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d011      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f8:	4922      	ldr	r1, [pc, #136]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004438:	4912      	ldr	r1, [pc, #72]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445c:	4909      	ldr	r1, [pc, #36]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d006      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80d9 	beq.w	800462a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a01      	ldr	r2, [pc, #4]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004482:	e001      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004484:	40023800 	.word	0x40023800
 8004488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448a:	f7fd fa53 	bl	8001934 <HAL_GetTick>
 800448e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004492:	f7fd fa4f 	bl	8001934 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b64      	cmp	r3, #100	; 0x64
 800449e:	d901      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e194      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044a4:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d021      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11d      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044c4:	4b64      	ldr	r3, [pc, #400]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044d2:	4b61      	ldr	r3, [pc, #388]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	019a      	lsls	r2, r3, #6
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	4957      	ldr	r1, [pc, #348]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800451e:	2b00      	cmp	r3, #0
 8004520:	d02e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452a:	d129      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800452c:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800453a:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004540:	0f1b      	lsrs	r3, r3, #28
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	019a      	lsls	r2, r3, #6
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	431a      	orrs	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	071b      	lsls	r3, r3, #28
 8004560:	493d      	ldr	r1, [pc, #244]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004568:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456e:	f023 021f 	bic.w	r2, r3, #31
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	3b01      	subs	r3, #1
 8004578:	4937      	ldr	r1, [pc, #220]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01d      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800458c:	4b32      	ldr	r3, [pc, #200]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	0e1b      	lsrs	r3, r3, #24
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a0:	0f1b      	lsrs	r3, r3, #28
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	019a      	lsls	r2, r3, #6
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	431a      	orrs	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	071b      	lsls	r3, r3, #28
 80045c0:	4925      	ldr	r1, [pc, #148]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d011      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	019a      	lsls	r2, r3, #6
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	061b      	lsls	r3, r3, #24
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	4919      	ldr	r1, [pc, #100]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045f8:	4b17      	ldr	r3, [pc, #92]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a16      	ldr	r2, [pc, #88]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fd f996 	bl	8001934 <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800460c:	f7fd f992 	bl	8001934 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0d7      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b01      	cmp	r3, #1
 800462e:	f040 80cd 	bne.w	80047cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463e:	f7fd f979 	bl	8001934 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004646:	f7fd f975 	bl	8001934 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b64      	cmp	r3, #100	; 0x64
 8004652:	d903      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0ba      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004658:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800465c:	4b5e      	ldr	r3, [pc, #376]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004668:	d0ed      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004686:	2b00      	cmp	r3, #0
 8004688:	d02e      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d12a      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004692:	4b51      	ldr	r3, [pc, #324]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046a0:	4b4d      	ldr	r3, [pc, #308]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	0f1b      	lsrs	r3, r3, #28
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	019a      	lsls	r2, r3, #6
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	061b      	lsls	r3, r3, #24
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	071b      	lsls	r3, r3, #28
 80046c6:	4944      	ldr	r1, [pc, #272]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046ce:	4b42      	ldr	r3, [pc, #264]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	3b01      	subs	r3, #1
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	493d      	ldr	r1, [pc, #244]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d022      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fc:	d11d      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	0e1b      	lsrs	r3, r3, #24
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	0f1b      	lsrs	r3, r3, #28
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	019a      	lsls	r2, r3, #6
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	431a      	orrs	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	071b      	lsls	r3, r3, #28
 8004732:	4929      	ldr	r1, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d028      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004746:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	0e1b      	lsrs	r3, r3, #24
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004754:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	019a      	lsls	r2, r3, #6
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	431a      	orrs	r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	071b      	lsls	r3, r3, #28
 800477a:	4917      	ldr	r1, [pc, #92]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4911      	ldr	r1, [pc, #68]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a4:	f7fd f8c6 	bl	8001934 <HAL_GetTick>
 80047a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047ac:	f7fd f8c2 	bl	8001934 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e007      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ca:	d1ef      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800

080047dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e081      	b.n	80048f2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7f5b      	ldrb	r3, [r3, #29]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fbec 	bl	8000fdc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	22ca      	movs	r2, #202	; 0xca
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2253      	movs	r2, #83	; 0x53
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f898 	bl	8004950 <RTC_EnterInitMode>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	22ff      	movs	r2, #255	; 0xff
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e05c      	b.n	80048f2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <HAL_RTC_Init+0x120>)
 8004844:	400b      	ands	r3, r1
 8004846:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6899      	ldr	r1, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6919      	ldr	r1, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	041a      	lsls	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004892:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10e      	bne.n	80048c0 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f82c 	bl	8004900 <HAL_RTC_WaitForSynchro>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22ff      	movs	r2, #255	; 0xff
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e018      	b.n	80048f2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0208 	bic.w	r2, r2, #8
 80048ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	22ff      	movs	r2, #255	; 0xff
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	ff8fffbf 	.word	0xff8fffbf

08004900 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800491a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800491c:	f7fd f80a 	bl	8001934 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004922:	e009      	b.n	8004938 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004924:	f7fd f806 	bl	8001934 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004932:	d901      	bls.n	8004938 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e007      	b.n	8004948 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0ee      	beq.n	8004924 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d119      	bne.n	800499e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f04f 32ff 	mov.w	r2, #4294967295
 8004972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004974:	f7fc ffde 	bl	8001934 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800497a:	e009      	b.n	8004990 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800497c:	f7fc ffda 	bl	8001934 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498a:	d901      	bls.n	8004990 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e007      	b.n	80049a0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ee      	beq.n	800497c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e022      	b.n	8004a00 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fc fb33 	bl	8001038 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2203      	movs	r2, #3
 80049d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f814 	bl	8004a08 <HAL_SD_InitCard>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e00a      	b.n	8004a00 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a08:	b5b0      	push	{r4, r5, r7, lr}
 8004a0a:	b08e      	sub	sp, #56	; 0x38
 8004a0c:	af04      	add	r7, sp, #16
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004a24:	2376      	movs	r3, #118	; 0x76
 8004a26:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681d      	ldr	r5, [r3, #0]
 8004a2c:	466c      	mov	r4, sp
 8004a2e:	f107 0314 	add.w	r3, r7, #20
 8004a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a3a:	f107 0308 	add.w	r3, r7, #8
 8004a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a40:	4628      	mov	r0, r5
 8004a42:	f002 fdaf 	bl	80075a4 <SDMMC_Init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e059      	b.n	8004b0c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a66:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f002 fdd2 	bl	8007616 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a80:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004a82:	2002      	movs	r0, #2
 8004a84:	f7fc ff62 	bl	800194c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fe0f 	bl	80056ac <SD_PowerON>
 8004a8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e02e      	b.n	8004b0c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fd2e 	bl	8005510 <SD_InitCard>
 8004ab4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e01b      	b.n	8004b0c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 fe2d 	bl	800773c <SDMMC_CmdBlockLength>
 8004ae2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00f      	beq.n	8004b0a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <HAL_SD_InitCard+0x10c>)
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bdb0      	pop	{r4, r5, r7, pc}
 8004b14:	004005ff 	.word	0x004005ff

08004b18 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	; 0x30
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0c3      	b.n	8004cc8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	f040 80bc 	bne.w	8004cc6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	441a      	add	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d907      	bls.n	8004b72 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0aa      	b.n	8004cc8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2203      	movs	r2, #3
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a4e      	ldr	r2, [pc, #312]	; (8004cd0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a4d      	ldr	r2, [pc, #308]	; (8004cd4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004ba0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3380      	adds	r3, #128	; 0x80
 8004bd8:	4619      	mov	r1, r3
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	089b      	lsrs	r3, r3, #2
 8004be2:	f7fc ffe8 	bl	8001bb6 <HAL_DMA_Start_IT>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d017      	beq.n	8004c1c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a35      	ldr	r2, [pc, #212]	; (8004cd8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e055      	b.n	8004cc8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0208 	orr.w	r2, r2, #8
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	025b      	lsls	r3, r3, #9
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	025b      	lsls	r3, r3, #9
 8004c44:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004c46:	2390      	movs	r3, #144	; 0x90
 8004c48:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004c52:	2301      	movs	r3, #1
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f107 0210 	add.w	r2, r7, #16
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f002 fd3f 	bl	80076e4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d90a      	bls.n	8004c82 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2282      	movs	r2, #130	; 0x82
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f002 fda3 	bl	80077c4 <SDMMC_CmdReadMultiBlock>
 8004c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c80:	e009      	b.n	8004c96 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2281      	movs	r2, #129	; 0x81
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f002 fd76 	bl	8007780 <SDMMC_CmdReadSingleBlock>
 8004c94:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d012      	beq.n	8004cc2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e002      	b.n	8004cc8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3730      	adds	r7, #48	; 0x30
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	080053fb 	.word	0x080053fb
 8004cd4:	0800546d 	.word	0x0800546d
 8004cd8:	004005ff 	.word	0x004005ff

08004cdc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	; 0x30
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d107      	bne.n	8004d04 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0c6      	b.n	8004e92 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 80bf 	bne.w	8004e90 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	441a      	add	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d907      	bls.n	8004d36 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0ad      	b.n	8004e92 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 021a 	orr.w	r2, r2, #26
 8004d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	4a50      	ldr	r2, [pc, #320]	; (8004e9c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	4a4f      	ldr	r2, [pc, #316]	; (8004ea0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d002      	beq.n	8004d7c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	025b      	lsls	r3, r3, #9
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d90a      	bls.n	8004d98 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	22a0      	movs	r2, #160	; 0xa0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 fd5c 	bl	800784c <SDMMC_CmdWriteMultiBlock>
 8004d94:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d96:	e009      	b.n	8004dac <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2290      	movs	r2, #144	; 0x90
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 fd2f 	bl	8007808 <SDMMC_CmdWriteSingleBlock>
 8004daa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d012      	beq.n	8004dd8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3b      	ldr	r2, [pc, #236]	; (8004ea4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e05c      	b.n	8004e92 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0208 	orr.w	r2, r2, #8
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	2240      	movs	r2, #64	; 0x40
 8004dee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3380      	adds	r3, #128	; 0x80
 8004e18:	461a      	mov	r2, r3
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	025b      	lsls	r3, r3, #9
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	f7fc fec9 	bl	8001bb6 <HAL_DMA_Start_IT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01a      	beq.n	8004e60 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 021a 	bic.w	r2, r2, #26
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e018      	b.n	8004e92 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295
 8004e64:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	025b      	lsls	r3, r3, #9
 8004e6a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004e6c:	2390      	movs	r3, #144	; 0x90
 8004e6e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f107 0210 	add.w	r2, r7, #16
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f002 fc2c 	bl	80076e4 <SDMMC_ConfigData>

      return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3730      	adds	r7, #48	; 0x30
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	080053d1 	.word	0x080053d1
 8004ea0:	0800546d 	.word	0x0800546d
 8004ea4:	004005ff 	.word	0x004005ff

08004ea8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eca:	0f9b      	lsrs	r3, r3, #30
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	0e9b      	lsrs	r3, r3, #26
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee8:	0e1b      	lsrs	r3, r3, #24
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1c:	0d1b      	lsrs	r3, r3, #20
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f3a:	0bdb      	lsrs	r3, r3, #15
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4c:	0b9b      	lsrs	r3, r3, #14
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5e:	0b5b      	lsrs	r3, r3, #13
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f70:	0b1b      	lsrs	r3, r3, #12
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2200      	movs	r2, #0
 8004f82:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d163      	bne.n	8005054 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f90:	009a      	lsls	r2, r3, #2
 8004f92:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f96:	4013      	ands	r3, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f9c:	0f92      	lsrs	r2, r2, #30
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa8:	0edb      	lsrs	r3, r3, #27
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fba:	0e1b      	lsrs	r3, r3, #24
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fcc:	0d5b      	lsrs	r3, r3, #21
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fde:	0c9b      	lsrs	r3, r3, #18
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff0:	0bdb      	lsrs	r3, r3, #15
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	7e1b      	ldrb	r3, [r3, #24]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	3302      	adds	r3, #2
 8005014:	2201      	movs	r2, #1
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800501e:	fb03 f202 	mul.w	r2, r3, r2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	7a1b      	ldrb	r3, [r3, #8]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2201      	movs	r2, #1
 8005032:	409a      	lsls	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005040:	0a52      	lsrs	r2, r2, #9
 8005042:	fb03 f202 	mul.w	r2, r3, r2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005050:	661a      	str	r2, [r3, #96]	; 0x60
 8005052:	e031      	b.n	80050b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	2b01      	cmp	r3, #1
 800505a:	d11d      	bne.n	8005098 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	431a      	orrs	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	3301      	adds	r3, #1
 8005078:	029a      	lsls	r2, r3, #10
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800508c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
 8005096:	e00f      	b.n	80050b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a58      	ldr	r2, [pc, #352]	; (8005200 <HAL_SD_GetCardCSD+0x344>)
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e09d      	b.n	80051f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050bc:	0b9b      	lsrs	r3, r3, #14
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ce:	09db      	lsrs	r3, r3, #7
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	0fdb      	lsrs	r3, r3, #31
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	0f5b      	lsrs	r3, r3, #29
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	b2da      	uxtb	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	0e9b      	lsrs	r3, r3, #26
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	b2da      	uxtb	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	0d9b      	lsrs	r3, r3, #22
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	b2da      	uxtb	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	0d5b      	lsrs	r3, r3, #21
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	0bdb      	lsrs	r3, r3, #15
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	b2da      	uxtb	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	0b9b      	lsrs	r3, r3, #14
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	b2da      	uxtb	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	0b5b      	lsrs	r3, r3, #13
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	0b1b      	lsrs	r3, r3, #12
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	0a9b      	lsrs	r3, r3, #10
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	004005ff 	.word	0x004005ff

08005204 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af04      	add	r7, sp, #16
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2203      	movs	r2, #3
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	2b03      	cmp	r3, #3
 800527a:	d02e      	beq.n	80052da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005282:	d106      	bne.n	8005292 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
 8005290:	e029      	b.n	80052e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005298:	d10a      	bne.n	80052b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fabc 	bl	8005818 <SD_WideBus_Enable>
 80052a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
 80052ae:	e01a      	b.n	80052e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 faf9 	bl	80058ae <SD_WideBus_Disable>
 80052bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
 80052ca:	e00c      	b.n	80052e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
 80052d8:	e005      	b.n	80052e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a26      	ldr	r2, [pc, #152]	; (800538c <HAL_SD_ConfigWideBusOperation+0x130>)
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005304:	e01f      	b.n	8005346 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681d      	ldr	r5, [r3, #0]
 800532c:	466c      	mov	r4, sp
 800532e:	f107 0314 	add.w	r3, r7, #20
 8005332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800533a:	f107 0308 	add.w	r3, r7, #8
 800533e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005340:	4628      	mov	r0, r5
 8005342:	f002 f92f 	bl	80075a4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800534e:	4618      	mov	r0, r3
 8005350:	f002 f9f4 	bl	800773c <SDMMC_CmdBlockLength>
 8005354:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00c      	beq.n	8005376 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0a      	ldr	r2, [pc, #40]	; (800538c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800537e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005382:	4618      	mov	r0, r3
 8005384:	3728      	adds	r7, #40	; 0x28
 8005386:	46bd      	mov	sp, r7
 8005388:	bdb0      	pop	{r4, r5, r7, pc}
 800538a:	bf00      	nop
 800538c:	004005ff 	.word	0x004005ff

08005390 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa10 	bl	80057c8 <SD_SendStatus>
 80053a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	0a5b      	lsrs	r3, r3, #9
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80053c6:	693b      	ldr	r3, [r7, #16]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	2b82      	cmp	r3, #130	; 0x82
 800540e:	d111      	bne.n	8005434 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f002 fa3b 	bl	8007890 <SDMMC_CmdStopTransfer>
 800541a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fd3a 	bl	8004ea8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0208 	bic.w	r2, r2, #8
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f240 523a 	movw	r2, #1338	; 0x53a
 800544c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f004 fa25 	bl	80098ac <HAL_SD_RxCpltCallback>
#endif
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fc fbfb 	bl	8001c76 <HAL_DMA_GetError>
 8005480:	4603      	mov	r3, r0
 8005482:	2b02      	cmp	r3, #2
 8005484:	d03e      	beq.n	8005504 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d002      	beq.n	80054a2 <SD_DMAError+0x36>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d12d      	bne.n	80054fe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a19      	ldr	r2, [pc, #100]	; (800550c <SD_DMAError+0xa0>)
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80054b8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	f7ff ff62 	bl	8005390 <HAL_SD_GetCardState>
 80054cc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	d002      	beq.n	80054da <SD_DMAError+0x6e>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d10a      	bne.n	80054f0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 f9d6 	bl	8007890 <SDMMC_CmdStopTransfer>
 80054e4:	4602      	mov	r2, r0
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	431a      	orrs	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	f7ff fcd2 	bl	8004ea8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005504:	bf00      	nop
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	004005ff 	.word	0x004005ff

08005510 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005510:	b5b0      	push	{r4, r5, r7, lr}
 8005512:	b094      	sub	sp, #80	; 0x50
 8005514:	af04      	add	r7, sp, #16
 8005516:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005518:	2301      	movs	r3, #1
 800551a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f002 f886 	bl	8007632 <SDMMC_GetPowerState>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800552c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005530:	e0b8      	b.n	80056a4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005536:	2b03      	cmp	r3, #3
 8005538:	d02f      	beq.n	800559a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f002 fab1 	bl	8007aa6 <SDMMC_CmdSendCID>
 8005544:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <SD_InitCard+0x40>
    {
      return errorstate;
 800554c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554e:	e0a9      	b.n	80056a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f002 f8b1 	bl	80076be <SDMMC_GetResponse>
 800555c:	4602      	mov	r2, r0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2104      	movs	r1, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f002 f8a8 	bl	80076be <SDMMC_GetResponse>
 800556e:	4602      	mov	r2, r0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2108      	movs	r1, #8
 800557a:	4618      	mov	r0, r3
 800557c:	f002 f89f 	bl	80076be <SDMMC_GetResponse>
 8005580:	4602      	mov	r2, r0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	210c      	movs	r1, #12
 800558c:	4618      	mov	r0, r3
 800558e:	f002 f896 	bl	80076be <SDMMC_GetResponse>
 8005592:	4602      	mov	r2, r0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d00d      	beq.n	80055be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f107 020e 	add.w	r2, r7, #14
 80055aa:	4611      	mov	r1, r2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f002 fab7 	bl	8007b20 <SDMMC_CmdSetRelAdd>
 80055b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <SD_InitCard+0xae>
    {
      return errorstate;
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	e072      	b.n	80056a4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d036      	beq.n	8005634 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80055c6:	89fb      	ldrh	r3, [r7, #14]
 80055c8:	461a      	mov	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f002 fa81 	bl	8007ae2 <SDMMC_CmdSendCSD>
 80055e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80055e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ea:	e05b      	b.n	80056a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f002 f863 	bl	80076be <SDMMC_GetResponse>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2104      	movs	r1, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f002 f85a 	bl	80076be <SDMMC_GetResponse>
 800560a:	4602      	mov	r2, r0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2108      	movs	r1, #8
 8005616:	4618      	mov	r0, r3
 8005618:	f002 f851 	bl	80076be <SDMMC_GetResponse>
 800561c:	4602      	mov	r2, r0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	210c      	movs	r1, #12
 8005628:	4618      	mov	r0, r3
 800562a:	f002 f848 	bl	80076be <SDMMC_GetResponse>
 800562e:	4602      	mov	r2, r0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2104      	movs	r1, #4
 800563a:	4618      	mov	r0, r3
 800563c:	f002 f83f 	bl	80076be <SDMMC_GetResponse>
 8005640:	4603      	mov	r3, r0
 8005642:	0d1a      	lsrs	r2, r3, #20
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005648:	f107 0310 	add.w	r3, r7, #16
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fc34 	bl	8004ebc <HAL_SD_GetCardCSD>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800565a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800565e:	e021      	b.n	80056a4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	2200      	movs	r2, #0
 800566c:	461c      	mov	r4, r3
 800566e:	4615      	mov	r5, r2
 8005670:	4622      	mov	r2, r4
 8005672:	462b      	mov	r3, r5
 8005674:	4608      	mov	r0, r1
 8005676:	f002 f92d 	bl	80078d4 <SDMMC_CmdSelDesel>
 800567a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <SD_InitCard+0x176>
  {
    return errorstate;
 8005682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005684:	e00e      	b.n	80056a4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681d      	ldr	r5, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	466c      	mov	r4, sp
 800568e:	f103 0210 	add.w	r2, r3, #16
 8005692:	ca07      	ldmia	r2, {r0, r1, r2}
 8005694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005698:	3304      	adds	r3, #4
 800569a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800569c:	4628      	mov	r0, r5
 800569e:	f001 ff81 	bl	80075a4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3740      	adds	r7, #64	; 0x40
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bdb0      	pop	{r4, r5, r7, pc}

080056ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f002 f928 	bl	800791a <SDMMC_CmdGoIdleState>
 80056ca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	e072      	b.n	80057bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f002 f93b 	bl	8007956 <SDMMC_CmdOperCond>
 80056e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00d      	beq.n	8005704 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f002 f911 	bl	800791a <SDMMC_CmdGoIdleState>
 80056f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	e05b      	b.n	80057bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	2b01      	cmp	r3, #1
 8005710:	d137      	bne.n	8005782 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f002 f93b 	bl	8007994 <SDMMC_CmdAppCommand>
 800571e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d02d      	beq.n	8005782 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005726:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800572a:	e047      	b.n	80057bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f002 f92e 	bl	8007994 <SDMMC_CmdAppCommand>
 8005738:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SD_PowerON+0x98>
    {
      return errorstate;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	e03b      	b.n	80057bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	491e      	ldr	r1, [pc, #120]	; (80057c4 <SD_PowerON+0x118>)
 800574a:	4618      	mov	r0, r3
 800574c:	f002 f944 	bl	80079d8 <SDMMC_CmdAppOperCommand>
 8005750:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800575c:	e02e      	b.n	80057bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f001 ffaa 	bl	80076be <SDMMC_GetResponse>
 800576a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	0fdb      	lsrs	r3, r3, #31
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <SD_PowerON+0xcc>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <SD_PowerON+0xce>
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]

    count++;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	3301      	adds	r3, #1
 8005780:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005788:	4293      	cmp	r3, r2
 800578a:	d802      	bhi.n	8005792 <SD_PowerON+0xe6>
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0cc      	beq.n	800572c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005798:	4293      	cmp	r3, r2
 800579a:	d902      	bls.n	80057a2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800579c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a0:	e00c      	b.n	80057bc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
 80057b2:	e002      	b.n	80057ba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	c1100000 	.word	0xc1100000

080057c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80057d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057dc:	e018      	b.n	8005810 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f002 f9b9 	bl	8007b62 <SDMMC_CmdSendStatus>
 80057f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <SD_SendStatus+0x34>
  {
    return errorstate;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	e009      	b.n	8005810 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f001 ff5b 	bl	80076be <SDMMC_GetResponse>
 8005808:	4602      	mov	r2, r0
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f001 ff45 	bl	80076be <SDMMC_GetResponse>
 8005834:	4603      	mov	r3, r0
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800583e:	d102      	bne.n	8005846 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005844:	e02f      	b.n	80058a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005846:	f107 030c 	add.w	r3, r7, #12
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f879 	bl	8005944 <SD_FindSCR>
 8005852:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	e023      	b.n	80058a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01c      	beq.n	80058a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f002 f88d 	bl	8007994 <SDMMC_CmdAppCommand>
 800587a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	e00f      	b.n	80058a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2102      	movs	r1, #2
 800588c:	4618      	mov	r0, r3
 800588e:	f002 f8c7 	bl	8007a20 <SDMMC_CmdBusWidth>
 8005892:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	e003      	b.n	80058a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800589e:	2300      	movs	r3, #0
 80058a0:	e001      	b.n	80058a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2100      	movs	r1, #0
 80058c4:	4618      	mov	r0, r3
 80058c6:	f001 fefa 	bl	80076be <SDMMC_GetResponse>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d4:	d102      	bne.n	80058dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80058d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058da:	e02f      	b.n	800593c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80058dc:	f107 030c 	add.w	r3, r7, #12
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f82e 	bl	8005944 <SD_FindSCR>
 80058e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	e023      	b.n	800593c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01c      	beq.n	8005938 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f002 f842 	bl	8007994 <SDMMC_CmdAppCommand>
 8005910:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	e00f      	b.n	800593c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f002 f87c 	bl	8007a20 <SDMMC_CmdBusWidth>
 8005928:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	e003      	b.n	800593c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005934:	2300      	movs	r3, #0
 8005936:	e001      	b.n	800593c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005938:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005944:	b590      	push	{r4, r7, lr}
 8005946:	b08f      	sub	sp, #60	; 0x3c
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800594e:	f7fb fff1 	bl	8001934 <HAL_GetTick>
 8005952:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2108      	movs	r1, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f001 fee6 	bl	800773c <SDMMC_CmdBlockLength>
 8005970:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	e0b2      	b.n	8005ae2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005984:	041b      	lsls	r3, r3, #16
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f002 f803 	bl	8007994 <SDMMC_CmdAppCommand>
 800598e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	e0a3      	b.n	8005ae2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295
 800599e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80059a0:	2308      	movs	r3, #8
 80059a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80059a4:	2330      	movs	r3, #48	; 0x30
 80059a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80059a8:	2302      	movs	r3, #2
 80059aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f107 0210 	add.w	r2, r7, #16
 80059bc:	4611      	mov	r1, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fe90 	bl	80076e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f002 f84b 	bl	8007a64 <SDMMC_CmdSendSCR>
 80059ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02a      	beq.n	8005a2c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	e083      	b.n	8005ae2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	f107 0208 	add.w	r2, r7, #8
 80059f4:	18d4      	adds	r4, r2, r3
 80059f6:	4608      	mov	r0, r1
 80059f8:	f001 fe00 	bl	80075fc <SDMMC_ReadFIFO>
 80059fc:	4603      	mov	r3, r0
 80059fe:	6023      	str	r3, [r4, #0]
      index++;
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	3301      	adds	r3, #1
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
 8005a06:	e006      	b.n	8005a16 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a16:	f7fb ff8d 	bl	8001934 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d102      	bne.n	8005a2c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a2a:	e05a      	b.n	8005ae2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0cf      	beq.n	80059da <SD_FindSCR+0x96>
 8005a3a:	e000      	b.n	8005a3e <SD_FindSCR+0xfa>
      break;
 8005a3c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2208      	movs	r2, #8
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005a54:	2308      	movs	r3, #8
 8005a56:	e044      	b.n	8005ae2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e037      	b.n	8005ae2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2220      	movs	r2, #32
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005a88:	2320      	movs	r3, #32
 8005a8a:	e02a      	b.n	8005ae2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	061a      	lsls	r2, r3, #24
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aa2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005aac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	0e1b      	lsrs	r3, r3, #24
 8005ab2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	601a      	str	r2, [r3, #0]
    scr++;
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	3304      	adds	r3, #4
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	061a      	lsls	r2, r3, #24
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ad4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	0e1b      	lsrs	r3, r3, #24
 8005ada:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	373c      	adds	r7, #60	; 0x3c
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}

08005aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e049      	b.n	8005b90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fb fb9d 	bl	8001250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f000 fb25 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e049      	b.n	8005c3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb fb02 	bl	80011c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f000 face 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e08f      	b.n	8005d7c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fb fa65 	bl	8001140 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6899      	ldr	r1, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <HAL_TIM_Encoder_Init+0x13c>)
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 fa6d 	bl	8006178 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <HAL_TIM_Encoder_Init+0x140>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <HAL_TIM_Encoder_Init+0x144>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <HAL_TIM_Encoder_Init+0x148>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	031b      	lsls	r3, r3, #12
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	fffebff8 	.word	0xfffebff8
 8005d88:	fffffcfc 	.word	0xfffffcfc
 8005d8c:	fffff3f3 	.word	0xfffff3f3
 8005d90:	ffff0f0f 	.word	0xffff0f0f

08005d94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e088      	b.n	8005ec4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6819      	ldr	r1, [r3, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f000 fd64 	bl	800689c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 020c 	bic.w	r2, r2, #12
 8005de2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6999      	ldr	r1, [r3, #24]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	619a      	str	r2, [r3, #24]
 8005df6:	e060      	b.n	8005eba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d11c      	bne.n	8005e38 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f000 fde8 	bl	80069e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6999      	ldr	r1, [r3, #24]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	021a      	lsls	r2, r3, #8
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	619a      	str	r2, [r3, #24]
 8005e36:	e040      	b.n	8005eba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d11b      	bne.n	8005e76 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6819      	ldr	r1, [r3, #0]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f000 fe35 	bl	8006abc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 020c 	bic.w	r2, r2, #12
 8005e60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	61da      	str	r2, [r3, #28]
 8005e74:	e021      	b.n	8005eba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	d11c      	bne.n	8005eb6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f000 fe52 	bl	8006b34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69d9      	ldr	r1, [r3, #28]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	021a      	lsls	r2, r3, #8
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]
 8005eb4:	e001      	b.n	8005eba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e0ff      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b14      	cmp	r3, #20
 8005ef6:	f200 80f0 	bhi.w	80060da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	080060db 	.word	0x080060db
 8005f08:	080060db 	.word	0x080060db
 8005f0c:	080060db 	.word	0x080060db
 8005f10:	08005f95 	.word	0x08005f95
 8005f14:	080060db 	.word	0x080060db
 8005f18:	080060db 	.word	0x080060db
 8005f1c:	080060db 	.word	0x080060db
 8005f20:	08005fd7 	.word	0x08005fd7
 8005f24:	080060db 	.word	0x080060db
 8005f28:	080060db 	.word	0x080060db
 8005f2c:	080060db 	.word	0x080060db
 8005f30:	08006017 	.word	0x08006017
 8005f34:	080060db 	.word	0x080060db
 8005f38:	080060db 	.word	0x080060db
 8005f3c:	080060db 	.word	0x080060db
 8005f40:	08006059 	.word	0x08006059
 8005f44:	080060db 	.word	0x080060db
 8005f48:	080060db 	.word	0x080060db
 8005f4c:	080060db 	.word	0x080060db
 8005f50:	08006099 	.word	0x08006099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f9ac 	bl	80062b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0208 	orr.w	r2, r2, #8
 8005f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0204 	bic.w	r2, r2, #4
 8005f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6999      	ldr	r1, [r3, #24]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	619a      	str	r2, [r3, #24]
      break;
 8005f92:	e0a5      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f9fe 	bl	800639c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6999      	ldr	r1, [r3, #24]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	021a      	lsls	r2, r3, #8
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	619a      	str	r2, [r3, #24]
      break;
 8005fd4:	e084      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fa55 	bl	800648c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0208 	orr.w	r2, r2, #8
 8005ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0204 	bic.w	r2, r2, #4
 8006000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69d9      	ldr	r1, [r3, #28]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	61da      	str	r2, [r3, #28]
      break;
 8006014:	e064      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 faab 	bl	8006578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69d9      	ldr	r1, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	021a      	lsls	r2, r3, #8
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	61da      	str	r2, [r3, #28]
      break;
 8006056:	e043      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fae2 	bl	8006628 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0208 	orr.w	r2, r2, #8
 8006072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0204 	bic.w	r2, r2, #4
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006096:	e023      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fb14 	bl	80066cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060d8:	e002      	b.n	80060e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
      break;
 80060de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop

080060f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e031      	b.n	8006170 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fb28 	bl	8006774 <TIM_SlaveTimer_SetConfig>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e018      	b.n	8006170 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800615c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a40      	ldr	r2, [pc, #256]	; (800628c <TIM_Base_SetConfig+0x114>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006196:	d00f      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3d      	ldr	r2, [pc, #244]	; (8006290 <TIM_Base_SetConfig+0x118>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a3c      	ldr	r2, [pc, #240]	; (8006294 <TIM_Base_SetConfig+0x11c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a3b      	ldr	r2, [pc, #236]	; (8006298 <TIM_Base_SetConfig+0x120>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a3a      	ldr	r2, [pc, #232]	; (800629c <TIM_Base_SetConfig+0x124>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2f      	ldr	r2, [pc, #188]	; (800628c <TIM_Base_SetConfig+0x114>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d027      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2c      	ldr	r2, [pc, #176]	; (8006290 <TIM_Base_SetConfig+0x118>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d023      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <TIM_Base_SetConfig+0x11c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <TIM_Base_SetConfig+0x120>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a29      	ldr	r2, [pc, #164]	; (800629c <TIM_Base_SetConfig+0x124>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d017      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a28      	ldr	r2, [pc, #160]	; (80062a0 <TIM_Base_SetConfig+0x128>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <TIM_Base_SetConfig+0x12c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <TIM_Base_SetConfig+0x130>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a25      	ldr	r2, [pc, #148]	; (80062ac <TIM_Base_SetConfig+0x134>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a24      	ldr	r2, [pc, #144]	; (80062b0 <TIM_Base_SetConfig+0x138>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a23      	ldr	r2, [pc, #140]	; (80062b4 <TIM_Base_SetConfig+0x13c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a0a      	ldr	r2, [pc, #40]	; (800628c <TIM_Base_SetConfig+0x114>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0xf8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a0c      	ldr	r2, [pc, #48]	; (800629c <TIM_Base_SetConfig+0x124>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d103      	bne.n	8006278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	615a      	str	r2, [r3, #20]
}
 800627e:	bf00      	nop
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40010000 	.word	0x40010000
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40010400 	.word	0x40010400
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800
 80062ac:	40001800 	.word	0x40001800
 80062b0:	40001c00 	.word	0x40001c00
 80062b4:	40002000 	.word	0x40002000

080062b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f023 0201 	bic.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <TIM_OC1_SetConfig+0xd8>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f023 0302 	bic.w	r3, r3, #2
 8006300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a21      	ldr	r2, [pc, #132]	; (8006394 <TIM_OC1_SetConfig+0xdc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC1_SetConfig+0x64>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a20      	ldr	r2, [pc, #128]	; (8006398 <TIM_OC1_SetConfig+0xe0>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d10c      	bne.n	8006336 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f023 0308 	bic.w	r3, r3, #8
 8006322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 0304 	bic.w	r3, r3, #4
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a16      	ldr	r2, [pc, #88]	; (8006394 <TIM_OC1_SetConfig+0xdc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC1_SetConfig+0x8e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <TIM_OC1_SetConfig+0xe0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d111      	bne.n	800636a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	fffeff8f 	.word	0xfffeff8f
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400

0800639c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f023 0210 	bic.w	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <TIM_OC2_SetConfig+0xe4>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0320 	bic.w	r3, r3, #32
 80063e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a23      	ldr	r2, [pc, #140]	; (8006484 <TIM_OC2_SetConfig+0xe8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_OC2_SetConfig+0x68>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a22      	ldr	r2, [pc, #136]	; (8006488 <TIM_OC2_SetConfig+0xec>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10d      	bne.n	8006420 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a18      	ldr	r2, [pc, #96]	; (8006484 <TIM_OC2_SetConfig+0xe8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC2_SetConfig+0x94>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <TIM_OC2_SetConfig+0xec>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d113      	bne.n	8006458 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800643e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	feff8fff 	.word	0xfeff8fff
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400

0800648c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4b2d      	ldr	r3, [pc, #180]	; (800656c <TIM_OC3_SetConfig+0xe0>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	021b      	lsls	r3, r3, #8
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a22      	ldr	r2, [pc, #136]	; (8006570 <TIM_OC3_SetConfig+0xe4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_OC3_SetConfig+0x66>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a21      	ldr	r2, [pc, #132]	; (8006574 <TIM_OC3_SetConfig+0xe8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10d      	bne.n	800650e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800650c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a17      	ldr	r2, [pc, #92]	; (8006570 <TIM_OC3_SetConfig+0xe4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_OC3_SetConfig+0x92>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a16      	ldr	r2, [pc, #88]	; (8006574 <TIM_OC3_SetConfig+0xe8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d113      	bne.n	8006546 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800652c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	621a      	str	r2, [r3, #32]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	fffeff8f 	.word	0xfffeff8f
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400

08006578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <TIM_OC4_SetConfig+0xa4>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	031b      	lsls	r3, r3, #12
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <TIM_OC4_SetConfig+0xa8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_OC4_SetConfig+0x68>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a12      	ldr	r2, [pc, #72]	; (8006624 <TIM_OC4_SetConfig+0xac>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d109      	bne.n	80065f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	feff8fff 	.word	0xfeff8fff
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400

08006628 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <TIM_OC5_SetConfig+0x98>)
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006668:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <TIM_OC5_SetConfig+0x9c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC5_SetConfig+0x5e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a11      	ldr	r2, [pc, #68]	; (80066c8 <TIM_OC5_SetConfig+0xa0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d109      	bne.n	800669a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	fffeff8f 	.word	0xfffeff8f
 80066c4:	40010000 	.word	0x40010000
 80066c8:	40010400 	.word	0x40010400

080066cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <TIM_OC6_SetConfig+0x9c>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800670e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	051b      	lsls	r3, r3, #20
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a13      	ldr	r2, [pc, #76]	; (800676c <TIM_OC6_SetConfig+0xa0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d003      	beq.n	800672c <TIM_OC6_SetConfig+0x60>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a12      	ldr	r2, [pc, #72]	; (8006770 <TIM_OC6_SetConfig+0xa4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d109      	bne.n	8006740 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	029b      	lsls	r3, r3, #10
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	feff8fff 	.word	0xfeff8fff
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400

08006774 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4b3e      	ldr	r3, [pc, #248]	; (8006898 <TIM_SlaveTimer_SetConfig+0x124>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b70      	cmp	r3, #112	; 0x70
 80067bc:	d01a      	beq.n	80067f4 <TIM_SlaveTimer_SetConfig+0x80>
 80067be:	2b70      	cmp	r3, #112	; 0x70
 80067c0:	d860      	bhi.n	8006884 <TIM_SlaveTimer_SetConfig+0x110>
 80067c2:	2b60      	cmp	r3, #96	; 0x60
 80067c4:	d054      	beq.n	8006870 <TIM_SlaveTimer_SetConfig+0xfc>
 80067c6:	2b60      	cmp	r3, #96	; 0x60
 80067c8:	d85c      	bhi.n	8006884 <TIM_SlaveTimer_SetConfig+0x110>
 80067ca:	2b50      	cmp	r3, #80	; 0x50
 80067cc:	d046      	beq.n	800685c <TIM_SlaveTimer_SetConfig+0xe8>
 80067ce:	2b50      	cmp	r3, #80	; 0x50
 80067d0:	d858      	bhi.n	8006884 <TIM_SlaveTimer_SetConfig+0x110>
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d019      	beq.n	800680a <TIM_SlaveTimer_SetConfig+0x96>
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d854      	bhi.n	8006884 <TIM_SlaveTimer_SetConfig+0x110>
 80067da:	2b30      	cmp	r3, #48	; 0x30
 80067dc:	d055      	beq.n	800688a <TIM_SlaveTimer_SetConfig+0x116>
 80067de:	2b30      	cmp	r3, #48	; 0x30
 80067e0:	d850      	bhi.n	8006884 <TIM_SlaveTimer_SetConfig+0x110>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d051      	beq.n	800688a <TIM_SlaveTimer_SetConfig+0x116>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d84c      	bhi.n	8006884 <TIM_SlaveTimer_SetConfig+0x110>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d04d      	beq.n	800688a <TIM_SlaveTimer_SetConfig+0x116>
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d04b      	beq.n	800688a <TIM_SlaveTimer_SetConfig+0x116>
 80067f2:	e047      	b.n	8006884 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68d9      	ldr	r1, [r3, #12]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f000 f9d3 	bl	8006bae <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006808:	e040      	b.n	800688c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b05      	cmp	r3, #5
 8006810:	d101      	bne.n	8006816 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e03b      	b.n	800688e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6a1a      	ldr	r2, [r3, #32]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0201 	bic.w	r2, r2, #1
 800682c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800683c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	4313      	orrs	r3, r2
 8006848:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
      break;
 800685a:	e017      	b.n	800688c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6899      	ldr	r1, [r3, #8]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	461a      	mov	r2, r3
 800686a:	f000 f88b 	bl	8006984 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800686e:	e00d      	b.n	800688c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	6899      	ldr	r1, [r3, #8]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	461a      	mov	r2, r3
 800687e:	f000 f8ed 	bl	8006a5c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006882:	e003      	b.n	800688c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
      break;
 8006888:	e000      	b.n	800688c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800688a:	bf00      	nop
  }

  return status;
 800688c:	7dfb      	ldrb	r3, [r7, #23]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	fffefff8 	.word	0xfffefff8

0800689c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0201 	bic.w	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a28      	ldr	r2, [pc, #160]	; (8006968 <TIM_TI1_SetConfig+0xcc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01b      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d0:	d017      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a25      	ldr	r2, [pc, #148]	; (800696c <TIM_TI1_SetConfig+0xd0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a24      	ldr	r2, [pc, #144]	; (8006970 <TIM_TI1_SetConfig+0xd4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a23      	ldr	r2, [pc, #140]	; (8006974 <TIM_TI1_SetConfig+0xd8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a22      	ldr	r2, [pc, #136]	; (8006978 <TIM_TI1_SetConfig+0xdc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a21      	ldr	r2, [pc, #132]	; (800697c <TIM_TI1_SetConfig+0xe0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a20      	ldr	r2, [pc, #128]	; (8006980 <TIM_TI1_SetConfig+0xe4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d101      	bne.n	8006906 <TIM_TI1_SetConfig+0x6a>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <TIM_TI1_SetConfig+0x6c>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e003      	b.n	8006926 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800692c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	b2db      	uxtb	r3, r3
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f023 030a 	bic.w	r3, r3, #10
 8006940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f003 030a 	and.w	r3, r3, #10
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40010400 	.word	0x40010400
 800697c:	40014000 	.word	0x40014000
 8006980:	40001800 	.word	0x40001800

08006984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f023 030a 	bic.w	r3, r3, #10
 80069c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b087      	sub	sp, #28
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
 80069ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	f023 0210 	bic.w	r2, r3, #16
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	031b      	lsls	r3, r3, #12
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	621a      	str	r2, [r3, #32]
}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	031b      	lsls	r3, r3, #12
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f023 0303 	bic.w	r3, r3, #3
 8006ae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	621a      	str	r2, [r3, #32]
}
 8006b28:	bf00      	nop
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	031b      	lsls	r3, r3, #12
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	031b      	lsls	r3, r3, #12
 8006b8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	021a      	lsls	r2, r3, #8
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	609a      	str	r2, [r3, #8]
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e06d      	b.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a30      	ldr	r2, [pc, #192]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2f      	ldr	r2, [pc, #188]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d108      	bne.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7a:	d01d      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1a      	ldr	r2, [pc, #104]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40000400 	.word	0x40000400
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40000c00 	.word	0x40000c00
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40001800 	.word	0x40001800

08006d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e040      	b.n	8006da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fa fae6 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2224      	movs	r2, #36	; 0x24
 8006d38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0201 	bic.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f82c 	bl	8006da8 <UART_SetConfig>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e022      	b.n	8006da0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa84 	bl	8007270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fb0b 	bl	80073b4 <UART_CheckIdleState>
 8006d9e:	4603      	mov	r3, r0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4ba6      	ldr	r3, [pc, #664]	; (800706c <UART_SetConfig+0x2c4>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	6979      	ldr	r1, [r7, #20]
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a94      	ldr	r2, [pc, #592]	; (8007070 <UART_SetConfig+0x2c8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d120      	bne.n	8006e66 <UART_SetConfig+0xbe>
 8006e24:	4b93      	ldr	r3, [pc, #588]	; (8007074 <UART_SetConfig+0x2cc>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d816      	bhi.n	8006e60 <UART_SetConfig+0xb8>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0x90>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e49 	.word	0x08006e49
 8006e3c:	08006e55 	.word	0x08006e55
 8006e40:	08006e4f 	.word	0x08006e4f
 8006e44:	08006e5b 	.word	0x08006e5b
 8006e48:	2301      	movs	r3, #1
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e150      	b.n	80070f0 <UART_SetConfig+0x348>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e14d      	b.n	80070f0 <UART_SetConfig+0x348>
 8006e54:	2304      	movs	r3, #4
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	e14a      	b.n	80070f0 <UART_SetConfig+0x348>
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	77fb      	strb	r3, [r7, #31]
 8006e5e:	e147      	b.n	80070f0 <UART_SetConfig+0x348>
 8006e60:	2310      	movs	r3, #16
 8006e62:	77fb      	strb	r3, [r7, #31]
 8006e64:	e144      	b.n	80070f0 <UART_SetConfig+0x348>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a83      	ldr	r2, [pc, #524]	; (8007078 <UART_SetConfig+0x2d0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d132      	bne.n	8006ed6 <UART_SetConfig+0x12e>
 8006e70:	4b80      	ldr	r3, [pc, #512]	; (8007074 <UART_SetConfig+0x2cc>)
 8006e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b0c      	cmp	r3, #12
 8006e7c:	d828      	bhi.n	8006ed0 <UART_SetConfig+0x128>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0xdc>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006ed1 	.word	0x08006ed1
 8006e8c:	08006ed1 	.word	0x08006ed1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ec5 	.word	0x08006ec5
 8006e98:	08006ed1 	.word	0x08006ed1
 8006e9c:	08006ed1 	.word	0x08006ed1
 8006ea0:	08006ed1 	.word	0x08006ed1
 8006ea4:	08006ebf 	.word	0x08006ebf
 8006ea8:	08006ed1 	.word	0x08006ed1
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed1 	.word	0x08006ed1
 8006eb4:	08006ecb 	.word	0x08006ecb
 8006eb8:	2300      	movs	r3, #0
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e118      	b.n	80070f0 <UART_SetConfig+0x348>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e115      	b.n	80070f0 <UART_SetConfig+0x348>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e112      	b.n	80070f0 <UART_SetConfig+0x348>
 8006eca:	2308      	movs	r3, #8
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e10f      	b.n	80070f0 <UART_SetConfig+0x348>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e10c      	b.n	80070f0 <UART_SetConfig+0x348>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a68      	ldr	r2, [pc, #416]	; (800707c <UART_SetConfig+0x2d4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d120      	bne.n	8006f22 <UART_SetConfig+0x17a>
 8006ee0:	4b64      	ldr	r3, [pc, #400]	; (8007074 <UART_SetConfig+0x2cc>)
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006eea:	2b30      	cmp	r3, #48	; 0x30
 8006eec:	d013      	beq.n	8006f16 <UART_SetConfig+0x16e>
 8006eee:	2b30      	cmp	r3, #48	; 0x30
 8006ef0:	d814      	bhi.n	8006f1c <UART_SetConfig+0x174>
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d009      	beq.n	8006f0a <UART_SetConfig+0x162>
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d810      	bhi.n	8006f1c <UART_SetConfig+0x174>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <UART_SetConfig+0x15c>
 8006efe:	2b10      	cmp	r3, #16
 8006f00:	d006      	beq.n	8006f10 <UART_SetConfig+0x168>
 8006f02:	e00b      	b.n	8006f1c <UART_SetConfig+0x174>
 8006f04:	2300      	movs	r3, #0
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e0f2      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e0ef      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f10:	2304      	movs	r3, #4
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e0ec      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f16:	2308      	movs	r3, #8
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e0e9      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e0e6      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a56      	ldr	r2, [pc, #344]	; (8007080 <UART_SetConfig+0x2d8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d120      	bne.n	8006f6e <UART_SetConfig+0x1c6>
 8006f2c:	4b51      	ldr	r3, [pc, #324]	; (8007074 <UART_SetConfig+0x2cc>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f36:	2bc0      	cmp	r3, #192	; 0xc0
 8006f38:	d013      	beq.n	8006f62 <UART_SetConfig+0x1ba>
 8006f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f3c:	d814      	bhi.n	8006f68 <UART_SetConfig+0x1c0>
 8006f3e:	2b80      	cmp	r3, #128	; 0x80
 8006f40:	d009      	beq.n	8006f56 <UART_SetConfig+0x1ae>
 8006f42:	2b80      	cmp	r3, #128	; 0x80
 8006f44:	d810      	bhi.n	8006f68 <UART_SetConfig+0x1c0>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <UART_SetConfig+0x1a8>
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d006      	beq.n	8006f5c <UART_SetConfig+0x1b4>
 8006f4e:	e00b      	b.n	8006f68 <UART_SetConfig+0x1c0>
 8006f50:	2300      	movs	r3, #0
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e0cc      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f56:	2302      	movs	r3, #2
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e0c9      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e0c6      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f62:	2308      	movs	r3, #8
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e0c3      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e0c0      	b.n	80070f0 <UART_SetConfig+0x348>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a44      	ldr	r2, [pc, #272]	; (8007084 <UART_SetConfig+0x2dc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d125      	bne.n	8006fc4 <UART_SetConfig+0x21c>
 8006f78:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <UART_SetConfig+0x2cc>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f86:	d017      	beq.n	8006fb8 <UART_SetConfig+0x210>
 8006f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f8c:	d817      	bhi.n	8006fbe <UART_SetConfig+0x216>
 8006f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f92:	d00b      	beq.n	8006fac <UART_SetConfig+0x204>
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d811      	bhi.n	8006fbe <UART_SetConfig+0x216>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <UART_SetConfig+0x1fe>
 8006f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa2:	d006      	beq.n	8006fb2 <UART_SetConfig+0x20a>
 8006fa4:	e00b      	b.n	8006fbe <UART_SetConfig+0x216>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	77fb      	strb	r3, [r7, #31]
 8006faa:	e0a1      	b.n	80070f0 <UART_SetConfig+0x348>
 8006fac:	2302      	movs	r3, #2
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e09e      	b.n	80070f0 <UART_SetConfig+0x348>
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e09b      	b.n	80070f0 <UART_SetConfig+0x348>
 8006fb8:	2308      	movs	r3, #8
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e098      	b.n	80070f0 <UART_SetConfig+0x348>
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	77fb      	strb	r3, [r7, #31]
 8006fc2:	e095      	b.n	80070f0 <UART_SetConfig+0x348>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2f      	ldr	r2, [pc, #188]	; (8007088 <UART_SetConfig+0x2e0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d125      	bne.n	800701a <UART_SetConfig+0x272>
 8006fce:	4b29      	ldr	r3, [pc, #164]	; (8007074 <UART_SetConfig+0x2cc>)
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fdc:	d017      	beq.n	800700e <UART_SetConfig+0x266>
 8006fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fe2:	d817      	bhi.n	8007014 <UART_SetConfig+0x26c>
 8006fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe8:	d00b      	beq.n	8007002 <UART_SetConfig+0x25a>
 8006fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fee:	d811      	bhi.n	8007014 <UART_SetConfig+0x26c>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <UART_SetConfig+0x254>
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff8:	d006      	beq.n	8007008 <UART_SetConfig+0x260>
 8006ffa:	e00b      	b.n	8007014 <UART_SetConfig+0x26c>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e076      	b.n	80070f0 <UART_SetConfig+0x348>
 8007002:	2302      	movs	r3, #2
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e073      	b.n	80070f0 <UART_SetConfig+0x348>
 8007008:	2304      	movs	r3, #4
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e070      	b.n	80070f0 <UART_SetConfig+0x348>
 800700e:	2308      	movs	r3, #8
 8007010:	77fb      	strb	r3, [r7, #31]
 8007012:	e06d      	b.n	80070f0 <UART_SetConfig+0x348>
 8007014:	2310      	movs	r3, #16
 8007016:	77fb      	strb	r3, [r7, #31]
 8007018:	e06a      	b.n	80070f0 <UART_SetConfig+0x348>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1b      	ldr	r2, [pc, #108]	; (800708c <UART_SetConfig+0x2e4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d138      	bne.n	8007096 <UART_SetConfig+0x2ee>
 8007024:	4b13      	ldr	r3, [pc, #76]	; (8007074 <UART_SetConfig+0x2cc>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800702e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007032:	d017      	beq.n	8007064 <UART_SetConfig+0x2bc>
 8007034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007038:	d82a      	bhi.n	8007090 <UART_SetConfig+0x2e8>
 800703a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703e:	d00b      	beq.n	8007058 <UART_SetConfig+0x2b0>
 8007040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007044:	d824      	bhi.n	8007090 <UART_SetConfig+0x2e8>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <UART_SetConfig+0x2aa>
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704e:	d006      	beq.n	800705e <UART_SetConfig+0x2b6>
 8007050:	e01e      	b.n	8007090 <UART_SetConfig+0x2e8>
 8007052:	2300      	movs	r3, #0
 8007054:	77fb      	strb	r3, [r7, #31]
 8007056:	e04b      	b.n	80070f0 <UART_SetConfig+0x348>
 8007058:	2302      	movs	r3, #2
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e048      	b.n	80070f0 <UART_SetConfig+0x348>
 800705e:	2304      	movs	r3, #4
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e045      	b.n	80070f0 <UART_SetConfig+0x348>
 8007064:	2308      	movs	r3, #8
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e042      	b.n	80070f0 <UART_SetConfig+0x348>
 800706a:	bf00      	nop
 800706c:	efff69f3 	.word	0xefff69f3
 8007070:	40011000 	.word	0x40011000
 8007074:	40023800 	.word	0x40023800
 8007078:	40004400 	.word	0x40004400
 800707c:	40004800 	.word	0x40004800
 8007080:	40004c00 	.word	0x40004c00
 8007084:	40005000 	.word	0x40005000
 8007088:	40011400 	.word	0x40011400
 800708c:	40007800 	.word	0x40007800
 8007090:	2310      	movs	r3, #16
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	e02c      	b.n	80070f0 <UART_SetConfig+0x348>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a72      	ldr	r2, [pc, #456]	; (8007264 <UART_SetConfig+0x4bc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d125      	bne.n	80070ec <UART_SetConfig+0x344>
 80070a0:	4b71      	ldr	r3, [pc, #452]	; (8007268 <UART_SetConfig+0x4c0>)
 80070a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070ae:	d017      	beq.n	80070e0 <UART_SetConfig+0x338>
 80070b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070b4:	d817      	bhi.n	80070e6 <UART_SetConfig+0x33e>
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	d00b      	beq.n	80070d4 <UART_SetConfig+0x32c>
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c0:	d811      	bhi.n	80070e6 <UART_SetConfig+0x33e>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <UART_SetConfig+0x326>
 80070c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ca:	d006      	beq.n	80070da <UART_SetConfig+0x332>
 80070cc:	e00b      	b.n	80070e6 <UART_SetConfig+0x33e>
 80070ce:	2300      	movs	r3, #0
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e00d      	b.n	80070f0 <UART_SetConfig+0x348>
 80070d4:	2302      	movs	r3, #2
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e00a      	b.n	80070f0 <UART_SetConfig+0x348>
 80070da:	2304      	movs	r3, #4
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e007      	b.n	80070f0 <UART_SetConfig+0x348>
 80070e0:	2308      	movs	r3, #8
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e004      	b.n	80070f0 <UART_SetConfig+0x348>
 80070e6:	2310      	movs	r3, #16
 80070e8:	77fb      	strb	r3, [r7, #31]
 80070ea:	e001      	b.n	80070f0 <UART_SetConfig+0x348>
 80070ec:	2310      	movs	r3, #16
 80070ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f8:	d15b      	bne.n	80071b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80070fa:	7ffb      	ldrb	r3, [r7, #31]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d828      	bhi.n	8007152 <UART_SetConfig+0x3aa>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0x360>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	0800712d 	.word	0x0800712d
 800710c:	08007135 	.word	0x08007135
 8007110:	0800713d 	.word	0x0800713d
 8007114:	08007153 	.word	0x08007153
 8007118:	08007143 	.word	0x08007143
 800711c:	08007153 	.word	0x08007153
 8007120:	08007153 	.word	0x08007153
 8007124:	08007153 	.word	0x08007153
 8007128:	0800714b 	.word	0x0800714b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800712c:	f7fc ff3e 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8007130:	61b8      	str	r0, [r7, #24]
        break;
 8007132:	e013      	b.n	800715c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007134:	f7fc ff4e 	bl	8003fd4 <HAL_RCC_GetPCLK2Freq>
 8007138:	61b8      	str	r0, [r7, #24]
        break;
 800713a:	e00f      	b.n	800715c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800713c:	4b4b      	ldr	r3, [pc, #300]	; (800726c <UART_SetConfig+0x4c4>)
 800713e:	61bb      	str	r3, [r7, #24]
        break;
 8007140:	e00c      	b.n	800715c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007142:	f7fc fe61 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8007146:	61b8      	str	r0, [r7, #24]
        break;
 8007148:	e008      	b.n	800715c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800714a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714e:	61bb      	str	r3, [r7, #24]
        break;
 8007150:	e004      	b.n	800715c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	77bb      	strb	r3, [r7, #30]
        break;
 800715a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d074      	beq.n	800724c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	005a      	lsls	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d916      	bls.n	80071ac <UART_SetConfig+0x404>
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007184:	d212      	bcs.n	80071ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f023 030f 	bic.w	r3, r3, #15
 800718e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	b29b      	uxth	r3, r3
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	b29a      	uxth	r2, r3
 800719c:	89fb      	ldrh	r3, [r7, #14]
 800719e:	4313      	orrs	r3, r2
 80071a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	89fa      	ldrh	r2, [r7, #14]
 80071a8:	60da      	str	r2, [r3, #12]
 80071aa:	e04f      	b.n	800724c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	77bb      	strb	r3, [r7, #30]
 80071b0:	e04c      	b.n	800724c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071b2:	7ffb      	ldrb	r3, [r7, #31]
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d828      	bhi.n	800720a <UART_SetConfig+0x462>
 80071b8:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <UART_SetConfig+0x418>)
 80071ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071be:	bf00      	nop
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	0800720b 	.word	0x0800720b
 80071d0:	080071fb 	.word	0x080071fb
 80071d4:	0800720b 	.word	0x0800720b
 80071d8:	0800720b 	.word	0x0800720b
 80071dc:	0800720b 	.word	0x0800720b
 80071e0:	08007203 	.word	0x08007203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e4:	f7fc fee2 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 80071e8:	61b8      	str	r0, [r7, #24]
        break;
 80071ea:	e013      	b.n	8007214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ec:	f7fc fef2 	bl	8003fd4 <HAL_RCC_GetPCLK2Freq>
 80071f0:	61b8      	str	r0, [r7, #24]
        break;
 80071f2:	e00f      	b.n	8007214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f4:	4b1d      	ldr	r3, [pc, #116]	; (800726c <UART_SetConfig+0x4c4>)
 80071f6:	61bb      	str	r3, [r7, #24]
        break;
 80071f8:	e00c      	b.n	8007214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071fa:	f7fc fe05 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 80071fe:	61b8      	str	r0, [r7, #24]
        break;
 8007200:	e008      	b.n	8007214 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	61bb      	str	r3, [r7, #24]
        break;
 8007208:	e004      	b.n	8007214 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	77bb      	strb	r3, [r7, #30]
        break;
 8007212:	bf00      	nop
    }

    if (pclk != 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d018      	beq.n	800724c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	085a      	lsrs	r2, r3, #1
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	441a      	add	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	fbb2 f3f3 	udiv	r3, r2, r3
 800722c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b0f      	cmp	r3, #15
 8007232:	d909      	bls.n	8007248 <UART_SetConfig+0x4a0>
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723a:	d205      	bcs.n	8007248 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	b29a      	uxth	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	e001      	b.n	800724c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007258:	7fbb      	ldrb	r3, [r7, #30]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40007c00 	.word	0x40007c00
 8007268:	40023800 	.word	0x40023800
 800726c:	00f42400 	.word	0x00f42400

08007270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01a      	beq.n	8007386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800736e:	d10a      	bne.n	8007386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af02      	add	r7, sp, #8
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073c4:	f7fa fab6 	bl	8001934 <HAL_GetTick>
 80073c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d10e      	bne.n	80073f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f817 	bl	800741a <UART_WaitOnFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e00d      	b.n	8007412 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b09c      	sub	sp, #112	; 0x70
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	4613      	mov	r3, r2
 8007428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742a:	e0a5      	b.n	8007578 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	f000 80a1 	beq.w	8007578 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007436:	f7fa fa7d 	bl	8001934 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <UART_WaitOnFlagUntilTimeout+0x32>
 8007446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007448:	2b00      	cmp	r3, #0
 800744a:	d13e      	bne.n	80074ca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800745a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007460:	667b      	str	r3, [r7, #100]	; 0x64
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800746c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007470:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e6      	bne.n	800744c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	663b      	str	r3, [r7, #96]	; 0x60
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3308      	adds	r3, #8
 800749c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800749e:	64ba      	str	r2, [r7, #72]	; 0x48
 80074a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e5      	bne.n	800747e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e067      	b.n	800759a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d04f      	beq.n	8007578 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e6:	d147      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007510:	637b      	str	r3, [r7, #52]	; 0x34
 8007512:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e6      	bne.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3308      	adds	r3, #8
 800752a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	613b      	str	r3, [r7, #16]
   return(result);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f023 0301 	bic.w	r3, r3, #1
 800753a:	66bb      	str	r3, [r7, #104]	; 0x68
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007544:	623a      	str	r2, [r7, #32]
 8007546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	69f9      	ldr	r1, [r7, #28]
 800754a:	6a3a      	ldr	r2, [r7, #32]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	61bb      	str	r3, [r7, #24]
   return(result);
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e5      	bne.n	8007524 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2220      	movs	r2, #32
 8007562:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e010      	b.n	800759a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69da      	ldr	r2, [r3, #28]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	4013      	ands	r3, r2
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	429a      	cmp	r2, r3
 8007586:	bf0c      	ite	eq
 8007588:	2301      	moveq	r3, #1
 800758a:	2300      	movne	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	461a      	mov	r2, r3
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	429a      	cmp	r2, r3
 8007594:	f43f af4a 	beq.w	800742c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3770      	adds	r7, #112	; 0x70
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80075a4:	b084      	sub	sp, #16
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	f107 001c 	add.w	r0, r7, #28
 80075b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80075ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80075bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80075be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80075c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80075c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80075ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80075ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <SDMMC_Init+0x54>)
 80075dc:	4013      	ands	r3, r2
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	b004      	add	sp, #16
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	ffff8100 	.word	0xffff8100

080075fc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2203      	movs	r2, #3
 8007622:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0303 	and.w	r3, r3, #3
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
	...

08007650 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800766e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007674:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800767a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <SDMMC_SendCommand+0x50>)
 8007688:	4013      	ands	r3, r2
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	fffff000 	.word	0xfffff000

080076a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	b2db      	uxtb	r3, r3
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3314      	adds	r3, #20
 80076cc:	461a      	mov	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	4413      	add	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
}  
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800770a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007710:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007716:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800772e:	2300      	movs	r3, #0

}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800774a:	2310      	movs	r3, #16
 800774c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800775a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800775c:	f107 0308 	add.w	r3, r7, #8
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ff74 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007768:	f241 3288 	movw	r2, #5000	; 0x1388
 800776c:	2110      	movs	r1, #16
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa1a 	bl	8007ba8 <SDMMC_GetCmdResp1>
 8007774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007776:	69fb      	ldr	r3, [r7, #28]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3720      	adds	r7, #32
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800778e:	2311      	movs	r3, #17
 8007790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007792:	2340      	movs	r3, #64	; 0x40
 8007794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800779a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077a0:	f107 0308 	add.w	r3, r7, #8
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff ff52 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80077ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b0:	2111      	movs	r1, #17
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9f8 	bl	8007ba8 <SDMMC_GetCmdResp1>
 80077b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ba:	69fb      	ldr	r3, [r7, #28]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80077d2:	2312      	movs	r3, #18
 80077d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff ff30 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f4:	2112      	movs	r1, #18
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9d6 	bl	8007ba8 <SDMMC_GetCmdResp1>
 80077fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077fe:	69fb      	ldr	r3, [r7, #28]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007816:	2318      	movs	r3, #24
 8007818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800781a:	2340      	movs	r3, #64	; 0x40
 800781c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007826:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff ff0e 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007834:	f241 3288 	movw	r2, #5000	; 0x1388
 8007838:	2118      	movs	r1, #24
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9b4 	bl	8007ba8 <SDMMC_GetCmdResp1>
 8007840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007842:	69fb      	ldr	r3, [r7, #28]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800785a:	2319      	movs	r3, #25
 800785c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800785e:	2340      	movs	r3, #64	; 0x40
 8007860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800786a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800786c:	f107 0308 	add.w	r3, r7, #8
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff feec 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007878:	f241 3288 	movw	r2, #5000	; 0x1388
 800787c:	2119      	movs	r1, #25
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f992 	bl	8007ba8 <SDMMC_GetCmdResp1>
 8007884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007886:	69fb      	ldr	r3, [r7, #28]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800789c:	230c      	movs	r3, #12
 800789e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fecb 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80078ba:	4a05      	ldr	r2, [pc, #20]	; (80078d0 <SDMMC_CmdStopTransfer+0x40>)
 80078bc:	210c      	movs	r1, #12
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f972 	bl	8007ba8 <SDMMC_GetCmdResp1>
 80078c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078c6:	69fb      	ldr	r3, [r7, #28]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3720      	adds	r7, #32
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	05f5e100 	.word	0x05f5e100

080078d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80078e4:	2307      	movs	r3, #7
 80078e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	4619      	mov	r1, r3
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fea7 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007902:	f241 3288 	movw	r2, #5000	; 0x1388
 8007906:	2107      	movs	r1, #7
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f94d 	bl	8007ba8 <SDMMC_GetCmdResp1>
 800790e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007912:	4618      	mov	r0, r3
 8007914:	3728      	adds	r7, #40	; 0x28
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b088      	sub	sp, #32
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007938:	f107 0308 	add.w	r3, r7, #8
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fe86 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fb67 	bl	8008018 <SDMMC_GetCmdError>
 800794a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800794c:	69fb      	ldr	r3, [r7, #28]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b088      	sub	sp, #32
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800795e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007964:	2308      	movs	r3, #8
 8007966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007976:	f107 0308 	add.w	r3, r7, #8
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fe67 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fafa 	bl	8007f7c <SDMMC_GetCmdResp7>
 8007988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800798a:	69fb      	ldr	r3, [r7, #28]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80079a2:	2337      	movs	r3, #55	; 0x37
 80079a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079a6:	2340      	movs	r3, #64	; 0x40
 80079a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079b4:	f107 0308 	add.w	r3, r7, #8
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fe48 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80079c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c4:	2137      	movs	r1, #55	; 0x37
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8ee 	bl	8007ba8 <SDMMC_GetCmdResp1>
 80079cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079ce:	69fb      	ldr	r3, [r7, #28]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <SDMMC_CmdAppOperCommand+0x44>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079ea:	2329      	movs	r3, #41	; 0x29
 80079ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079f2:	2300      	movs	r3, #0
 80079f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079fc:	f107 0308 	add.w	r3, r7, #8
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fe24 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fa03 	bl	8007e14 <SDMMC_GetCmdResp3>
 8007a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a10:	69fb      	ldr	r3, [r7, #28]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	80100000 	.word	0x80100000

08007a20 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007a2e:	2306      	movs	r3, #6
 8007a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a32:	2340      	movs	r3, #64	; 0x40
 8007a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a40:	f107 0308 	add.w	r3, r7, #8
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fe02 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a50:	2106      	movs	r1, #6
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8a8 	bl	8007ba8 <SDMMC_GetCmdResp1>
 8007a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007a70:	2333      	movs	r3, #51	; 0x33
 8007a72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a74:	2340      	movs	r3, #64	; 0x40
 8007a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fde1 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a92:	2133      	movs	r1, #51	; 0x33
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f887 	bl	8007ba8 <SDMMC_GetCmdResp1>
 8007a9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b088      	sub	sp, #32
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007ab6:	23c0      	movs	r3, #192	; 0xc0
 8007ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ac4:	f107 0308 	add.w	r3, r7, #8
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fdc0 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f957 	bl	8007d84 <SDMMC_GetCmdResp2>
 8007ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b088      	sub	sp, #32
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007af0:	2309      	movs	r3, #9
 8007af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007af4:	23c0      	movs	r3, #192	; 0xc0
 8007af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fda1 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f938 	bl	8007d84 <SDMMC_GetCmdResp2>
 8007b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b16:	69fb      	ldr	r3, [r7, #28]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b32:	2340      	movs	r3, #64	; 0x40
 8007b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b40:	f107 0308 	add.w	r3, r7, #8
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fd82 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	2103      	movs	r1, #3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f99d 	bl	8007e90 <SDMMC_GetCmdResp6>
 8007b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b58:	69fb      	ldr	r3, [r7, #28]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b088      	sub	sp, #32
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b70:	230d      	movs	r3, #13
 8007b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b74:	2340      	movs	r3, #64	; 0x40
 8007b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b82:	f107 0308 	add.w	r3, r7, #8
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff fd61 	bl	8007650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b92:	210d      	movs	r1, #13
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f807 	bl	8007ba8 <SDMMC_GetCmdResp1>
 8007b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007bb6:	4b70      	ldr	r3, [pc, #448]	; (8007d78 <SDMMC_GetCmdResp1+0x1d0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a70      	ldr	r2, [pc, #448]	; (8007d7c <SDMMC_GetCmdResp1+0x1d4>)
 8007bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc0:	0a5a      	lsrs	r2, r3, #9
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
 8007bc8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	1e5a      	subs	r2, r3, #1
 8007bce:	61fa      	str	r2, [r7, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bd8:	e0c9      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bde:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0ef      	beq.n	8007bca <SDMMC_GetCmdResp1+0x22>
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1ea      	bne.n	8007bca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d004      	beq.n	8007c0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2204      	movs	r2, #4
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c06:	2304      	movs	r3, #4
 8007c08:	e0b1      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d004      	beq.n	8007c20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0a6      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	22c5      	movs	r2, #197	; 0xc5
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fd3c 	bl	80076a4 <SDMMC_GetCommandResponse>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d001      	beq.n	8007c3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e099      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fd3e 	bl	80076be <SDMMC_GetResponse>
 8007c42:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4b4e      	ldr	r3, [pc, #312]	; (8007d80 <SDMMC_GetCmdResp1+0x1d8>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e08d      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	da02      	bge.n	8007c5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c5c:	e087      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	e080      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c76:	2380      	movs	r3, #128	; 0x80
 8007c78:	e079      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c88:	e071      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c98:	e069      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca8:	e061      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cb8:	e059      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cc8:	e051      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cd8:	e049      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ce8:	e041      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf8:	e039      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d08:	e031      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d18:	e029      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d28:	e021      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d38:	e019      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d48:	e011      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d58:	e009      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d68:	e001      	b.n	8007d6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000000 	.word	0x20000000
 8007d7c:	10624dd3 	.word	0x10624dd3
 8007d80:	fdffe008 	.word	0xfdffe008

08007d84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <SDMMC_GetCmdResp2+0x88>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <SDMMC_GetCmdResp2+0x8c>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	0a5b      	lsrs	r3, r3, #9
 8007d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d9c:	fb02 f303 	mul.w	r3, r2, r3
 8007da0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1e5a      	subs	r2, r3, #1
 8007da6:	60fa      	str	r2, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007db0:	e026      	b.n	8007e00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0ef      	beq.n	8007da2 <SDMMC_GetCmdResp2+0x1e>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1ea      	bne.n	8007da2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2204      	movs	r2, #4
 8007ddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dde:	2304      	movs	r3, #4
 8007de0:	e00e      	b.n	8007e00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e003      	b.n	8007e00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	22c5      	movs	r2, #197	; 0xc5
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000000 	.word	0x20000000
 8007e10:	10624dd3 	.word	0x10624dd3

08007e14 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <SDMMC_GetCmdResp3+0x74>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1a      	ldr	r2, [pc, #104]	; (8007e8c <SDMMC_GetCmdResp3+0x78>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	0a5b      	lsrs	r3, r3, #9
 8007e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e2c:	fb02 f303 	mul.w	r3, r2, r3
 8007e30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	60fa      	str	r2, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e40:	e01b      	b.n	8007e7a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0ef      	beq.n	8007e32 <SDMMC_GetCmdResp3+0x1e>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1ea      	bne.n	8007e32 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2204      	movs	r2, #4
 8007e6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e6e:	2304      	movs	r3, #4
 8007e70:	e003      	b.n	8007e7a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	22c5      	movs	r2, #197	; 0xc5
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20000000 	.word	0x20000000
 8007e8c:	10624dd3 	.word	0x10624dd3

08007e90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e9e:	4b35      	ldr	r3, [pc, #212]	; (8007f74 <SDMMC_GetCmdResp6+0xe4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a35      	ldr	r2, [pc, #212]	; (8007f78 <SDMMC_GetCmdResp6+0xe8>)
 8007ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea8:	0a5b      	lsrs	r3, r3, #9
 8007eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	1e5a      	subs	r2, r3, #1
 8007eb8:	61fa      	str	r2, [r7, #28]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ebe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ec2:	e052      	b.n	8007f6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0ef      	beq.n	8007eb4 <SDMMC_GetCmdResp6+0x24>
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1ea      	bne.n	8007eb4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2204      	movs	r2, #4
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	e03a      	b.n	8007f6a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e02f      	b.n	8007f6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff fbca 	bl	80076a4 <SDMMC_GetCommandResponse>
 8007f10:	4603      	mov	r3, r0
 8007f12:	461a      	mov	r2, r3
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d001      	beq.n	8007f1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e025      	b.n	8007f6a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	22c5      	movs	r2, #197	; 0xc5
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007f24:	2100      	movs	r1, #0
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fbc9 	bl	80076be <SDMMC_GetResponse>
 8007f2c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	e011      	b.n	8007f6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f54:	e009      	b.n	8007f6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f64:	e001      	b.n	8007f6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000000 	.word	0x20000000
 8007f78:	10624dd3 	.word	0x10624dd3

08007f7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f84:	4b22      	ldr	r3, [pc, #136]	; (8008010 <SDMMC_GetCmdResp7+0x94>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a22      	ldr	r2, [pc, #136]	; (8008014 <SDMMC_GetCmdResp7+0x98>)
 8007f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8e:	0a5b      	lsrs	r3, r3, #9
 8007f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f94:	fb02 f303 	mul.w	r3, r2, r3
 8007f98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1e5a      	subs	r2, r3, #1
 8007f9e:	60fa      	str	r2, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fa8:	e02c      	b.n	8008004 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0ef      	beq.n	8007f9a <SDMMC_GetCmdResp7+0x1e>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1ea      	bne.n	8007f9a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	e014      	b.n	8008004 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e009      	b.n	8008004 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2240      	movs	r2, #64	; 0x40
 8008000:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008002:	2300      	movs	r3, #0
  
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	20000000 	.word	0x20000000
 8008014:	10624dd3 	.word	0x10624dd3

08008018 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008020:	4b11      	ldr	r3, [pc, #68]	; (8008068 <SDMMC_GetCmdError+0x50>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a11      	ldr	r2, [pc, #68]	; (800806c <SDMMC_GetCmdError+0x54>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	0a5b      	lsrs	r3, r3, #9
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	fb02 f303 	mul.w	r3, r2, r3
 8008034:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	1e5a      	subs	r2, r3, #1
 800803a:	60fa      	str	r2, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008044:	e009      	b.n	800805a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f1      	beq.n	8008036 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	22c5      	movs	r2, #197	; 0xc5
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000000 	.word	0x20000000
 800806c:	10624dd3 	.word	0x10624dd3

08008070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008070:	b084      	sub	sp, #16
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	f107 001c 	add.w	r0, r7, #28
 800807e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b01      	cmp	r3, #1
 8008086:	d120      	bne.n	80080ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	4b20      	ldr	r3, [pc, #128]	; (800811c <USB_CoreInit+0xac>)
 800809a:	4013      	ands	r3, r2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d105      	bne.n	80080be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fb38 	bl	8009734 <USB_CoreReset>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
 80080c8:	e010      	b.n	80080ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fb2c 	bl	8009734 <USB_CoreReset>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d10b      	bne.n	800810a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f043 0206 	orr.w	r2, r3, #6
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f043 0220 	orr.w	r2, r3, #32
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008116:	b004      	add	sp, #16
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	ffbdffbf 	.word	0xffbdffbf

08008120 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d165      	bne.n	8008200 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4a41      	ldr	r2, [pc, #260]	; (800823c <USB_SetTurnaroundTime+0x11c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d906      	bls.n	800814a <USB_SetTurnaroundTime+0x2a>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4a40      	ldr	r2, [pc, #256]	; (8008240 <USB_SetTurnaroundTime+0x120>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d202      	bcs.n	800814a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008144:	230f      	movs	r3, #15
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e062      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4a3c      	ldr	r2, [pc, #240]	; (8008240 <USB_SetTurnaroundTime+0x120>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d306      	bcc.n	8008160 <USB_SetTurnaroundTime+0x40>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4a3b      	ldr	r2, [pc, #236]	; (8008244 <USB_SetTurnaroundTime+0x124>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d202      	bcs.n	8008160 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800815a:	230e      	movs	r3, #14
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	e057      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4a38      	ldr	r2, [pc, #224]	; (8008244 <USB_SetTurnaroundTime+0x124>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d306      	bcc.n	8008176 <USB_SetTurnaroundTime+0x56>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4a37      	ldr	r2, [pc, #220]	; (8008248 <USB_SetTurnaroundTime+0x128>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d202      	bcs.n	8008176 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008170:	230d      	movs	r3, #13
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	e04c      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4a33      	ldr	r2, [pc, #204]	; (8008248 <USB_SetTurnaroundTime+0x128>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d306      	bcc.n	800818c <USB_SetTurnaroundTime+0x6c>
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	4a32      	ldr	r2, [pc, #200]	; (800824c <USB_SetTurnaroundTime+0x12c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d802      	bhi.n	800818c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008186:	230c      	movs	r3, #12
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	e041      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a2f      	ldr	r2, [pc, #188]	; (800824c <USB_SetTurnaroundTime+0x12c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d906      	bls.n	80081a2 <USB_SetTurnaroundTime+0x82>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a2e      	ldr	r2, [pc, #184]	; (8008250 <USB_SetTurnaroundTime+0x130>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d802      	bhi.n	80081a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800819c:	230b      	movs	r3, #11
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	e036      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a2a      	ldr	r2, [pc, #168]	; (8008250 <USB_SetTurnaroundTime+0x130>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d906      	bls.n	80081b8 <USB_SetTurnaroundTime+0x98>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a29      	ldr	r2, [pc, #164]	; (8008254 <USB_SetTurnaroundTime+0x134>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d802      	bhi.n	80081b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081b2:	230a      	movs	r3, #10
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	e02b      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4a26      	ldr	r2, [pc, #152]	; (8008254 <USB_SetTurnaroundTime+0x134>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d906      	bls.n	80081ce <USB_SetTurnaroundTime+0xae>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a25      	ldr	r2, [pc, #148]	; (8008258 <USB_SetTurnaroundTime+0x138>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d202      	bcs.n	80081ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081c8:	2309      	movs	r3, #9
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	e020      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a21      	ldr	r2, [pc, #132]	; (8008258 <USB_SetTurnaroundTime+0x138>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d306      	bcc.n	80081e4 <USB_SetTurnaroundTime+0xc4>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a20      	ldr	r2, [pc, #128]	; (800825c <USB_SetTurnaroundTime+0x13c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d802      	bhi.n	80081e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081de:	2308      	movs	r3, #8
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	e015      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a1d      	ldr	r2, [pc, #116]	; (800825c <USB_SetTurnaroundTime+0x13c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d906      	bls.n	80081fa <USB_SetTurnaroundTime+0xda>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a1c      	ldr	r2, [pc, #112]	; (8008260 <USB_SetTurnaroundTime+0x140>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d202      	bcs.n	80081fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081f4:	2307      	movs	r3, #7
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	e00a      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081fa:	2306      	movs	r3, #6
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e007      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008206:	2309      	movs	r3, #9
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e001      	b.n	8008210 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800820c:	2309      	movs	r3, #9
 800820e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	029b      	lsls	r3, r3, #10
 8008224:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008228:	431a      	orrs	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	00d8acbf 	.word	0x00d8acbf
 8008240:	00e4e1c0 	.word	0x00e4e1c0
 8008244:	00f42400 	.word	0x00f42400
 8008248:	01067380 	.word	0x01067380
 800824c:	011a499f 	.word	0x011a499f
 8008250:	01312cff 	.word	0x01312cff
 8008254:	014ca43f 	.word	0x014ca43f
 8008258:	016e3600 	.word	0x016e3600
 800825c:	01a6ab1f 	.word	0x01a6ab1f
 8008260:	01e84800 	.word	0x01e84800

08008264 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f043 0201 	orr.w	r2, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008286:	b480      	push	{r7}
 8008288:	b083      	sub	sp, #12
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f023 0201 	bic.w	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d115      	bne.n	80082f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082d6:	2001      	movs	r0, #1
 80082d8:	f7f9 fb38 	bl	800194c <HAL_Delay>
      ms++;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3301      	adds	r3, #1
 80082e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 f995 	bl	8009612 <USB_GetMode>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d01e      	beq.n	800832c <USB_SetCurrentMode+0x84>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b31      	cmp	r3, #49	; 0x31
 80082f2:	d9f0      	bls.n	80082d6 <USB_SetCurrentMode+0x2e>
 80082f4:	e01a      	b.n	800832c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d115      	bne.n	8008328 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008308:	2001      	movs	r0, #1
 800830a:	f7f9 fb1f 	bl	800194c <HAL_Delay>
      ms++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f97c 	bl	8009612 <USB_GetMode>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <USB_SetCurrentMode+0x84>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b31      	cmp	r3, #49	; 0x31
 8008324:	d9f0      	bls.n	8008308 <USB_SetCurrentMode+0x60>
 8008326:	e001      	b.n	800832c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e005      	b.n	8008338 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b32      	cmp	r3, #50	; 0x32
 8008330:	d101      	bne.n	8008336 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008340:	b084      	sub	sp, #16
 8008342:	b580      	push	{r7, lr}
 8008344:	b086      	sub	sp, #24
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800834e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	e009      	b.n	8008374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3340      	adds	r3, #64	; 0x40
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2b0e      	cmp	r3, #14
 8008378:	d9f2      	bls.n	8008360 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800837a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d11c      	bne.n	80083ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800838e:	f043 0302 	orr.w	r3, r3, #2
 8008392:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e005      	b.n	80083c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083cc:	461a      	mov	r2, r3
 80083ce:	2300      	movs	r3, #0
 80083d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d8:	4619      	mov	r1, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e0:	461a      	mov	r2, r3
 80083e2:	680b      	ldr	r3, [r1, #0]
 80083e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d10c      	bne.n	8008406 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083f2:	2100      	movs	r1, #0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f961 	bl	80086bc <USB_SetDevSpeed>
 80083fa:	e008      	b.n	800840e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083fc:	2101      	movs	r1, #1
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f95c 	bl	80086bc <USB_SetDevSpeed>
 8008404:	e003      	b.n	800840e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008406:	2103      	movs	r1, #3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f957 	bl	80086bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800840e:	2110      	movs	r1, #16
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f8f3 	bl	80085fc <USB_FlushTxFifo>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f91d 	bl	8008660 <USB_FlushRxFifo>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	461a      	mov	r2, r3
 8008438:	2300      	movs	r3, #0
 800843a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008442:	461a      	mov	r2, r3
 8008444:	2300      	movs	r3, #0
 8008446:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844e:	461a      	mov	r2, r3
 8008450:	2300      	movs	r3, #0
 8008452:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008454:	2300      	movs	r3, #0
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	e043      	b.n	80084e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008470:	d118      	bne.n	80084a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008484:	461a      	mov	r2, r3
 8008486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	e013      	b.n	80084b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	461a      	mov	r2, r3
 800849c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	e008      	b.n	80084b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b0:	461a      	mov	r2, r3
 80084b2:	2300      	movs	r3, #0
 80084b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	461a      	mov	r2, r3
 80084c4:	2300      	movs	r3, #0
 80084c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d4:	461a      	mov	r2, r3
 80084d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	3301      	adds	r3, #1
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3b7      	bcc.n	800845a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	e043      	b.n	8008578 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008506:	d118      	bne.n	800853a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	461a      	mov	r2, r3
 800851c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	e013      	b.n	800854c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	e008      	b.n	800854c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	461a      	mov	r2, r3
 8008548:	2300      	movs	r3, #0
 800854a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	461a      	mov	r2, r3
 800855a:	2300      	movs	r3, #0
 800855c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	461a      	mov	r2, r3
 800856c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	3301      	adds	r3, #1
 8008576:	613b      	str	r3, [r7, #16]
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	429a      	cmp	r2, r3
 800857e:	d3b7      	bcc.n	80084f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800858e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008592:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f043 0210 	orr.w	r2, r3, #16
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699a      	ldr	r2, [r3, #24]
 80085b8:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <USB_DevInit+0x2b4>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f043 0208 	orr.w	r2, r3, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d105      	bne.n	80085e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <USB_DevInit+0x2b8>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085f0:	b004      	add	sp, #16
 80085f2:	4770      	bx	lr
 80085f4:	803c3800 	.word	0x803c3800
 80085f8:	40000004 	.word	0x40000004

080085fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	4a12      	ldr	r2, [pc, #72]	; (800865c <USB_FlushTxFifo+0x60>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d901      	bls.n	800861a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e01a      	b.n	8008650 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	daf3      	bge.n	800860a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	019b      	lsls	r3, r3, #6
 800862a:	f043 0220 	orr.w	r2, r3, #32
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	4a08      	ldr	r2, [pc, #32]	; (800865c <USB_FlushTxFifo+0x60>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e006      	b.n	8008650 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b20      	cmp	r3, #32
 800864c:	d0f1      	beq.n	8008632 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	00030d40 	.word	0x00030d40

08008660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	4a11      	ldr	r2, [pc, #68]	; (80086b8 <USB_FlushRxFifo+0x58>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d901      	bls.n	800867c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e017      	b.n	80086ac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	daf3      	bge.n	800866c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2210      	movs	r2, #16
 800868c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	4a08      	ldr	r2, [pc, #32]	; (80086b8 <USB_FlushRxFifo+0x58>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d901      	bls.n	800869e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e006      	b.n	80086ac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b10      	cmp	r3, #16
 80086a8:	d0f1      	beq.n	800868e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	00030d40 	.word	0x00030d40

080086bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	68f9      	ldr	r1, [r7, #12]
 80086d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086dc:	4313      	orrs	r3, r2
 80086de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b087      	sub	sp, #28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f003 0306 	and.w	r3, r3, #6
 8008706:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
 8008712:	e00a      	b.n	800872a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d002      	beq.n	8008720 <USB_GetDevSpeed+0x32>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b06      	cmp	r3, #6
 800871e:	d102      	bne.n	8008726 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008720:	2302      	movs	r3, #2
 8008722:	75fb      	strb	r3, [r7, #23]
 8008724:	e001      	b.n	800872a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008726:	230f      	movs	r3, #15
 8008728:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
}
 800872c:	4618      	mov	r0, r3
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d139      	bne.n	80087c8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875a:	69da      	ldr	r2, [r3, #28]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	2101      	movs	r1, #1
 8008766:	fa01 f303 	lsl.w	r3, r1, r3
 800876a:	b29b      	uxth	r3, r3
 800876c:	68f9      	ldr	r1, [r7, #12]
 800876e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008772:	4313      	orrs	r3, r2
 8008774:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d153      	bne.n	8008834 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	059b      	lsls	r3, r3, #22
 80087ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087b0:	431a      	orrs	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	0159      	lsls	r1, r3, #5
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	440b      	add	r3, r1
 80087ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087be:	4619      	mov	r1, r3
 80087c0:	4b20      	ldr	r3, [pc, #128]	; (8008844 <USB_ActivateEndpoint+0x10c>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	600b      	str	r3, [r1, #0]
 80087c6:	e035      	b.n	8008834 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	2101      	movs	r1, #1
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	68f9      	ldr	r1, [r7, #12]
 80087e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d119      	bne.n	8008834 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	78db      	ldrb	r3, [r3, #3]
 800881a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800881c:	430b      	orrs	r3, r1
 800881e:	431a      	orrs	r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	0159      	lsls	r1, r3, #5
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	440b      	add	r3, r1
 8008828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882c:	4619      	mov	r1, r3
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <USB_ActivateEndpoint+0x10c>)
 8008830:	4313      	orrs	r3, r2
 8008832:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	10008000 	.word	0x10008000

08008848 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d161      	bne.n	8008928 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887a:	d11f      	bne.n	80088bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800889a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	2101      	movs	r1, #1
 80088ce:	fa01 f303 	lsl.w	r3, r1, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	43db      	mvns	r3, r3
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088dc:	4013      	ands	r3, r2
 80088de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	2101      	movs	r1, #1
 80088f2:	fa01 f303 	lsl.w	r3, r1, r3
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008900:	4013      	ands	r3, r2
 8008902:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	0159      	lsls	r1, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	440b      	add	r3, r1
 800891a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891e:	4619      	mov	r1, r3
 8008920:	4b35      	ldr	r3, [pc, #212]	; (80089f8 <USB_DeactivateEndpoint+0x1b0>)
 8008922:	4013      	ands	r3, r2
 8008924:	600b      	str	r3, [r1, #0]
 8008926:	e060      	b.n	80089ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800893a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800893e:	d11f      	bne.n	8008980 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	440a      	add	r2, r1
 8008956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800895e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	440a      	add	r2, r1
 8008976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800897a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800897e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	2101      	movs	r1, #1
 8008992:	fa01 f303 	lsl.w	r3, r1, r3
 8008996:	041b      	lsls	r3, r3, #16
 8008998:	43db      	mvns	r3, r3
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a0:	4013      	ands	r3, r2
 80089a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 030f 	and.w	r3, r3, #15
 80089b4:	2101      	movs	r1, #1
 80089b6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ba:	041b      	lsls	r3, r3, #16
 80089bc:	43db      	mvns	r3, r3
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c4:	4013      	ands	r3, r2
 80089c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	0159      	lsls	r1, r3, #5
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	440b      	add	r3, r1
 80089de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e2:	4619      	mov	r1, r3
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <USB_DeactivateEndpoint+0x1b4>)
 80089e6:	4013      	ands	r3, r2
 80089e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	ec337800 	.word	0xec337800
 80089fc:	eff37800 	.word	0xeff37800

08008a00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	; 0x28
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	f040 8163 	bne.w	8008ce8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d132      	bne.n	8008a90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	0159      	lsls	r1, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	440b      	add	r3, r1
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	4619      	mov	r1, r3
 8008a46:	4ba5      	ldr	r3, [pc, #660]	; (8008cdc <USB_EPStartXfer+0x2dc>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	0159      	lsls	r1, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	440b      	add	r3, r1
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	4619      	mov	r1, r3
 8008a88:	4b95      	ldr	r3, [pc, #596]	; (8008ce0 <USB_EPStartXfer+0x2e0>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	610b      	str	r3, [r1, #16]
 8008a8e:	e074      	b.n	8008b7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	0159      	lsls	r1, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	440b      	add	r3, r1
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4b8c      	ldr	r3, [pc, #560]	; (8008ce0 <USB_EPStartXfer+0x2e0>)
 8008aae:	4013      	ands	r3, r2
 8008ab0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	0159      	lsls	r1, r3, #5
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	440b      	add	r3, r1
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	4619      	mov	r1, r3
 8008ace:	4b83      	ldr	r3, [pc, #524]	; (8008cdc <USB_EPStartXfer+0x2dc>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	6959      	ldr	r1, [r3, #20]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	440b      	add	r3, r1
 8008aec:	1e59      	subs	r1, r3, #1
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008af6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008af8:	4b7a      	ldr	r3, [pc, #488]	; (8008ce4 <USB_EPStartXfer+0x2e4>)
 8008afa:	400b      	ands	r3, r1
 8008afc:	69b9      	ldr	r1, [r7, #24]
 8008afe:	0148      	lsls	r0, r1, #5
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	4401      	add	r1, r0
 8008b04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b22:	69b9      	ldr	r1, [r7, #24]
 8008b24:	0148      	lsls	r0, r1, #5
 8008b26:	69f9      	ldr	r1, [r7, #28]
 8008b28:	4401      	add	r1, r0
 8008b2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	78db      	ldrb	r3, [r3, #3]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d11f      	bne.n	8008b7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d14b      	bne.n	8008c18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d009      	beq.n	8008b9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b94:	461a      	mov	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	78db      	ldrb	r3, [r3, #3]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d128      	bne.n	8008bf6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d110      	bne.n	8008bd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	e00f      	b.n	8008bf6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	0151      	lsls	r1, r2, #5
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	440a      	add	r2, r1
 8008c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	e133      	b.n	8008e80 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	78db      	ldrb	r3, [r3, #3]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d015      	beq.n	8008c6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 811b 	beq.w	8008e80 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c60:	69f9      	ldr	r1, [r7, #28]
 8008c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c66:	4313      	orrs	r3, r2
 8008c68:	634b      	str	r3, [r1, #52]	; 0x34
 8008c6a:	e109      	b.n	8008e80 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d110      	bne.n	8008c9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	0151      	lsls	r1, r2, #5
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	440a      	add	r2, r1
 8008c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	e00f      	b.n	8008cbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	68d9      	ldr	r1, [r3, #12]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	b298      	uxth	r0, r3
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fa38 	bl	8009148 <USB_WritePacket>
 8008cd8:	e0d2      	b.n	8008e80 <USB_EPStartXfer+0x480>
 8008cda:	bf00      	nop
 8008cdc:	e007ffff 	.word	0xe007ffff
 8008ce0:	fff80000 	.word	0xfff80000
 8008ce4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	691a      	ldr	r2, [r3, #16]
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	0159      	lsls	r1, r3, #5
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	440b      	add	r3, r1
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d02:	4619      	mov	r1, r3
 8008d04:	4b61      	ldr	r3, [pc, #388]	; (8008e8c <USB_EPStartXfer+0x48c>)
 8008d06:	4013      	ands	r3, r2
 8008d08:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d16:	691a      	ldr	r2, [r3, #16]
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	0159      	lsls	r1, r3, #5
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	440b      	add	r3, r1
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	4619      	mov	r1, r3
 8008d26:	4b5a      	ldr	r3, [pc, #360]	; (8008e90 <USB_EPStartXfer+0x490>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d123      	bne.n	8008d7c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d40:	691a      	ldr	r2, [r3, #16]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d4a:	69b9      	ldr	r1, [r7, #24]
 8008d4c:	0148      	lsls	r0, r1, #5
 8008d4e:	69f9      	ldr	r1, [r7, #28]
 8008d50:	4401      	add	r1, r0
 8008d52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d56:	4313      	orrs	r3, r2
 8008d58:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d78:	6113      	str	r3, [r2, #16]
 8008d7a:	e033      	b.n	8008de4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	695a      	ldr	r2, [r3, #20]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	4413      	add	r3, r2
 8008d86:	1e5a      	subs	r2, r3, #1
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d90:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	8afb      	ldrh	r3, [r7, #22]
 8008da2:	04d9      	lsls	r1, r3, #19
 8008da4:	4b3b      	ldr	r3, [pc, #236]	; (8008e94 <USB_EPStartXfer+0x494>)
 8008da6:	400b      	ands	r3, r1
 8008da8:	69b9      	ldr	r1, [r7, #24]
 8008daa:	0148      	lsls	r0, r1, #5
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	4401      	add	r1, r0
 8008db0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008db4:	4313      	orrs	r3, r2
 8008db6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	691a      	ldr	r2, [r3, #16]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	8af9      	ldrh	r1, [r7, #22]
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dd4:	69b9      	ldr	r1, [r7, #24]
 8008dd6:	0148      	lsls	r0, r1, #5
 8008dd8:	69f9      	ldr	r1, [r7, #28]
 8008dda:	4401      	add	r1, r0
 8008ddc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008de0:	4313      	orrs	r3, r2
 8008de2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d10d      	bne.n	8008e06 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	68d9      	ldr	r1, [r3, #12]
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e02:	460a      	mov	r2, r1
 8008e04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	78db      	ldrb	r3, [r3, #3]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d128      	bne.n	8008e60 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d110      	bne.n	8008e40 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	0151      	lsls	r1, r2, #5
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	440a      	add	r2, r1
 8008e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	e00f      	b.n	8008e60 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	0151      	lsls	r1, r2, #5
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	440a      	add	r2, r1
 8008e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3720      	adds	r7, #32
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	fff80000 	.word	0xfff80000
 8008e90:	e007ffff 	.word	0xe007ffff
 8008e94:	1ff80000 	.word	0x1ff80000

08008e98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	f040 80cd 	bne.w	8009054 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d132      	bne.n	8008f28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	0159      	lsls	r1, r3, #5
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	440b      	add	r3, r1
 8008ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008edc:	4619      	mov	r1, r3
 8008ede:	4b98      	ldr	r3, [pc, #608]	; (8009140 <USB_EP0StartXfer+0x2a8>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	0151      	lsls	r1, r2, #5
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	440a      	add	r2, r1
 8008efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f10:	691a      	ldr	r2, [r3, #16]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	0159      	lsls	r1, r3, #5
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	440b      	add	r3, r1
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4b88      	ldr	r3, [pc, #544]	; (8009144 <USB_EP0StartXfer+0x2ac>)
 8008f22:	4013      	ands	r3, r2
 8008f24:	610b      	str	r3, [r1, #16]
 8008f26:	e04e      	b.n	8008fc6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f34:	691a      	ldr	r2, [r3, #16]
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	0159      	lsls	r1, r3, #5
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	440b      	add	r3, r1
 8008f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f42:	4619      	mov	r1, r3
 8008f44:	4b7f      	ldr	r3, [pc, #508]	; (8009144 <USB_EP0StartXfer+0x2ac>)
 8008f46:	4013      	ands	r3, r2
 8008f48:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	691a      	ldr	r2, [r3, #16]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	0159      	lsls	r1, r3, #5
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	440b      	add	r3, r1
 8008f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f64:	4619      	mov	r1, r3
 8008f66:	4b76      	ldr	r3, [pc, #472]	; (8009140 <USB_EP0StartXfer+0x2a8>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	695a      	ldr	r2, [r3, #20]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d903      	bls.n	8008f80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fb6:	6939      	ldr	r1, [r7, #16]
 8008fb8:	0148      	lsls	r0, r1, #5
 8008fba:	6979      	ldr	r1, [r7, #20]
 8008fbc:	4401      	add	r1, r0
 8008fbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d11e      	bne.n	800900a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d009      	beq.n	8008fe8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009002:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	e092      	b.n	8009130 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	440a      	add	r2, r1
 8009020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009024:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009028:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d07e      	beq.n	8009130 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	2101      	movs	r1, #1
 8009044:	fa01 f303 	lsl.w	r3, r1, r3
 8009048:	6979      	ldr	r1, [r7, #20]
 800904a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800904e:	4313      	orrs	r3, r2
 8009050:	634b      	str	r3, [r1, #52]	; 0x34
 8009052:	e06d      	b.n	8009130 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	0159      	lsls	r1, r3, #5
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	440b      	add	r3, r1
 800906a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906e:	4619      	mov	r1, r3
 8009070:	4b34      	ldr	r3, [pc, #208]	; (8009144 <USB_EP0StartXfer+0x2ac>)
 8009072:	4013      	ands	r3, r2
 8009074:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	691a      	ldr	r2, [r3, #16]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	0159      	lsls	r1, r3, #5
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	440b      	add	r3, r1
 800908c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009090:	4619      	mov	r1, r3
 8009092:	4b2b      	ldr	r3, [pc, #172]	; (8009140 <USB_EP0StartXfer+0x2a8>)
 8009094:	4013      	ands	r3, r2
 8009096:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	0151      	lsls	r1, r2, #5
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	440a      	add	r2, r1
 80090be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d4:	691a      	ldr	r2, [r3, #16]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090de:	6939      	ldr	r1, [r7, #16]
 80090e0:	0148      	lsls	r0, r1, #5
 80090e2:	6979      	ldr	r1, [r7, #20]
 80090e4:	4401      	add	r1, r0
 80090e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090ea:	4313      	orrs	r3, r2
 80090ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d10d      	bne.n	8009110 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	68d9      	ldr	r1, [r3, #12]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910c:	460a      	mov	r2, r1
 800910e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	440a      	add	r2, r1
 8009126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800912a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800912e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	e007ffff 	.word	0xe007ffff
 8009144:	fff80000 	.word	0xfff80000

08009148 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009148:	b480      	push	{r7}
 800914a:	b089      	sub	sp, #36	; 0x24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	4611      	mov	r1, r2
 8009154:	461a      	mov	r2, r3
 8009156:	460b      	mov	r3, r1
 8009158:	71fb      	strb	r3, [r7, #7]
 800915a:	4613      	mov	r3, r2
 800915c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009166:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d123      	bne.n	80091b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800916e:	88bb      	ldrh	r3, [r7, #4]
 8009170:	3303      	adds	r3, #3
 8009172:	089b      	lsrs	r3, r3, #2
 8009174:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009176:	2300      	movs	r3, #0
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	e018      	b.n	80091ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	031a      	lsls	r2, r3, #12
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	4413      	add	r3, r2
 8009184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009188:	461a      	mov	r2, r3
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	3301      	adds	r3, #1
 8009194:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	3301      	adds	r3, #1
 800919a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	3301      	adds	r3, #1
 80091a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	3301      	adds	r3, #1
 80091a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	3301      	adds	r3, #1
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d3e2      	bcc.n	800917c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3724      	adds	r7, #36	; 0x24
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b08b      	sub	sp, #44	; 0x2c
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	089b      	lsrs	r3, r3, #2
 80091de:	b29b      	uxth	r3, r3
 80091e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80091e2:	88fb      	ldrh	r3, [r7, #6]
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091ea:	2300      	movs	r3, #0
 80091ec:	623b      	str	r3, [r7, #32]
 80091ee:	e014      	b.n	800921a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	3301      	adds	r3, #1
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	3301      	adds	r3, #1
 8009206:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	3301      	adds	r3, #1
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	3301      	adds	r3, #1
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	3301      	adds	r3, #1
 8009218:	623b      	str	r3, [r7, #32]
 800921a:	6a3a      	ldr	r2, [r7, #32]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	429a      	cmp	r2, r3
 8009220:	d3e6      	bcc.n	80091f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009222:	8bfb      	ldrh	r3, [r7, #30]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01e      	beq.n	8009266 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009228:	2300      	movs	r3, #0
 800922a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009232:	461a      	mov	r2, r3
 8009234:	f107 0310 	add.w	r3, r7, #16
 8009238:	6812      	ldr	r2, [r2, #0]
 800923a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	fa22 f303 	lsr.w	r3, r2, r3
 8009248:	b2da      	uxtb	r2, r3
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	701a      	strb	r2, [r3, #0]
      i++;
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	3301      	adds	r3, #1
 8009252:	623b      	str	r3, [r7, #32]
      pDest++;
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	3301      	adds	r3, #1
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800925a:	8bfb      	ldrh	r3, [r7, #30]
 800925c:	3b01      	subs	r3, #1
 800925e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009260:	8bfb      	ldrh	r3, [r7, #30]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1ea      	bne.n	800923c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009268:	4618      	mov	r0, r3
 800926a:	372c      	adds	r7, #44	; 0x2c
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	785b      	ldrb	r3, [r3, #1]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d12c      	bne.n	80092ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	db12      	blt.n	80092c8 <USB_EPSetStall+0x54>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00f      	beq.n	80092c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	0151      	lsls	r1, r2, #5
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	440a      	add	r2, r1
 80092be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	e02b      	b.n	8009342 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	db12      	blt.n	8009322 <USB_EPSetStall+0xae>
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00f      	beq.n	8009322 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009320:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	0151      	lsls	r1, r2, #5
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	440a      	add	r2, r1
 8009338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009340:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d128      	bne.n	80093be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800938a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	78db      	ldrb	r3, [r3, #3]
 8009390:	2b03      	cmp	r3, #3
 8009392:	d003      	beq.n	800939c <USB_EPClearStall+0x4c>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	78db      	ldrb	r3, [r3, #3]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d138      	bne.n	800940e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	0151      	lsls	r1, r2, #5
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	440a      	add	r2, r1
 80093b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	e027      	b.n	800940e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	78db      	ldrb	r3, [r3, #3]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d003      	beq.n	80093ee <USB_EPClearStall+0x9e>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	78db      	ldrb	r3, [r3, #3]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d10f      	bne.n	800940e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	0151      	lsls	r1, r2, #5
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	440a      	add	r2, r1
 8009404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800940c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800943a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800943e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009450:	68f9      	ldr	r1, [r7, #12]
 8009452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009456:	4313      	orrs	r3, r2
 8009458:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009482:	f023 0303 	bic.w	r3, r3, #3
 8009486:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009496:	f023 0302 	bic.w	r3, r3, #2
 800949a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094c4:	f023 0303 	bic.w	r3, r3, #3
 80094c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094d8:	f043 0302 	orr.w	r3, r3, #2
 80094dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4013      	ands	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009504:	68fb      	ldr	r3, [r7, #12]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	4013      	ands	r3, r2
 8009534:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	0c1b      	lsrs	r3, r3, #16
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	4013      	ands	r3, r2
 8009568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	b29b      	uxth	r3, r3
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800957a:	b480      	push	{r7}
 800957c:	b085      	sub	sp, #20
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	4013      	ands	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095a8:	68bb      	ldr	r3, [r7, #8]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b087      	sub	sp, #28
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	fa22 f303 	lsr.w	r3, r2, r3
 80095e6:	01db      	lsls	r3, r3, #7
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4013      	ands	r3, r2
 8009602:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009604:	68bb      	ldr	r3, [r7, #8]
}
 8009606:	4618      	mov	r0, r3
 8009608:	371c      	adds	r7, #28
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	f003 0301 	and.w	r3, r3, #1
}
 8009622:	4618      	mov	r0, r3
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964a:	4619      	mov	r1, r3
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <USB_ActivateSetup+0x44>)
 800964e:	4013      	ands	r3, r2
 8009650:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009664:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	fffff800 	.word	0xfffff800

08009678 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	460b      	mov	r3, r1
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	333c      	adds	r3, #60	; 0x3c
 800968e:	3304      	adds	r3, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	4a26      	ldr	r2, [pc, #152]	; (8009730 <USB_EP0_OutStart+0xb8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d90a      	bls.n	80096b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096ac:	d101      	bne.n	80096b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	e037      	b.n	8009722 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	461a      	mov	r2, r3
 80096ba:	2300      	movs	r3, #0
 80096bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e0:	f043 0318 	orr.w	r3, r3, #24
 80096e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80096f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d10f      	bne.n	8009720 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800971a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800971e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	4f54300a 	.word	0x4f54300a

08009734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800973c:	2300      	movs	r3, #0
 800973e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3301      	adds	r3, #1
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	4a13      	ldr	r2, [pc, #76]	; (8009794 <USB_CoreReset+0x60>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d901      	bls.n	8009750 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e01a      	b.n	8009786 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	daf3      	bge.n	8009740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f043 0201 	orr.w	r2, r3, #1
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <USB_CoreReset+0x60>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d901      	bls.n	8009778 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e006      	b.n	8009786 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b01      	cmp	r3, #1
 8009782:	d0f1      	beq.n	8009768 <USB_CoreReset+0x34>

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	00030d40 	.word	0x00030d40

08009798 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800979c:	4904      	ldr	r1, [pc, #16]	; (80097b0 <MX_FATFS_Init+0x18>)
 800979e:	4805      	ldr	r0, [pc, #20]	; (80097b4 <MX_FATFS_Init+0x1c>)
 80097a0:	f000 fa6e 	bl	8009c80 <FATFS_LinkDriver>
 80097a4:	4603      	mov	r3, r0
 80097a6:	461a      	mov	r2, r3
 80097a8:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <MX_FATFS_Init+0x20>)
 80097aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80097ac:	bf00      	nop
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	200007e0 	.word	0x200007e0
 80097b4:	0801097c 	.word	0x0801097c
 80097b8:	200007dc 	.word	0x200007dc

080097bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80097c6:	f000 f87b 	bl	80098c0 <BSP_SD_IsDetected>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d001      	beq.n	80097d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80097d0:	2302      	movs	r3, #2
 80097d2:	e012      	b.n	80097fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80097d4:	480b      	ldr	r0, [pc, #44]	; (8009804 <BSP_SD_Init+0x48>)
 80097d6:	f7fb f8e7 	bl	80049a8 <HAL_SD_Init>
 80097da:	4603      	mov	r3, r0
 80097dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d109      	bne.n	80097f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80097e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097e8:	4806      	ldr	r0, [pc, #24]	; (8009804 <BSP_SD_Init+0x48>)
 80097ea:	f7fb fd37 	bl	800525c <HAL_SD_ConfigWideBusOperation>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80097f8:	79fb      	ldrb	r3, [r7, #7]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	200002b0 	.word	0x200002b0

08009808 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	68f9      	ldr	r1, [r7, #12]
 800981e:	4806      	ldr	r0, [pc, #24]	; (8009838 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009820:	f7fb f97a 	bl	8004b18 <HAL_SD_ReadBlocks_DMA>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800982e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	200002b0 	.word	0x200002b0

0800983c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	68f9      	ldr	r1, [r7, #12]
 8009852:	4806      	ldr	r0, [pc, #24]	; (800986c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009854:	f7fb fa42 	bl	8004cdc <HAL_SD_WriteBlocks_DMA>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	200002b0 	.word	0x200002b0

08009870 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009874:	4805      	ldr	r0, [pc, #20]	; (800988c <BSP_SD_GetCardState+0x1c>)
 8009876:	f7fb fd8b 	bl	8005390 <HAL_SD_GetCardState>
 800987a:	4603      	mov	r3, r0
 800987c:	2b04      	cmp	r3, #4
 800987e:	bf14      	ite	ne
 8009880:	2301      	movne	r3, #1
 8009882:	2300      	moveq	r3, #0
 8009884:	b2db      	uxtb	r3, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	200002b0 	.word	0x200002b0

08009890 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	4803      	ldr	r0, [pc, #12]	; (80098a8 <BSP_SD_GetCardInfo+0x18>)
 800989c:	f7fb fcb2 	bl	8005204 <HAL_SD_GetCardInfo>
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	200002b0 	.word	0x200002b0

080098ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80098b4:	f000 f986 	bl	8009bc4 <BSP_SD_ReadCpltCallback>
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80098c6:	2301      	movs	r3, #1
 80098c8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	b2db      	uxtb	r3, r3
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80098e2:	f000 fa6f 	bl	8009dc4 <osKernelGetTickCount>
 80098e6:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80098e8:	e006      	b.n	80098f8 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80098ea:	f7ff ffc1 	bl	8009870 <BSP_SD_GetCardState>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	e009      	b.n	800990c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80098f8:	f000 fa64 	bl	8009dc4 <osKernelGetTickCount>
 80098fc:	4602      	mov	r2, r0
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	d8f0      	bhi.n	80098ea <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800991e:	4b0b      	ldr	r3, [pc, #44]	; (800994c <SD_CheckStatus+0x38>)
 8009920:	2201      	movs	r2, #1
 8009922:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009924:	f7ff ffa4 	bl	8009870 <BSP_SD_GetCardState>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d107      	bne.n	800993e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800992e:	4b07      	ldr	r3, [pc, #28]	; (800994c <SD_CheckStatus+0x38>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f023 0301 	bic.w	r3, r3, #1
 8009938:	b2da      	uxtb	r2, r3
 800993a:	4b04      	ldr	r3, [pc, #16]	; (800994c <SD_CheckStatus+0x38>)
 800993c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800993e:	4b03      	ldr	r3, [pc, #12]	; (800994c <SD_CheckStatus+0x38>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	b2db      	uxtb	r3, r3
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000009 	.word	0x20000009

08009950 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800995a:	4b1c      	ldr	r3, [pc, #112]	; (80099cc <SD_initialize+0x7c>)
 800995c:	2201      	movs	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009960:	f000 f9d8 	bl	8009d14 <osKernelGetState>
 8009964:	4603      	mov	r3, r0
 8009966:	2b02      	cmp	r3, #2
 8009968:	d129      	bne.n	80099be <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800996a:	f7ff ff27 	bl	80097bc <BSP_SD_Init>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d107      	bne.n	8009984 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff ffcc 	bl	8009914 <SD_CheckStatus>
 800997c:	4603      	mov	r3, r0
 800997e:	461a      	mov	r2, r3
 8009980:	4b12      	ldr	r3, [pc, #72]	; (80099cc <SD_initialize+0x7c>)
 8009982:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009984:	4b11      	ldr	r3, [pc, #68]	; (80099cc <SD_initialize+0x7c>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b01      	cmp	r3, #1
 800998c:	d017      	beq.n	80099be <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800998e:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <SD_initialize+0x80>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d107      	bne.n	80099a6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009996:	2200      	movs	r2, #0
 8009998:	2102      	movs	r1, #2
 800999a:	200a      	movs	r0, #10
 800999c:	f000 fb0e 	bl	8009fbc <osMessageQueueNew>
 80099a0:	4603      	mov	r3, r0
 80099a2:	4a0b      	ldr	r2, [pc, #44]	; (80099d0 <SD_initialize+0x80>)
 80099a4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80099a6:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <SD_initialize+0x80>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d107      	bne.n	80099be <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80099ae:	4b07      	ldr	r3, [pc, #28]	; (80099cc <SD_initialize+0x7c>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f043 0301 	orr.w	r3, r3, #1
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <SD_initialize+0x7c>)
 80099bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80099be:	4b03      	ldr	r3, [pc, #12]	; (80099cc <SD_initialize+0x7c>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b2db      	uxtb	r3, r3
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	20000009 	.word	0x20000009
 80099d0:	200007e4 	.word	0x200007e4

080099d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff ff97 	bl	8009914 <SD_CheckStatus>
 80099e6:	4603      	mov	r3, r0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	607a      	str	r2, [r7, #4]
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a04:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a08:	f7ff ff67 	bl	80098da <SD_CheckStatusWithTimeout>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da01      	bge.n	8009a16 <SD_read+0x26>
  {
    return res;
 8009a12:	7ffb      	ldrb	r3, [r7, #31]
 8009a14:	e02f      	b.n	8009a76 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	68b8      	ldr	r0, [r7, #8]
 8009a1c:	f7ff fef4 	bl	8009808 <BSP_SD_ReadBlocks_DMA>
 8009a20:	4603      	mov	r3, r0
 8009a22:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009a24:	7fbb      	ldrb	r3, [r7, #30]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d124      	bne.n	8009a74 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009a2a:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <SD_read+0x90>)
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f107 0112 	add.w	r1, r7, #18
 8009a32:	f247 5330 	movw	r3, #30000	; 0x7530
 8009a36:	2200      	movs	r2, #0
 8009a38:	f000 fbba 	bl	800a1b0 <osMessageQueueGet>
 8009a3c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d117      	bne.n	8009a74 <SD_read+0x84>
 8009a44:	8a7b      	ldrh	r3, [r7, #18]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d114      	bne.n	8009a74 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009a4a:	f000 f9bb 	bl	8009dc4 <osKernelGetTickCount>
 8009a4e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009a50:	e007      	b.n	8009a62 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a52:	f7ff ff0d 	bl	8009870 <BSP_SD_GetCardState>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <SD_read+0x72>
              {
                res = RES_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009a60:	e008      	b.n	8009a74 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009a62:	f000 f9af 	bl	8009dc4 <osKernelGetTickCount>
 8009a66:	4602      	mov	r2, r0
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d9ee      	bls.n	8009a52 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3720      	adds	r7, #32
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	200007e4 	.word	0x200007e4

08009a84 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a98:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a9c:	f7ff ff1d 	bl	80098da <SD_CheckStatusWithTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	da01      	bge.n	8009aaa <SD_write+0x26>
  {
    return res;
 8009aa6:	7ffb      	ldrb	r3, [r7, #31]
 8009aa8:	e02d      	b.n	8009b06 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	68b8      	ldr	r0, [r7, #8]
 8009ab0:	f7ff fec4 	bl	800983c <BSP_SD_WriteBlocks_DMA>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d124      	bne.n	8009b04 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009aba:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <SD_write+0x8c>)
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	f107 0112 	add.w	r1, r7, #18
 8009ac2:	f247 5330 	movw	r3, #30000	; 0x7530
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f000 fb72 	bl	800a1b0 <osMessageQueueGet>
 8009acc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d117      	bne.n	8009b04 <SD_write+0x80>
 8009ad4:	8a7b      	ldrh	r3, [r7, #18]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d114      	bne.n	8009b04 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009ada:	f000 f973 	bl	8009dc4 <osKernelGetTickCount>
 8009ade:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009ae0:	e007      	b.n	8009af2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ae2:	f7ff fec5 	bl	8009870 <BSP_SD_GetCardState>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <SD_write+0x6e>
          {
            res = RES_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	77fb      	strb	r3, [r7, #31]
            break;
 8009af0:	e008      	b.n	8009b04 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009af2:	f000 f967 	bl	8009dc4 <osKernelGetTickCount>
 8009af6:	4602      	mov	r2, r0
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d9ee      	bls.n	8009ae2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3720      	adds	r7, #32
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	200007e4 	.word	0x200007e4

08009b14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08c      	sub	sp, #48	; 0x30
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	603a      	str	r2, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
 8009b20:	460b      	mov	r3, r1
 8009b22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009b2a:	4b25      	ldr	r3, [pc, #148]	; (8009bc0 <SD_ioctl+0xac>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <SD_ioctl+0x28>
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e03c      	b.n	8009bb6 <SD_ioctl+0xa2>

  switch (cmd)
 8009b3c:	79bb      	ldrb	r3, [r7, #6]
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d834      	bhi.n	8009bac <SD_ioctl+0x98>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <SD_ioctl+0x34>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b59 	.word	0x08009b59
 8009b4c:	08009b61 	.word	0x08009b61
 8009b50:	08009b79 	.word	0x08009b79
 8009b54:	08009b93 	.word	0x08009b93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b5e:	e028      	b.n	8009bb2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b60:	f107 030c 	add.w	r3, r7, #12
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff fe93 	bl	8009890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b76:	e01c      	b.n	8009bb2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b78:	f107 030c 	add.w	r3, r7, #12
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fe87 	bl	8009890 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b90:	e00f      	b.n	8009bb2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b92:	f107 030c 	add.w	r3, r7, #12
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fe7a 	bl	8009890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	0a5a      	lsrs	r2, r3, #9
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009baa:	e002      	b.n	8009bb2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009bac:	2304      	movs	r3, #4
 8009bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3730      	adds	r7, #48	; 0x30
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000009 	.word	0x20000009

08009bc4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009bce:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <BSP_SD_ReadCpltCallback+0x20>)
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	1db9      	adds	r1, r7, #6
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f000 fa76 	bl	800a0c8 <osMessageQueuePut>
#endif
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	200007e4 	.word	0x200007e4

08009be8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009bfe:	4b1f      	ldr	r3, [pc, #124]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c00:	7a5b      	ldrb	r3, [r3, #9]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d131      	bne.n	8009c6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c08:	4b1c      	ldr	r3, [pc, #112]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c0a:	7a5b      	ldrb	r3, [r3, #9]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c12:	2100      	movs	r1, #0
 8009c14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c16:	4b19      	ldr	r3, [pc, #100]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c18:	7a5b      	ldrb	r3, [r3, #9]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	4a17      	ldr	r2, [pc, #92]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c26:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c28:	7a5b      	ldrb	r3, [r3, #9]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c30:	4413      	add	r3, r2
 8009c32:	79fa      	ldrb	r2, [r7, #7]
 8009c34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c36:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c38:	7a5b      	ldrb	r3, [r3, #9]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	b2d1      	uxtb	r1, r2
 8009c40:	4a0e      	ldr	r2, [pc, #56]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c42:	7251      	strb	r1, [r2, #9]
 8009c44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c46:	7dbb      	ldrb	r3, [r7, #22]
 8009c48:	3330      	adds	r3, #48	; 0x30
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	3301      	adds	r3, #1
 8009c54:	223a      	movs	r2, #58	; 0x3a
 8009c56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	222f      	movs	r2, #47	; 0x2f
 8009c5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	3303      	adds	r3, #3
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	371c      	adds	r7, #28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	200007e8 	.word	0x200007e8

08009c80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ffaa 	bl	8009be8 <FATFS_LinkDriverEx>
 8009c94:	4603      	mov	r3, r0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c9e:	b480      	push	{r7}
 8009ca0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009ca2:	bf00      	nop
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cb2:	f3ef 8305 	mrs	r3, IPSR
 8009cb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10f      	bne.n	8009cde <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8009cc2:	607b      	str	r3, [r7, #4]
  return(result);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d105      	bne.n	8009cd6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cca:	f3ef 8311 	mrs	r3, BASEPRI
 8009cce:	603b      	str	r3, [r7, #0]
  return(result);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d007      	beq.n	8009ce6 <osKernelInitialize+0x3a>
 8009cd6:	4b0e      	ldr	r3, [pc, #56]	; (8009d10 <osKernelInitialize+0x64>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d103      	bne.n	8009ce6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009cde:	f06f 0305 	mvn.w	r3, #5
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	e00c      	b.n	8009d00 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ce6:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <osKernelInitialize+0x64>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009cee:	4b08      	ldr	r3, [pc, #32]	; (8009d10 <osKernelInitialize+0x64>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	e002      	b.n	8009d00 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d00:	68fb      	ldr	r3, [r7, #12]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	200007f4 	.word	0x200007f4

08009d14 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009d1a:	f002 fbe5 	bl	800c4e8 <xTaskGetSchedulerState>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <osKernelGetState+0x1a>
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d105      	bne.n	8009d34 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	607b      	str	r3, [r7, #4]
      break;
 8009d2c:	e00c      	b.n	8009d48 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	607b      	str	r3, [r7, #4]
      break;
 8009d32:	e009      	b.n	8009d48 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009d34:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <osKernelGetState+0x40>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d102      	bne.n	8009d42 <osKernelGetState+0x2e>
        state = osKernelReady;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009d40:	e001      	b.n	8009d46 <osKernelGetState+0x32>
        state = osKernelInactive;
 8009d42:	2300      	movs	r3, #0
 8009d44:	607b      	str	r3, [r7, #4]
      break;
 8009d46:	bf00      	nop
  }

  return (state);
 8009d48:	687b      	ldr	r3, [r7, #4]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200007f4 	.word	0x200007f4

08009d58 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d5e:	f3ef 8305 	mrs	r3, IPSR
 8009d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10f      	bne.n	8009d8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d6e:	607b      	str	r3, [r7, #4]
  return(result);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d105      	bne.n	8009d82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d76:	f3ef 8311 	mrs	r3, BASEPRI
 8009d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <osKernelStart+0x3a>
 8009d82:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <osKernelStart+0x68>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d103      	bne.n	8009d92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009d8a:	f06f 0305 	mvn.w	r3, #5
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	e010      	b.n	8009db4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d92:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <osKernelStart+0x68>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d109      	bne.n	8009dae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d9a:	f7ff ff80 	bl	8009c9e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d9e:	4b08      	ldr	r3, [pc, #32]	; (8009dc0 <osKernelStart+0x68>)
 8009da0:	2202      	movs	r2, #2
 8009da2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009da4:	f001 ff30 	bl	800bc08 <vTaskStartScheduler>
      stat = osOK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	e002      	b.n	8009db4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009db4:	68fb      	ldr	r3, [r7, #12]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	200007f4 	.word	0x200007f4

08009dc4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dca:	f3ef 8305 	mrs	r3, IPSR
 8009dce:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10f      	bne.n	8009df6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dda:	607b      	str	r3, [r7, #4]
  return(result);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009de2:	f3ef 8311 	mrs	r3, BASEPRI
 8009de6:	603b      	str	r3, [r7, #0]
  return(result);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d007      	beq.n	8009dfe <osKernelGetTickCount+0x3a>
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <osKernelGetTickCount+0x4c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d103      	bne.n	8009dfe <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009df6:	f002 f82f 	bl	800be58 <xTaskGetTickCountFromISR>
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	e002      	b.n	8009e04 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009dfe:	f002 f81b 	bl	800be38 <xTaskGetTickCount>
 8009e02:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009e04:	68fb      	ldr	r3, [r7, #12]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200007f4 	.word	0x200007f4

08009e14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b090      	sub	sp, #64	; 0x40
 8009e18:	af04      	add	r7, sp, #16
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e24:	f3ef 8305 	mrs	r3, IPSR
 8009e28:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e2a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f040 808f 	bne.w	8009f50 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e32:	f3ef 8310 	mrs	r3, PRIMASK
 8009e36:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d105      	bne.n	8009e4a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8009e42:	617b      	str	r3, [r7, #20]
  return(result);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <osThreadNew+0x3e>
 8009e4a:	4b44      	ldr	r3, [pc, #272]	; (8009f5c <osThreadNew+0x148>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d07e      	beq.n	8009f50 <osThreadNew+0x13c>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d07b      	beq.n	8009f50 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009e58:	2380      	movs	r3, #128	; 0x80
 8009e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009e5c:	2318      	movs	r3, #24
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009e64:	f04f 33ff 	mov.w	r3, #4294967295
 8009e68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d045      	beq.n	8009efc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <osThreadNew+0x6a>
        name = attr->name;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d008      	beq.n	8009ea4 <osThreadNew+0x90>
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	2b38      	cmp	r3, #56	; 0x38
 8009e96:	d805      	bhi.n	8009ea4 <osThreadNew+0x90>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <osThreadNew+0x94>
        return (NULL);
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	e054      	b.n	8009f52 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	089b      	lsrs	r3, r3, #2
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00e      	beq.n	8009ede <osThreadNew+0xca>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	2b5b      	cmp	r3, #91	; 0x5b
 8009ec6:	d90a      	bls.n	8009ede <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d006      	beq.n	8009ede <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <osThreadNew+0xca>
        mem = 1;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	623b      	str	r3, [r7, #32]
 8009edc:	e010      	b.n	8009f00 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10c      	bne.n	8009f00 <osThreadNew+0xec>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d108      	bne.n	8009f00 <osThreadNew+0xec>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d104      	bne.n	8009f00 <osThreadNew+0xec>
          mem = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	623b      	str	r3, [r7, #32]
 8009efa:	e001      	b.n	8009f00 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d110      	bne.n	8009f28 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f0e:	9202      	str	r2, [sp, #8]
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f001 fc93 	bl	800b848 <xTaskCreateStatic>
 8009f22:	4603      	mov	r3, r0
 8009f24:	613b      	str	r3, [r7, #16]
 8009f26:	e013      	b.n	8009f50 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d110      	bne.n	8009f50 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	f107 0310 	add.w	r3, r7, #16
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f001 fce4 	bl	800b90e <xTaskCreate>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d001      	beq.n	8009f50 <osThreadNew+0x13c>
          hTask = NULL;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f50:	693b      	ldr	r3, [r7, #16]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3730      	adds	r7, #48	; 0x30
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	200007f4 	.word	0x200007f4

08009f60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f68:	f3ef 8305 	mrs	r3, IPSR
 8009f6c:	613b      	str	r3, [r7, #16]
  return(result);
 8009f6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10f      	bne.n	8009f94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f74:	f3ef 8310 	mrs	r3, PRIMASK
 8009f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d105      	bne.n	8009f8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f80:	f3ef 8311 	mrs	r3, BASEPRI
 8009f84:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d007      	beq.n	8009f9c <osDelay+0x3c>
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <osDelay+0x58>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d103      	bne.n	8009f9c <osDelay+0x3c>
    stat = osErrorISR;
 8009f94:	f06f 0305 	mvn.w	r3, #5
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	e007      	b.n	8009fac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <osDelay+0x4c>
      vTaskDelay(ticks);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fdf8 	bl	800bb9c <vTaskDelay>
    }
  }

  return (stat);
 8009fac:	697b      	ldr	r3, [r7, #20]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200007f4 	.word	0x200007f4

08009fbc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08c      	sub	sp, #48	; 0x30
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fcc:	f3ef 8305 	mrs	r3, IPSR
 8009fd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009fd2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d16f      	bne.n	800a0b8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fdc:	617b      	str	r3, [r7, #20]
  return(result);
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d105      	bne.n	8009ff0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8009fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <osMessageQueueNew+0x3c>
 8009ff0:	4b34      	ldr	r3, [pc, #208]	; (800a0c4 <osMessageQueueNew+0x108>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d05f      	beq.n	800a0b8 <osMessageQueueNew+0xfc>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d05c      	beq.n	800a0b8 <osMessageQueueNew+0xfc>
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d059      	beq.n	800a0b8 <osMessageQueueNew+0xfc>
    mem = -1;
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d029      	beq.n	800a064 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d012      	beq.n	800a03e <osMessageQueueNew+0x82>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	2b4f      	cmp	r3, #79	; 0x4f
 800a01e:	d90e      	bls.n	800a03e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00a      	beq.n	800a03e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	695a      	ldr	r2, [r3, #20]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	fb01 f303 	mul.w	r3, r1, r3
 800a034:	429a      	cmp	r2, r3
 800a036:	d302      	bcc.n	800a03e <osMessageQueueNew+0x82>
        mem = 1;
 800a038:	2301      	movs	r3, #1
 800a03a:	623b      	str	r3, [r7, #32]
 800a03c:	e014      	b.n	800a068 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d110      	bne.n	800a068 <osMessageQueueNew+0xac>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10c      	bne.n	800a068 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a052:	2b00      	cmp	r3, #0
 800a054:	d108      	bne.n	800a068 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d104      	bne.n	800a068 <osMessageQueueNew+0xac>
          mem = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	623b      	str	r3, [r7, #32]
 800a062:	e001      	b.n	800a068 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d10b      	bne.n	800a086 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	2100      	movs	r1, #0
 800a078:	9100      	str	r1, [sp, #0]
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 fe7b 	bl	800ad78 <xQueueGenericCreateStatic>
 800a082:	6278      	str	r0, [r7, #36]	; 0x24
 800a084:	e008      	b.n	800a098 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d105      	bne.n	800a098 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a08c:	2200      	movs	r2, #0
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 fef3 	bl	800ae7c <xQueueGenericCreate>
 800a096:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00c      	beq.n	800a0b8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <osMessageQueueNew+0xf0>
        name = attr->name;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	61fb      	str	r3, [r7, #28]
 800a0aa:	e001      	b.n	800a0b0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a0b0:	69f9      	ldr	r1, [r7, #28]
 800a0b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0b4:	f001 fb6a 	bl	800b78c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3728      	adds	r7, #40	; 0x28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200007f4 	.word	0x200007f4

0800a0c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08a      	sub	sp, #40	; 0x28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0e0:	f3ef 8305 	mrs	r3, IPSR
 800a0e4:	61fb      	str	r3, [r7, #28]
  return(result);
 800a0e6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10f      	bne.n	800a10c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d105      	bne.n	800a104 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a0fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d02c      	beq.n	800a15e <osMessageQueuePut+0x96>
 800a104:	4b28      	ldr	r3, [pc, #160]	; (800a1a8 <osMessageQueuePut+0xe0>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d128      	bne.n	800a15e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <osMessageQueuePut+0x56>
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <osMessageQueuePut+0x56>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a11e:	f06f 0303 	mvn.w	r3, #3
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a124:	e039      	b.n	800a19a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a126:	2300      	movs	r3, #0
 800a128:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a12a:	f107 0210 	add.w	r2, r7, #16
 800a12e:	2300      	movs	r3, #0
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	6a38      	ldr	r0, [r7, #32]
 800a134:	f001 f80e 	bl	800b154 <xQueueGenericSendFromISR>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d003      	beq.n	800a146 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a13e:	f06f 0302 	mvn.w	r3, #2
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a144:	e029      	b.n	800a19a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d026      	beq.n	800a19a <osMessageQueuePut+0xd2>
 800a14c:	4b17      	ldr	r3, [pc, #92]	; (800a1ac <osMessageQueuePut+0xe4>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a15c:	e01d      	b.n	800a19a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <osMessageQueuePut+0xa2>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d103      	bne.n	800a172 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a16a:	f06f 0303 	mvn.w	r3, #3
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
 800a170:	e014      	b.n	800a19c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a172:	2300      	movs	r3, #0
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	68b9      	ldr	r1, [r7, #8]
 800a178:	6a38      	ldr	r0, [r7, #32]
 800a17a:	f000 fee5 	bl	800af48 <xQueueGenericSend>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b01      	cmp	r3, #1
 800a182:	d00b      	beq.n	800a19c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a18a:	f06f 0301 	mvn.w	r3, #1
 800a18e:	627b      	str	r3, [r7, #36]	; 0x24
 800a190:	e004      	b.n	800a19c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a192:	f06f 0302 	mvn.w	r3, #2
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
 800a198:	e000      	b.n	800a19c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a19a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3728      	adds	r7, #40	; 0x28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200007f4 	.word	0x200007f4
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08a      	sub	sp, #40	; 0x28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c6:	f3ef 8305 	mrs	r3, IPSR
 800a1ca:	61fb      	str	r3, [r7, #28]
  return(result);
 800a1cc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10f      	bne.n	800a1f2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d6:	61bb      	str	r3, [r7, #24]
  return(result);
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1de:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e2:	617b      	str	r3, [r7, #20]
  return(result);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d02c      	beq.n	800a244 <osMessageQueueGet+0x94>
 800a1ea:	4b28      	ldr	r3, [pc, #160]	; (800a28c <osMessageQueueGet+0xdc>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d128      	bne.n	800a244 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <osMessageQueueGet+0x54>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <osMessageQueueGet+0x54>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a204:	f06f 0303 	mvn.w	r3, #3
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a20a:	e038      	b.n	800a27e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a210:	f107 0310 	add.w	r3, r7, #16
 800a214:	461a      	mov	r2, r3
 800a216:	68b9      	ldr	r1, [r7, #8]
 800a218:	6a38      	ldr	r0, [r7, #32]
 800a21a:	f001 f921 	bl	800b460 <xQueueReceiveFromISR>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b01      	cmp	r3, #1
 800a222:	d003      	beq.n	800a22c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a224:	f06f 0302 	mvn.w	r3, #2
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a22a:	e028      	b.n	800a27e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d025      	beq.n	800a27e <osMessageQueueGet+0xce>
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <osMessageQueueGet+0xe0>)
 800a234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a242:	e01c      	b.n	800a27e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <osMessageQueueGet+0xa0>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a250:	f06f 0303 	mvn.w	r3, #3
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
 800a256:	e013      	b.n	800a280 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a258:	683a      	ldr	r2, [r7, #0]
 800a25a:	68b9      	ldr	r1, [r7, #8]
 800a25c:	6a38      	ldr	r0, [r7, #32]
 800a25e:	f001 f819 	bl	800b294 <xQueueReceive>
 800a262:	4603      	mov	r3, r0
 800a264:	2b01      	cmp	r3, #1
 800a266:	d00b      	beq.n	800a280 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a26e:	f06f 0301 	mvn.w	r3, #1
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
 800a274:	e004      	b.n	800a280 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a276:	f06f 0302 	mvn.w	r3, #2
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
 800a27c:	e000      	b.n	800a280 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a27e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a282:	4618      	mov	r0, r3
 800a284:	3728      	adds	r7, #40	; 0x28
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	200007f4 	.word	0x200007f4
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <vApplicationGetIdleTaskMemory+0x30>)
 800a2aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2280      	movs	r2, #128	; 0x80
 800a2b0:	601a      	str	r2, [r3, #0]
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	200007f8 	.word	0x200007f8
 800a2c4:	20000854 	.word	0x20000854

0800a2c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a07      	ldr	r2, [pc, #28]	; (800a2f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	4a06      	ldr	r2, [pc, #24]	; (800a2f8 <vApplicationGetTimerTaskMemory+0x30>)
 800a2de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e6:	601a      	str	r2, [r3, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20000a54 	.word	0x20000a54
 800a2f8:	20000ab0 	.word	0x20000ab0

0800a2fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	; 0x28
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a304:	2300      	movs	r3, #0
 800a306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a308:	f001 fce8 	bl	800bcdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a30c:	4b5b      	ldr	r3, [pc, #364]	; (800a47c <pvPortMalloc+0x180>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a314:	f000 f91a 	bl	800a54c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a318:	4b59      	ldr	r3, [pc, #356]	; (800a480 <pvPortMalloc+0x184>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4013      	ands	r3, r2
 800a320:	2b00      	cmp	r3, #0
 800a322:	f040 8092 	bne.w	800a44a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01f      	beq.n	800a36c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a32c:	2208      	movs	r2, #8
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4413      	add	r3, r2
 800a332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d016      	beq.n	800a36c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f023 0307 	bic.w	r3, r3, #7
 800a344:	3308      	adds	r3, #8
 800a346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00c      	beq.n	800a36c <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	b672      	cpsid	i
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	b662      	cpsie	i
 800a366:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d06b      	beq.n	800a44a <pvPortMalloc+0x14e>
 800a372:	4b44      	ldr	r3, [pc, #272]	; (800a484 <pvPortMalloc+0x188>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d866      	bhi.n	800a44a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a37c:	4b42      	ldr	r3, [pc, #264]	; (800a488 <pvPortMalloc+0x18c>)
 800a37e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a380:	4b41      	ldr	r3, [pc, #260]	; (800a488 <pvPortMalloc+0x18c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a386:	e004      	b.n	800a392 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d903      	bls.n	800a3a4 <pvPortMalloc+0xa8>
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1f1      	bne.n	800a388 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3a4:	4b35      	ldr	r3, [pc, #212]	; (800a47c <pvPortMalloc+0x180>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d04d      	beq.n	800a44a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2208      	movs	r2, #8
 800a3b4:	4413      	add	r3, r2
 800a3b6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	1ad2      	subs	r2, r2, r3
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d921      	bls.n	800a414 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	f003 0307 	and.w	r3, r3, #7
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00c      	beq.n	800a3fc <pvPortMalloc+0x100>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	b672      	cpsid	i
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	b662      	cpsie	i
 800a3f6:	613b      	str	r3, [r7, #16]
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	1ad2      	subs	r2, r2, r3
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a40e:	69b8      	ldr	r0, [r7, #24]
 800a410:	f000 f8fe 	bl	800a610 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a414:	4b1b      	ldr	r3, [pc, #108]	; (800a484 <pvPortMalloc+0x188>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	4a19      	ldr	r2, [pc, #100]	; (800a484 <pvPortMalloc+0x188>)
 800a420:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a422:	4b18      	ldr	r3, [pc, #96]	; (800a484 <pvPortMalloc+0x188>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b19      	ldr	r3, [pc, #100]	; (800a48c <pvPortMalloc+0x190>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d203      	bcs.n	800a436 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a42e:	4b15      	ldr	r3, [pc, #84]	; (800a484 <pvPortMalloc+0x188>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a16      	ldr	r2, [pc, #88]	; (800a48c <pvPortMalloc+0x190>)
 800a434:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	4b11      	ldr	r3, [pc, #68]	; (800a480 <pvPortMalloc+0x184>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	431a      	orrs	r2, r3
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a44a:	f001 fc55 	bl	800bcf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	f003 0307 	and.w	r3, r3, #7
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00c      	beq.n	800a472 <pvPortMalloc+0x176>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	b672      	cpsid	i
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	b662      	cpsie	i
 800a46c:	60fb      	str	r3, [r7, #12]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <pvPortMalloc+0x174>
	return pvReturn;
 800a472:	69fb      	ldr	r3, [r7, #28]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3728      	adds	r7, #40	; 0x28
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	20004ab8 	.word	0x20004ab8
 800a480:	20004ac4 	.word	0x20004ac4
 800a484:	20004abc 	.word	0x20004abc
 800a488:	20004ab0 	.word	0x20004ab0
 800a48c:	20004ac0 	.word	0x20004ac0

0800a490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d04c      	beq.n	800a53c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4a2:	2308      	movs	r3, #8
 800a4a4:	425b      	negs	r3, r3
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	4b23      	ldr	r3, [pc, #140]	; (800a544 <vPortFree+0xb4>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10c      	bne.n	800a4d8 <vPortFree+0x48>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	b672      	cpsid	i
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	b662      	cpsie	i
 800a4d2:	60fb      	str	r3, [r7, #12]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00c      	beq.n	800a4fa <vPortFree+0x6a>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	b672      	cpsid	i
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	b662      	cpsie	i
 800a4f4:	60bb      	str	r3, [r7, #8]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	4b11      	ldr	r3, [pc, #68]	; (800a544 <vPortFree+0xb4>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4013      	ands	r3, r2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d019      	beq.n	800a53c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d115      	bne.n	800a53c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <vPortFree+0xb4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	43db      	mvns	r3, r3
 800a51a:	401a      	ands	r2, r3
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a520:	f001 fbdc 	bl	800bcdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	4b07      	ldr	r3, [pc, #28]	; (800a548 <vPortFree+0xb8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4413      	add	r3, r2
 800a52e:	4a06      	ldr	r2, [pc, #24]	; (800a548 <vPortFree+0xb8>)
 800a530:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a532:	6938      	ldr	r0, [r7, #16]
 800a534:	f000 f86c 	bl	800a610 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a538:	f001 fbde 	bl	800bcf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a53c:	bf00      	nop
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20004ac4 	.word	0x20004ac4
 800a548:	20004abc 	.word	0x20004abc

0800a54c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a552:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a556:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a558:	4b27      	ldr	r3, [pc, #156]	; (800a5f8 <prvHeapInit+0xac>)
 800a55a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00c      	beq.n	800a580 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3307      	adds	r3, #7
 800a56a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f023 0307 	bic.w	r3, r3, #7
 800a572:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	4a1f      	ldr	r2, [pc, #124]	; (800a5f8 <prvHeapInit+0xac>)
 800a57c:	4413      	add	r3, r2
 800a57e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a584:	4a1d      	ldr	r2, [pc, #116]	; (800a5fc <prvHeapInit+0xb0>)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a58a:	4b1c      	ldr	r3, [pc, #112]	; (800a5fc <prvHeapInit+0xb0>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	4413      	add	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a598:	2208      	movs	r2, #8
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f023 0307 	bic.w	r3, r3, #7
 800a5a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4a15      	ldr	r2, [pc, #84]	; (800a600 <prvHeapInit+0xb4>)
 800a5ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5ae:	4b14      	ldr	r3, [pc, #80]	; (800a600 <prvHeapInit+0xb4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5b6:	4b12      	ldr	r3, [pc, #72]	; (800a600 <prvHeapInit+0xb4>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5cc:	4b0c      	ldr	r3, [pc, #48]	; (800a600 <prvHeapInit+0xb4>)
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a0a      	ldr	r2, [pc, #40]	; (800a604 <prvHeapInit+0xb8>)
 800a5da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	4a09      	ldr	r2, [pc, #36]	; (800a608 <prvHeapInit+0xbc>)
 800a5e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5e4:	4b09      	ldr	r3, [pc, #36]	; (800a60c <prvHeapInit+0xc0>)
 800a5e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5ea:	601a      	str	r2, [r3, #0]
}
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	20000eb0 	.word	0x20000eb0
 800a5fc:	20004ab0 	.word	0x20004ab0
 800a600:	20004ab8 	.word	0x20004ab8
 800a604:	20004ac0 	.word	0x20004ac0
 800a608:	20004abc 	.word	0x20004abc
 800a60c:	20004ac4 	.word	0x20004ac4

0800a610 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a618:	4b28      	ldr	r3, [pc, #160]	; (800a6bc <prvInsertBlockIntoFreeList+0xac>)
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e002      	b.n	800a624 <prvInsertBlockIntoFreeList+0x14>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d8f7      	bhi.n	800a61e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	4413      	add	r3, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d108      	bne.n	800a652 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	441a      	add	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	441a      	add	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d118      	bne.n	800a698 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d00d      	beq.n	800a68e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	441a      	add	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e008      	b.n	800a6a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	e003      	b.n	800a6a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d002      	beq.n	800a6ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6ae:	bf00      	nop
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	20004ab0 	.word	0x20004ab0
 800a6c0:	20004ab8 	.word	0x20004ab8

0800a6c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f103 0208 	add.w	r2, r3, #8
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f103 0208 	add.w	r2, r3, #8
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f103 0208 	add.w	r2, r3, #8
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a71e:	b480      	push	{r7}
 800a720:	b085      	sub	sp, #20
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689a      	ldr	r2, [r3, #8]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	601a      	str	r2, [r3, #0]
}
 800a75a:	bf00      	nop
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a766:	b480      	push	{r7}
 800a768:	b085      	sub	sp, #20
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77c:	d103      	bne.n	800a786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e00c      	b.n	800a7a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3308      	adds	r3, #8
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	e002      	b.n	800a794 <vListInsert+0x2e>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d2f6      	bcs.n	800a78e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	601a      	str	r2, [r3, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	6892      	ldr	r2, [r2, #8]
 800a7ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6852      	ldr	r2, [r2, #4]
 800a7f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	429a      	cmp	r2, r3
 800a802:	d103      	bne.n	800a80c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	1e5a      	subs	r2, r3, #1
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3b04      	subs	r3, #4
 800a83c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3b04      	subs	r3, #4
 800a84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f023 0201 	bic.w	r2, r3, #1
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3b04      	subs	r3, #4
 800a85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a85c:	4a0c      	ldr	r2, [pc, #48]	; (800a890 <pxPortInitialiseStack+0x64>)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3b14      	subs	r3, #20
 800a866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3b04      	subs	r3, #4
 800a872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f06f 0202 	mvn.w	r2, #2
 800a87a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	3b20      	subs	r3, #32
 800a880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a882:	68fb      	ldr	r3, [r7, #12]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	0800a895 	.word	0x0800a895

0800a894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a89e:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <prvTaskExitError+0x5c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d00c      	beq.n	800a8c2 <prvTaskExitError+0x2e>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	b672      	cpsid	i
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	b662      	cpsie	i
 800a8bc:	60fb      	str	r3, [r7, #12]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <prvTaskExitError+0x2c>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	b672      	cpsid	i
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	b662      	cpsie	i
 800a8d6:	60bb      	str	r3, [r7, #8]
}
 800a8d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8da:	bf00      	nop
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0fc      	beq.n	800a8dc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	2000000c 	.word	0x2000000c
	...

0800a900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <pxCurrentTCBConst2>)
 800a902:	6819      	ldr	r1, [r3, #0]
 800a904:	6808      	ldr	r0, [r1, #0]
 800a906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	f380 8809 	msr	PSP, r0
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f04f 0000 	mov.w	r0, #0
 800a916:	f380 8811 	msr	BASEPRI, r0
 800a91a:	4770      	bx	lr
 800a91c:	f3af 8000 	nop.w

0800a920 <pxCurrentTCBConst2>:
 800a920:	20004b10 	.word	0x20004b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a928:	4808      	ldr	r0, [pc, #32]	; (800a94c <prvPortStartFirstTask+0x24>)
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	6800      	ldr	r0, [r0, #0]
 800a92e:	f380 8808 	msr	MSP, r0
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8814 	msr	CONTROL, r0
 800a93a:	b662      	cpsie	i
 800a93c:	b661      	cpsie	f
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	df00      	svc	0
 800a948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a94a:	bf00      	nop
 800a94c:	e000ed08 	.word	0xe000ed08

0800a950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a956:	4b37      	ldr	r3, [pc, #220]	; (800aa34 <xPortStartScheduler+0xe4>)
 800a958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	22ff      	movs	r2, #255	; 0xff
 800a966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	4b2f      	ldr	r3, [pc, #188]	; (800aa38 <xPortStartScheduler+0xe8>)
 800a97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a97e:	4b2f      	ldr	r3, [pc, #188]	; (800aa3c <xPortStartScheduler+0xec>)
 800a980:	2207      	movs	r2, #7
 800a982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a984:	e009      	b.n	800a99a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a986:	4b2d      	ldr	r3, [pc, #180]	; (800aa3c <xPortStartScheduler+0xec>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	4a2b      	ldr	r2, [pc, #172]	; (800aa3c <xPortStartScheduler+0xec>)
 800a98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b80      	cmp	r3, #128	; 0x80
 800a9a4:	d0ef      	beq.n	800a986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9a6:	4b25      	ldr	r3, [pc, #148]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f1c3 0307 	rsb	r3, r3, #7
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d00c      	beq.n	800a9cc <xPortStartScheduler+0x7c>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	b672      	cpsid	i
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	b662      	cpsie	i
 800a9c6:	60bb      	str	r3, [r7, #8]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9cc:	4b1b      	ldr	r3, [pc, #108]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	4a1a      	ldr	r2, [pc, #104]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9d6:	4b19      	ldr	r3, [pc, #100]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9de:	4a17      	ldr	r2, [pc, #92]	; (800aa3c <xPortStartScheduler+0xec>)
 800a9e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9ea:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9f6:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a11      	ldr	r2, [pc, #68]	; (800aa40 <xPortStartScheduler+0xf0>)
 800a9fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa02:	f000 f8dd 	bl	800abc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa06:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <xPortStartScheduler+0xf4>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa0c:	f000 f8fc 	bl	800ac08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa10:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <xPortStartScheduler+0xf8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a0c      	ldr	r2, [pc, #48]	; (800aa48 <xPortStartScheduler+0xf8>)
 800aa16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa1c:	f7ff ff84 	bl	800a928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa20:	f001 fae8 	bl	800bff4 <vTaskSwitchContext>
	prvTaskExitError();
 800aa24:	f7ff ff36 	bl	800a894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	e000e400 	.word	0xe000e400
 800aa38:	20004ac8 	.word	0x20004ac8
 800aa3c:	20004acc 	.word	0x20004acc
 800aa40:	e000ed20 	.word	0xe000ed20
 800aa44:	2000000c 	.word	0x2000000c
 800aa48:	e000ef34 	.word	0xe000ef34

0800aa4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	b672      	cpsid	i
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	b662      	cpsie	i
 800aa66:	607b      	str	r3, [r7, #4]
}
 800aa68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa6a:	4b10      	ldr	r3, [pc, #64]	; (800aaac <vPortEnterCritical+0x60>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	4a0e      	ldr	r2, [pc, #56]	; (800aaac <vPortEnterCritical+0x60>)
 800aa72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa74:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <vPortEnterCritical+0x60>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d111      	bne.n	800aaa0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa7c:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <vPortEnterCritical+0x64>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00c      	beq.n	800aaa0 <vPortEnterCritical+0x54>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	b672      	cpsid	i
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	b662      	cpsie	i
 800aa9a:	603b      	str	r3, [r7, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <vPortEnterCritical+0x52>
	}
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	2000000c 	.word	0x2000000c
 800aab0:	e000ed04 	.word	0xe000ed04

0800aab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <vPortExitCritical+0x54>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10c      	bne.n	800aadc <vPortExitCritical+0x28>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	b672      	cpsid	i
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	b662      	cpsie	i
 800aad6:	607b      	str	r3, [r7, #4]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <vPortExitCritical+0x54>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	4a09      	ldr	r2, [pc, #36]	; (800ab08 <vPortExitCritical+0x54>)
 800aae4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aae6:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <vPortExitCritical+0x54>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <vPortExitCritical+0x46>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aaf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	2000000c 	.word	0x2000000c
 800ab0c:	00000000 	.word	0x00000000

0800ab10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab10:	f3ef 8009 	mrs	r0, PSP
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <pxCurrentTCBConst>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f01e 0f10 	tst.w	lr, #16
 800ab20:	bf08      	it	eq
 800ab22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab34:	b672      	cpsid	i
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	b662      	cpsie	i
 800ab44:	f001 fa56 	bl	800bff4 <vTaskSwitchContext>
 800ab48:	f04f 0000 	mov.w	r0, #0
 800ab4c:	f380 8811 	msr	BASEPRI, r0
 800ab50:	bc09      	pop	{r0, r3}
 800ab52:	6819      	ldr	r1, [r3, #0]
 800ab54:	6808      	ldr	r0, [r1, #0]
 800ab56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5a:	f01e 0f10 	tst.w	lr, #16
 800ab5e:	bf08      	it	eq
 800ab60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab64:	f380 8809 	msr	PSP, r0
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop

0800ab70 <pxCurrentTCBConst>:
 800ab70:	20004b10 	.word	0x20004b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop

0800ab78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	b672      	cpsid	i
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	b662      	cpsie	i
 800ab92:	607b      	str	r3, [r7, #4]
}
 800ab94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab96:	f001 f971 	bl	800be7c <xTaskIncrementTick>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <xPortSysTickHandler+0x44>)
 800aba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	2300      	movs	r3, #0
 800abaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f383 8811 	msr	BASEPRI, r3
}
 800abb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abc0:	b480      	push	{r7}
 800abc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abc4:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <vPortSetupTimerInterrupt+0x34>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abca:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <vPortSetupTimerInterrupt+0x38>)
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abd0:	4b0a      	ldr	r3, [pc, #40]	; (800abfc <vPortSetupTimerInterrupt+0x3c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a0a      	ldr	r2, [pc, #40]	; (800ac00 <vPortSetupTimerInterrupt+0x40>)
 800abd6:	fba2 2303 	umull	r2, r3, r2, r3
 800abda:	099b      	lsrs	r3, r3, #6
 800abdc:	4a09      	ldr	r2, [pc, #36]	; (800ac04 <vPortSetupTimerInterrupt+0x44>)
 800abde:	3b01      	subs	r3, #1
 800abe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abe2:	4b04      	ldr	r3, [pc, #16]	; (800abf4 <vPortSetupTimerInterrupt+0x34>)
 800abe4:	2207      	movs	r2, #7
 800abe6:	601a      	str	r2, [r3, #0]
}
 800abe8:	bf00      	nop
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	e000e010 	.word	0xe000e010
 800abf8:	e000e018 	.word	0xe000e018
 800abfc:	20000000 	.word	0x20000000
 800ac00:	10624dd3 	.word	0x10624dd3
 800ac04:	e000e014 	.word	0xe000e014

0800ac08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac18 <vPortEnableVFP+0x10>
 800ac0c:	6801      	ldr	r1, [r0, #0]
 800ac0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac12:	6001      	str	r1, [r0, #0]
 800ac14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac16:	bf00      	nop
 800ac18:	e000ed88 	.word	0xe000ed88

0800ac1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac22:	f3ef 8305 	mrs	r3, IPSR
 800ac26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b0f      	cmp	r3, #15
 800ac2c:	d916      	bls.n	800ac5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac2e:	4a19      	ldr	r2, [pc, #100]	; (800ac94 <vPortValidateInterruptPriority+0x78>)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4413      	add	r3, r2
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac38:	4b17      	ldr	r3, [pc, #92]	; (800ac98 <vPortValidateInterruptPriority+0x7c>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	7afa      	ldrb	r2, [r7, #11]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d20c      	bcs.n	800ac5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	b672      	cpsid	i
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	b662      	cpsie	i
 800ac56:	607b      	str	r3, [r7, #4]
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac5c:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <vPortValidateInterruptPriority+0x80>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac64:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <vPortValidateInterruptPriority+0x84>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d90c      	bls.n	800ac86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	b672      	cpsid	i
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	b662      	cpsie	i
 800ac80:	603b      	str	r3, [r7, #0]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <vPortValidateInterruptPriority+0x68>
	}
 800ac86:	bf00      	nop
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	e000e3f0 	.word	0xe000e3f0
 800ac98:	20004ac8 	.word	0x20004ac8
 800ac9c:	e000ed0c 	.word	0xe000ed0c
 800aca0:	20004acc 	.word	0x20004acc

0800aca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10c      	bne.n	800acd2 <xQueueGenericReset+0x2e>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	b672      	cpsid	i
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	b662      	cpsie	i
 800accc:	60bb      	str	r3, [r7, #8]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800acd2:	f7ff febb 	bl	800aa4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acde:	68f9      	ldr	r1, [r7, #12]
 800ace0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ace2:	fb01 f303 	mul.w	r3, r1, r3
 800ace6:	441a      	add	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad02:	3b01      	subs	r3, #1
 800ad04:	68f9      	ldr	r1, [r7, #12]
 800ad06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad08:	fb01 f303 	mul.w	r3, r1, r3
 800ad0c:	441a      	add	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	22ff      	movs	r2, #255	; 0xff
 800ad16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	22ff      	movs	r2, #255	; 0xff
 800ad1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d114      	bne.n	800ad52 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01a      	beq.n	800ad66 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	3310      	adds	r3, #16
 800ad34:	4618      	mov	r0, r3
 800ad36:	f001 fa11 	bl	800c15c <xTaskRemoveFromEventList>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d012      	beq.n	800ad66 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad40:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <xQueueGenericReset+0xd0>)
 800ad42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	e009      	b.n	800ad66 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	3310      	adds	r3, #16
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7ff fcb4 	bl	800a6c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3324      	adds	r3, #36	; 0x24
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff fcaf 	bl	800a6c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad66:	f7ff fea5 	bl	800aab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad6a:	2301      	movs	r3, #1
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08e      	sub	sp, #56	; 0x38
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10c      	bne.n	800ada6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	b672      	cpsid	i
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	b662      	cpsie	i
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10c      	bne.n	800adc6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	b672      	cpsid	i
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	b662      	cpsie	i
 800adc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <xQueueGenericCreateStatic+0x5a>
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <xQueueGenericCreateStatic+0x5e>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <xQueueGenericCreateStatic+0x60>
 800add6:	2300      	movs	r3, #0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10c      	bne.n	800adf6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	b672      	cpsid	i
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	b662      	cpsie	i
 800adf0:	623b      	str	r3, [r7, #32]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <xQueueGenericCreateStatic+0x8a>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <xQueueGenericCreateStatic+0x8e>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e000      	b.n	800ae08 <xQueueGenericCreateStatic+0x90>
 800ae06:	2300      	movs	r3, #0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10c      	bne.n	800ae26 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	b672      	cpsid	i
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	b662      	cpsie	i
 800ae20:	61fb      	str	r3, [r7, #28]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae26:	2350      	movs	r3, #80	; 0x50
 800ae28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b50      	cmp	r3, #80	; 0x50
 800ae2e:	d00c      	beq.n	800ae4a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	b672      	cpsid	i
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	b662      	cpsie	i
 800ae44:	61bb      	str	r3, [r7, #24]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00d      	beq.n	800ae72 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	4613      	mov	r3, r2
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 f847 	bl	800af00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3730      	adds	r7, #48	; 0x30
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08a      	sub	sp, #40	; 0x28
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	4613      	mov	r3, r2
 800ae88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10c      	bne.n	800aeaa <xQueueGenericCreate+0x2e>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	b672      	cpsid	i
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	b662      	cpsie	i
 800aea4:	613b      	str	r3, [r7, #16]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	e004      	b.n	800aec0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	fb02 f303 	mul.w	r3, r2, r3
 800aebe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	3350      	adds	r3, #80	; 0x50
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7ff fa19 	bl	800a2fc <pvPortMalloc>
 800aeca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d011      	beq.n	800aef6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	3350      	adds	r3, #80	; 0x50
 800aeda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aee4:	79fa      	ldrb	r2, [r7, #7]
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	4613      	mov	r3, r2
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	68b9      	ldr	r1, [r7, #8]
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f805 	bl	800af00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aef6:	69bb      	ldr	r3, [r7, #24]
	}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3720      	adds	r7, #32
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d103      	bne.n	800af1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	69ba      	ldr	r2, [r7, #24]
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e002      	b.n	800af22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af2e:	2101      	movs	r1, #1
 800af30:	69b8      	ldr	r0, [r7, #24]
 800af32:	f7ff feb7 	bl	800aca4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	78fa      	ldrb	r2, [r7, #3]
 800af3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af3e:	bf00      	nop
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08e      	sub	sp, #56	; 0x38
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af56:	2300      	movs	r3, #0
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10c      	bne.n	800af7e <xQueueGenericSend+0x36>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	b672      	cpsid	i
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	b662      	cpsie	i
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <xQueueGenericSend+0x44>
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <xQueueGenericSend+0x48>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <xQueueGenericSend+0x4a>
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10c      	bne.n	800afb0 <xQueueGenericSend+0x68>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	b672      	cpsid	i
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	b662      	cpsie	i
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d103      	bne.n	800afbe <xQueueGenericSend+0x76>
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <xQueueGenericSend+0x7a>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e000      	b.n	800afc4 <xQueueGenericSend+0x7c>
 800afc2:	2300      	movs	r3, #0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10c      	bne.n	800afe2 <xQueueGenericSend+0x9a>
	__asm volatile
 800afc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afcc:	b672      	cpsid	i
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	b662      	cpsie	i
 800afdc:	623b      	str	r3, [r7, #32]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afe2:	f001 fa81 	bl	800c4e8 <xTaskGetSchedulerState>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <xQueueGenericSend+0xaa>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <xQueueGenericSend+0xae>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e000      	b.n	800aff8 <xQueueGenericSend+0xb0>
 800aff6:	2300      	movs	r3, #0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10c      	bne.n	800b016 <xQueueGenericSend+0xce>
	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	b672      	cpsid	i
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	b662      	cpsie	i
 800b010:	61fb      	str	r3, [r7, #28]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b016:	f7ff fd19 	bl	800aa4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b022:	429a      	cmp	r2, r3
 800b024:	d302      	bcc.n	800b02c <xQueueGenericSend+0xe4>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d129      	bne.n	800b080 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b032:	f000 fa9b 	bl	800b56c <prvCopyDataToQueue>
 800b036:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d010      	beq.n	800b062 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	3324      	adds	r3, #36	; 0x24
 800b044:	4618      	mov	r0, r3
 800b046:	f001 f889 	bl	800c15c <xTaskRemoveFromEventList>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d013      	beq.n	800b078 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b050:	4b3f      	ldr	r3, [pc, #252]	; (800b150 <xQueueGenericSend+0x208>)
 800b052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	e00a      	b.n	800b078 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d007      	beq.n	800b078 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b068:	4b39      	ldr	r3, [pc, #228]	; (800b150 <xQueueGenericSend+0x208>)
 800b06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b078:	f7ff fd1c 	bl	800aab4 <vPortExitCritical>
				return pdPASS;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e063      	b.n	800b148 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d103      	bne.n	800b08e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b086:	f7ff fd15 	bl	800aab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	e05c      	b.n	800b148 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b090:	2b00      	cmp	r3, #0
 800b092:	d106      	bne.n	800b0a2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b094:	f107 0314 	add.w	r3, r7, #20
 800b098:	4618      	mov	r0, r3
 800b09a:	f001 f8c5 	bl	800c228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0a2:	f7ff fd07 	bl	800aab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0a6:	f000 fe19 	bl	800bcdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0aa:	f7ff fccf 	bl	800aa4c <vPortEnterCritical>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0b4:	b25b      	sxtb	r3, r3
 800b0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ba:	d103      	bne.n	800b0c4 <xQueueGenericSend+0x17c>
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ca:	b25b      	sxtb	r3, r3
 800b0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d0:	d103      	bne.n	800b0da <xQueueGenericSend+0x192>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0da:	f7ff fceb 	bl	800aab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0de:	1d3a      	adds	r2, r7, #4
 800b0e0:	f107 0314 	add.w	r3, r7, #20
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 f8b4 	bl	800c254 <xTaskCheckForTimeOut>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d124      	bne.n	800b13c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0f4:	f000 fb32 	bl	800b75c <prvIsQueueFull>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d018      	beq.n	800b130 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	3310      	adds	r3, #16
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f000 ffd4 	bl	800c0b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b10c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b10e:	f000 fabd 	bl	800b68c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b112:	f000 fdf1 	bl	800bcf8 <xTaskResumeAll>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f47f af7c 	bne.w	800b016 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b11e:	4b0c      	ldr	r3, [pc, #48]	; (800b150 <xQueueGenericSend+0x208>)
 800b120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	e772      	b.n	800b016 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b132:	f000 faab 	bl	800b68c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b136:	f000 fddf 	bl	800bcf8 <xTaskResumeAll>
 800b13a:	e76c      	b.n	800b016 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b13c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b13e:	f000 faa5 	bl	800b68c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b142:	f000 fdd9 	bl	800bcf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b146:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3738      	adds	r7, #56	; 0x38
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	e000ed04 	.word	0xe000ed04

0800b154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08e      	sub	sp, #56	; 0x38
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10c      	bne.n	800b186 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	b672      	cpsid	i
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	b662      	cpsie	i
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <xQueueGenericSendFromISR+0x40>
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <xQueueGenericSendFromISR+0x44>
 800b194:	2301      	movs	r3, #1
 800b196:	e000      	b.n	800b19a <xQueueGenericSendFromISR+0x46>
 800b198:	2300      	movs	r3, #0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10c      	bne.n	800b1b8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	b672      	cpsid	i
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	b662      	cpsie	i
 800b1b2:	623b      	str	r3, [r7, #32]
}
 800b1b4:	bf00      	nop
 800b1b6:	e7fe      	b.n	800b1b6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d103      	bne.n	800b1c6 <xQueueGenericSendFromISR+0x72>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d101      	bne.n	800b1ca <xQueueGenericSendFromISR+0x76>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueGenericSendFromISR+0x78>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10c      	bne.n	800b1ea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	b672      	cpsid	i
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	b662      	cpsie	i
 800b1e4:	61fb      	str	r3, [r7, #28]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1ea:	f7ff fd17 	bl	800ac1c <vPortValidateInterruptPriority>
	__asm volatile
 800b1ee:	f3ef 8211 	mrs	r2, BASEPRI
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	b672      	cpsid	i
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	b662      	cpsie	i
 800b206:	61ba      	str	r2, [r7, #24]
 800b208:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b20a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b20c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b216:	429a      	cmp	r2, r3
 800b218:	d302      	bcc.n	800b220 <xQueueGenericSendFromISR+0xcc>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d12c      	bne.n	800b27a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	68b9      	ldr	r1, [r7, #8]
 800b22e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b230:	f000 f99c 	bl	800b56c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b234:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23c:	d112      	bne.n	800b264 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	2b00      	cmp	r3, #0
 800b244:	d016      	beq.n	800b274 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	3324      	adds	r3, #36	; 0x24
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 ff86 	bl	800c15c <xTaskRemoveFromEventList>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00e      	beq.n	800b274 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e007      	b.n	800b274 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b268:	3301      	adds	r3, #1
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	b25a      	sxtb	r2, r3
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b274:	2301      	movs	r3, #1
 800b276:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b278:	e001      	b.n	800b27e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f383 8811 	msr	BASEPRI, r3
}
 800b288:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3738      	adds	r7, #56	; 0x38
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08c      	sub	sp, #48	; 0x30
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10c      	bne.n	800b2c8 <xQueueReceive+0x34>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	b672      	cpsid	i
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	b662      	cpsie	i
 800b2c2:	623b      	str	r3, [r7, #32]
}
 800b2c4:	bf00      	nop
 800b2c6:	e7fe      	b.n	800b2c6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d103      	bne.n	800b2d6 <xQueueReceive+0x42>
 800b2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <xQueueReceive+0x46>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e000      	b.n	800b2dc <xQueueReceive+0x48>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10c      	bne.n	800b2fa <xQueueReceive+0x66>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	b672      	cpsid	i
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	b662      	cpsie	i
 800b2f4:	61fb      	str	r3, [r7, #28]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2fa:	f001 f8f5 	bl	800c4e8 <xTaskGetSchedulerState>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d102      	bne.n	800b30a <xQueueReceive+0x76>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <xQueueReceive+0x7a>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <xQueueReceive+0x7c>
 800b30e:	2300      	movs	r3, #0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10c      	bne.n	800b32e <xQueueReceive+0x9a>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	b672      	cpsid	i
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	b662      	cpsie	i
 800b328:	61bb      	str	r3, [r7, #24]
}
 800b32a:	bf00      	nop
 800b32c:	e7fe      	b.n	800b32c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b32e:	f7ff fb8d 	bl	800aa4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d01f      	beq.n	800b37e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b342:	f000 f97d 	bl	800b640 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	1e5a      	subs	r2, r3, #1
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00f      	beq.n	800b376 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b358:	3310      	adds	r3, #16
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 fefe 	bl	800c15c <xTaskRemoveFromEventList>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d007      	beq.n	800b376 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b366:	4b3d      	ldr	r3, [pc, #244]	; (800b45c <xQueueReceive+0x1c8>)
 800b368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b376:	f7ff fb9d 	bl	800aab4 <vPortExitCritical>
				return pdPASS;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e069      	b.n	800b452 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b384:	f7ff fb96 	bl	800aab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b388:	2300      	movs	r3, #0
 800b38a:	e062      	b.n	800b452 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b392:	f107 0310 	add.w	r3, r7, #16
 800b396:	4618      	mov	r0, r3
 800b398:	f000 ff46 	bl	800c228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b39c:	2301      	movs	r3, #1
 800b39e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3a0:	f7ff fb88 	bl	800aab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3a4:	f000 fc9a 	bl	800bcdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3a8:	f7ff fb50 	bl	800aa4c <vPortEnterCritical>
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3b2:	b25b      	sxtb	r3, r3
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b8:	d103      	bne.n	800b3c2 <xQueueReceive+0x12e>
 800b3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3c8:	b25b      	sxtb	r3, r3
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d103      	bne.n	800b3d8 <xQueueReceive+0x144>
 800b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3d8:	f7ff fb6c 	bl	800aab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3dc:	1d3a      	adds	r2, r7, #4
 800b3de:	f107 0310 	add.w	r3, r7, #16
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 ff35 	bl	800c254 <xTaskCheckForTimeOut>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d123      	bne.n	800b438 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3f2:	f000 f99d 	bl	800b730 <prvIsQueueEmpty>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d017      	beq.n	800b42c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	3324      	adds	r3, #36	; 0x24
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	4611      	mov	r1, r2
 800b404:	4618      	mov	r0, r3
 800b406:	f000 fe55 	bl	800c0b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40c:	f000 f93e 	bl	800b68c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b410:	f000 fc72 	bl	800bcf8 <xTaskResumeAll>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d189      	bne.n	800b32e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b41a:	4b10      	ldr	r3, [pc, #64]	; (800b45c <xQueueReceive+0x1c8>)
 800b41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	e780      	b.n	800b32e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b42e:	f000 f92d 	bl	800b68c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b432:	f000 fc61 	bl	800bcf8 <xTaskResumeAll>
 800b436:	e77a      	b.n	800b32e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b43a:	f000 f927 	bl	800b68c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b43e:	f000 fc5b 	bl	800bcf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b444:	f000 f974 	bl	800b730 <prvIsQueueEmpty>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f43f af6f 	beq.w	800b32e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b452:	4618      	mov	r0, r3
 800b454:	3730      	adds	r7, #48	; 0x30
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	e000ed04 	.word	0xe000ed04

0800b460 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08e      	sub	sp, #56	; 0x38
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10c      	bne.n	800b490 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	b672      	cpsid	i
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	b662      	cpsie	i
 800b48a:	623b      	str	r3, [r7, #32]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d103      	bne.n	800b49e <xQueueReceiveFromISR+0x3e>
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d101      	bne.n	800b4a2 <xQueueReceiveFromISR+0x42>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e000      	b.n	800b4a4 <xQueueReceiveFromISR+0x44>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10c      	bne.n	800b4c2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	b672      	cpsid	i
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	b662      	cpsie	i
 800b4bc:	61fb      	str	r3, [r7, #28]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4c2:	f7ff fbab 	bl	800ac1c <vPortValidateInterruptPriority>
	__asm volatile
 800b4c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	b672      	cpsid	i
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	b662      	cpsie	i
 800b4de:	61ba      	str	r2, [r7, #24]
 800b4e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b4e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d02f      	beq.n	800b552 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b500:	f000 f89e 	bl	800b640 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	1e5a      	subs	r2, r3, #1
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b50c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b514:	d112      	bne.n	800b53c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d016      	beq.n	800b54c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	3310      	adds	r3, #16
 800b522:	4618      	mov	r0, r3
 800b524:	f000 fe1a 	bl	800c15c <xTaskRemoveFromEventList>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00e      	beq.n	800b54c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00b      	beq.n	800b54c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	e007      	b.n	800b54c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b540:	3301      	adds	r3, #1
 800b542:	b2db      	uxtb	r3, r3
 800b544:	b25a      	sxtb	r2, r3
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b54c:	2301      	movs	r3, #1
 800b54e:	637b      	str	r3, [r7, #52]	; 0x34
 800b550:	e001      	b.n	800b556 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b552:	2300      	movs	r3, #0
 800b554:	637b      	str	r3, [r7, #52]	; 0x34
 800b556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b558:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	f383 8811 	msr	BASEPRI, r3
}
 800b560:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b564:	4618      	mov	r0, r3
 800b566:	3738      	adds	r7, #56	; 0x38
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b578:	2300      	movs	r3, #0
 800b57a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b580:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10d      	bne.n	800b5a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d14d      	bne.n	800b62e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	4618      	mov	r0, r3
 800b598:	f000 ffc4 	bl	800c524 <xTaskPriorityDisinherit>
 800b59c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	609a      	str	r2, [r3, #8]
 800b5a4:	e043      	b.n	800b62e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d119      	bne.n	800b5e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6858      	ldr	r0, [r3, #4]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	f004 ffd2 	bl	8010560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d32b      	bcc.n	800b62e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	605a      	str	r2, [r3, #4]
 800b5de:	e026      	b.n	800b62e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68d8      	ldr	r0, [r3, #12]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	68b9      	ldr	r1, [r7, #8]
 800b5ec:	f004 ffb8 	bl	8010560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f8:	425b      	negs	r3, r3
 800b5fa:	441a      	add	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d207      	bcs.n	800b61c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b614:	425b      	negs	r3, r3
 800b616:	441a      	add	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d105      	bne.n	800b62e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b636:	697b      	ldr	r3, [r7, #20]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d018      	beq.n	800b684 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	441a      	add	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68da      	ldr	r2, [r3, #12]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d303      	bcc.n	800b674 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68d9      	ldr	r1, [r3, #12]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67c:	461a      	mov	r2, r3
 800b67e:	6838      	ldr	r0, [r7, #0]
 800b680:	f004 ff6e 	bl	8010560 <memcpy>
	}
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b694:	f7ff f9da 	bl	800aa4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b69e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6a0:	e011      	b.n	800b6c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d012      	beq.n	800b6d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3324      	adds	r3, #36	; 0x24
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fd54 	bl	800c15c <xTaskRemoveFromEventList>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6ba:	f000 fe31 	bl	800c320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	dce9      	bgt.n	800b6a2 <prvUnlockQueue+0x16>
 800b6ce:	e000      	b.n	800b6d2 <prvUnlockQueue+0x46>
					break;
 800b6d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	22ff      	movs	r2, #255	; 0xff
 800b6d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b6da:	f7ff f9eb 	bl	800aab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6de:	f7ff f9b5 	bl	800aa4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6ea:	e011      	b.n	800b710 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d012      	beq.n	800b71a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3310      	adds	r3, #16
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fd2f 	bl	800c15c <xTaskRemoveFromEventList>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b704:	f000 fe0c 	bl	800c320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b708:	7bbb      	ldrb	r3, [r7, #14]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b714:	2b00      	cmp	r3, #0
 800b716:	dce9      	bgt.n	800b6ec <prvUnlockQueue+0x60>
 800b718:	e000      	b.n	800b71c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b71a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	22ff      	movs	r2, #255	; 0xff
 800b720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b724:	f7ff f9c6 	bl	800aab4 <vPortExitCritical>
}
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b738:	f7ff f988 	bl	800aa4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	2b00      	cmp	r3, #0
 800b742:	d102      	bne.n	800b74a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b744:	2301      	movs	r3, #1
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	e001      	b.n	800b74e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b74a:	2300      	movs	r3, #0
 800b74c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b74e:	f7ff f9b1 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 800b752:	68fb      	ldr	r3, [r7, #12]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b764:	f7ff f972 	bl	800aa4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b770:	429a      	cmp	r2, r3
 800b772:	d102      	bne.n	800b77a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e001      	b.n	800b77e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b77a:	2300      	movs	r3, #0
 800b77c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b77e:	f7ff f999 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 800b782:	68fb      	ldr	r3, [r7, #12]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
 800b79a:	e014      	b.n	800b7c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b79c:	4a0f      	ldr	r2, [pc, #60]	; (800b7dc <vQueueAddToRegistry+0x50>)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10b      	bne.n	800b7c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b7a8:	490c      	ldr	r1, [pc, #48]	; (800b7dc <vQueueAddToRegistry+0x50>)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b7b2:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <vQueueAddToRegistry+0x50>)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	4413      	add	r3, r2
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b7be:	e006      	b.n	800b7ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b07      	cmp	r3, #7
 800b7ca:	d9e7      	bls.n	800b79c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b7cc:	bf00      	nop
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	20004ad0 	.word	0x20004ad0

0800b7e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7f0:	f7ff f92c 	bl	800aa4c <vPortEnterCritical>
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7fa:	b25b      	sxtb	r3, r3
 800b7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b800:	d103      	bne.n	800b80a <vQueueWaitForMessageRestricted+0x2a>
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b810:	b25b      	sxtb	r3, r3
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d103      	bne.n	800b820 <vQueueWaitForMessageRestricted+0x40>
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b820:	f7ff f948 	bl	800aab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	3324      	adds	r3, #36	; 0x24
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	4618      	mov	r0, r3
 800b836:	f000 fc63 	bl	800c100 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b83a:	6978      	ldr	r0, [r7, #20]
 800b83c:	f7ff ff26 	bl	800b68c <prvUnlockQueue>
	}
 800b840:	bf00      	nop
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08e      	sub	sp, #56	; 0x38
 800b84c:	af04      	add	r7, sp, #16
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10c      	bne.n	800b876 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	b672      	cpsid	i
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	b662      	cpsie	i
 800b870:	623b      	str	r3, [r7, #32]
}
 800b872:	bf00      	nop
 800b874:	e7fe      	b.n	800b874 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10c      	bne.n	800b896 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	b672      	cpsid	i
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	b662      	cpsie	i
 800b890:	61fb      	str	r3, [r7, #28]
}
 800b892:	bf00      	nop
 800b894:	e7fe      	b.n	800b894 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b896:	235c      	movs	r3, #92	; 0x5c
 800b898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	2b5c      	cmp	r3, #92	; 0x5c
 800b89e:	d00c      	beq.n	800b8ba <xTaskCreateStatic+0x72>
	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a4:	b672      	cpsid	i
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	b662      	cpsie	i
 800b8b4:	61bb      	str	r3, [r7, #24]
}
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d01e      	beq.n	800b900 <xTaskCreateStatic+0xb8>
 800b8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d01b      	beq.n	800b900 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8da:	2300      	movs	r3, #0
 800b8dc:	9303      	str	r3, [sp, #12]
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	9302      	str	r3, [sp, #8]
 800b8e2:	f107 0314 	add.w	r3, r7, #20
 800b8e6:	9301      	str	r3, [sp, #4]
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	68b9      	ldr	r1, [r7, #8]
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f000 f850 	bl	800b998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8fa:	f000 f8df 	bl	800babc <prvAddNewTaskToReadyList>
 800b8fe:	e001      	b.n	800b904 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b900:	2300      	movs	r3, #0
 800b902:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b904:	697b      	ldr	r3, [r7, #20]
	}
 800b906:	4618      	mov	r0, r3
 800b908:	3728      	adds	r7, #40	; 0x28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b08c      	sub	sp, #48	; 0x30
 800b912:	af04      	add	r7, sp, #16
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	60b9      	str	r1, [r7, #8]
 800b918:	603b      	str	r3, [r7, #0]
 800b91a:	4613      	mov	r3, r2
 800b91c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b91e:	88fb      	ldrh	r3, [r7, #6]
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe fcea 	bl	800a2fc <pvPortMalloc>
 800b928:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00e      	beq.n	800b94e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b930:	205c      	movs	r0, #92	; 0x5c
 800b932:	f7fe fce3 	bl	800a2fc <pvPortMalloc>
 800b936:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	697a      	ldr	r2, [r7, #20]
 800b942:	631a      	str	r2, [r3, #48]	; 0x30
 800b944:	e005      	b.n	800b952 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b946:	6978      	ldr	r0, [r7, #20]
 800b948:	f7fe fda2 	bl	800a490 <vPortFree>
 800b94c:	e001      	b.n	800b952 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d017      	beq.n	800b988 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b960:	88fa      	ldrh	r2, [r7, #6]
 800b962:	2300      	movs	r3, #0
 800b964:	9303      	str	r3, [sp, #12]
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	9302      	str	r3, [sp, #8]
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	9301      	str	r3, [sp, #4]
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 f80e 	bl	800b998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b97c:	69f8      	ldr	r0, [r7, #28]
 800b97e:	f000 f89d 	bl	800babc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b982:	2301      	movs	r3, #1
 800b984:	61bb      	str	r3, [r7, #24]
 800b986:	e002      	b.n	800b98e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b988:	f04f 33ff 	mov.w	r3, #4294967295
 800b98c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b98e:	69bb      	ldr	r3, [r7, #24]
	}
 800b990:	4618      	mov	r0, r3
 800b992:	3720      	adds	r7, #32
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
 800b9a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	21a5      	movs	r1, #165	; 0xa5
 800b9b2:	f004 fde3 	bl	801057c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9ba:	6879      	ldr	r1, [r7, #4]
 800b9bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b9c0:	440b      	add	r3, r1
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	f023 0307 	bic.w	r3, r3, #7
 800b9ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00c      	beq.n	800b9f4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	b672      	cpsid	i
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	b662      	cpsie	i
 800b9ee:	617b      	str	r3, [r7, #20]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d01f      	beq.n	800ba3a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	61fb      	str	r3, [r7, #28]
 800b9fe:	e012      	b.n	800ba26 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	4413      	add	r3, r2
 800ba06:	7819      	ldrb	r1, [r3, #0]
 800ba08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3334      	adds	r3, #52	; 0x34
 800ba10:	460a      	mov	r2, r1
 800ba12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	4413      	add	r3, r2
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d006      	beq.n	800ba2e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	3301      	adds	r3, #1
 800ba24:	61fb      	str	r3, [r7, #28]
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	2b0f      	cmp	r3, #15
 800ba2a:	d9e9      	bls.n	800ba00 <prvInitialiseNewTask+0x68>
 800ba2c:	e000      	b.n	800ba30 <prvInitialiseNewTask+0x98>
			{
				break;
 800ba2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba38:	e003      	b.n	800ba42 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba44:	2b37      	cmp	r3, #55	; 0x37
 800ba46:	d901      	bls.n	800ba4c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba48:	2337      	movs	r3, #55	; 0x37
 800ba4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	3304      	adds	r3, #4
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe fe4e 	bl	800a704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	3318      	adds	r3, #24
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe fe49 	bl	800a704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	68f9      	ldr	r1, [r7, #12]
 800ba9a:	69b8      	ldr	r0, [r7, #24]
 800ba9c:	f7fe fec6 	bl	800a82c <pxPortInitialiseStack>
 800baa0:	4602      	mov	r2, r0
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800baa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bab2:	bf00      	nop
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
	...

0800babc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bac4:	f7fe ffc2 	bl	800aa4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bac8:	4b2d      	ldr	r3, [pc, #180]	; (800bb80 <prvAddNewTaskToReadyList+0xc4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	4a2c      	ldr	r2, [pc, #176]	; (800bb80 <prvAddNewTaskToReadyList+0xc4>)
 800bad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bad2:	4b2c      	ldr	r3, [pc, #176]	; (800bb84 <prvAddNewTaskToReadyList+0xc8>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d109      	bne.n	800baee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bada:	4a2a      	ldr	r2, [pc, #168]	; (800bb84 <prvAddNewTaskToReadyList+0xc8>)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bae0:	4b27      	ldr	r3, [pc, #156]	; (800bb80 <prvAddNewTaskToReadyList+0xc4>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d110      	bne.n	800bb0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bae8:	f000 fc3e 	bl	800c368 <prvInitialiseTaskLists>
 800baec:	e00d      	b.n	800bb0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baee:	4b26      	ldr	r3, [pc, #152]	; (800bb88 <prvAddNewTaskToReadyList+0xcc>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d109      	bne.n	800bb0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800baf6:	4b23      	ldr	r3, [pc, #140]	; (800bb84 <prvAddNewTaskToReadyList+0xc8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d802      	bhi.n	800bb0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb04:	4a1f      	ldr	r2, [pc, #124]	; (800bb84 <prvAddNewTaskToReadyList+0xc8>)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb0a:	4b20      	ldr	r3, [pc, #128]	; (800bb8c <prvAddNewTaskToReadyList+0xd0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	4a1e      	ldr	r2, [pc, #120]	; (800bb8c <prvAddNewTaskToReadyList+0xd0>)
 800bb12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb14:	4b1d      	ldr	r3, [pc, #116]	; (800bb8c <prvAddNewTaskToReadyList+0xd0>)
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	4b1b      	ldr	r3, [pc, #108]	; (800bb90 <prvAddNewTaskToReadyList+0xd4>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d903      	bls.n	800bb30 <prvAddNewTaskToReadyList+0x74>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	4a18      	ldr	r2, [pc, #96]	; (800bb90 <prvAddNewTaskToReadyList+0xd4>)
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb34:	4613      	mov	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4413      	add	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4a15      	ldr	r2, [pc, #84]	; (800bb94 <prvAddNewTaskToReadyList+0xd8>)
 800bb3e:	441a      	add	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3304      	adds	r3, #4
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fe fde9 	bl	800a71e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb4c:	f7fe ffb2 	bl	800aab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb50:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <prvAddNewTaskToReadyList+0xcc>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00e      	beq.n	800bb76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb58:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <prvAddNewTaskToReadyList+0xc8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d207      	bcs.n	800bb76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb66:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <prvAddNewTaskToReadyList+0xdc>)
 800bb68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20004fe4 	.word	0x20004fe4
 800bb84:	20004b10 	.word	0x20004b10
 800bb88:	20004ff0 	.word	0x20004ff0
 800bb8c:	20005000 	.word	0x20005000
 800bb90:	20004fec 	.word	0x20004fec
 800bb94:	20004b14 	.word	0x20004b14
 800bb98:	e000ed04 	.word	0xe000ed04

0800bb9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bba4:	2300      	movs	r3, #0
 800bba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d019      	beq.n	800bbe2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbae:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <vTaskDelay+0x64>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00c      	beq.n	800bbd0 <vTaskDelay+0x34>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbba:	b672      	cpsid	i
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	b662      	cpsie	i
 800bbca:	60bb      	str	r3, [r7, #8]
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bbd0:	f000 f884 	bl	800bcdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fd16 	bl	800c608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbdc:	f000 f88c 	bl	800bcf8 <xTaskResumeAll>
 800bbe0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d107      	bne.n	800bbf8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <vTaskDelay+0x68>)
 800bbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbf8:	bf00      	nop
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	2000500c 	.word	0x2000500c
 800bc04:	e000ed04 	.word	0xe000ed04

0800bc08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08a      	sub	sp, #40	; 0x28
 800bc0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc16:	463a      	mov	r2, r7
 800bc18:	1d39      	adds	r1, r7, #4
 800bc1a:	f107 0308 	add.w	r3, r7, #8
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fb38 	bl	800a294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	9202      	str	r2, [sp, #8]
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	2300      	movs	r3, #0
 800bc34:	460a      	mov	r2, r1
 800bc36:	4923      	ldr	r1, [pc, #140]	; (800bcc4 <vTaskStartScheduler+0xbc>)
 800bc38:	4823      	ldr	r0, [pc, #140]	; (800bcc8 <vTaskStartScheduler+0xc0>)
 800bc3a:	f7ff fe05 	bl	800b848 <xTaskCreateStatic>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	4a22      	ldr	r2, [pc, #136]	; (800bccc <vTaskStartScheduler+0xc4>)
 800bc42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc44:	4b21      	ldr	r3, [pc, #132]	; (800bccc <vTaskStartScheduler+0xc4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	e001      	b.n	800bc56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d102      	bne.n	800bc62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc5c:	f000 fd28 	bl	800c6b0 <xTimerCreateTimerTask>
 800bc60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d118      	bne.n	800bc9a <vTaskStartScheduler+0x92>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	b672      	cpsid	i
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	b662      	cpsie	i
 800bc7c:	613b      	str	r3, [r7, #16]
}
 800bc7e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc80:	4b13      	ldr	r3, [pc, #76]	; (800bcd0 <vTaskStartScheduler+0xc8>)
 800bc82:	f04f 32ff 	mov.w	r2, #4294967295
 800bc86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc88:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <vTaskStartScheduler+0xcc>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc8e:	4b12      	ldr	r3, [pc, #72]	; (800bcd8 <vTaskStartScheduler+0xd0>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc94:	f7fe fe5c 	bl	800a950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc98:	e010      	b.n	800bcbc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca0:	d10c      	bne.n	800bcbc <vTaskStartScheduler+0xb4>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	b672      	cpsid	i
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	b662      	cpsie	i
 800bcb6:	60fb      	str	r3, [r7, #12]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <vTaskStartScheduler+0xb2>
}
 800bcbc:	bf00      	nop
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	08010818 	.word	0x08010818
 800bcc8:	0800c339 	.word	0x0800c339
 800bccc:	20005008 	.word	0x20005008
 800bcd0:	20005004 	.word	0x20005004
 800bcd4:	20004ff0 	.word	0x20004ff0
 800bcd8:	20004fe8 	.word	0x20004fe8

0800bcdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bce0:	4b04      	ldr	r3, [pc, #16]	; (800bcf4 <vTaskSuspendAll+0x18>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	3301      	adds	r3, #1
 800bce6:	4a03      	ldr	r2, [pc, #12]	; (800bcf4 <vTaskSuspendAll+0x18>)
 800bce8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bcea:	bf00      	nop
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	2000500c 	.word	0x2000500c

0800bcf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd06:	4b43      	ldr	r3, [pc, #268]	; (800be14 <xTaskResumeAll+0x11c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10c      	bne.n	800bd28 <xTaskResumeAll+0x30>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	b672      	cpsid	i
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	b662      	cpsie	i
 800bd22:	603b      	str	r3, [r7, #0]
}
 800bd24:	bf00      	nop
 800bd26:	e7fe      	b.n	800bd26 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd28:	f7fe fe90 	bl	800aa4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd2c:	4b39      	ldr	r3, [pc, #228]	; (800be14 <xTaskResumeAll+0x11c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	3b01      	subs	r3, #1
 800bd32:	4a38      	ldr	r2, [pc, #224]	; (800be14 <xTaskResumeAll+0x11c>)
 800bd34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd36:	4b37      	ldr	r3, [pc, #220]	; (800be14 <xTaskResumeAll+0x11c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d162      	bne.n	800be04 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd3e:	4b36      	ldr	r3, [pc, #216]	; (800be18 <xTaskResumeAll+0x120>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d05e      	beq.n	800be04 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd46:	e02f      	b.n	800bda8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd48:	4b34      	ldr	r3, [pc, #208]	; (800be1c <xTaskResumeAll+0x124>)
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3318      	adds	r3, #24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fe fd3f 	bl	800a7d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe fd3a 	bl	800a7d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd68:	4b2d      	ldr	r3, [pc, #180]	; (800be20 <xTaskResumeAll+0x128>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d903      	bls.n	800bd78 <xTaskResumeAll+0x80>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd74:	4a2a      	ldr	r2, [pc, #168]	; (800be20 <xTaskResumeAll+0x128>)
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4a27      	ldr	r2, [pc, #156]	; (800be24 <xTaskResumeAll+0x12c>)
 800bd86:	441a      	add	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	4610      	mov	r0, r2
 800bd90:	f7fe fcc5 	bl	800a71e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd98:	4b23      	ldr	r3, [pc, #140]	; (800be28 <xTaskResumeAll+0x130>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d302      	bcc.n	800bda8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800bda2:	4b22      	ldr	r3, [pc, #136]	; (800be2c <xTaskResumeAll+0x134>)
 800bda4:	2201      	movs	r2, #1
 800bda6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bda8:	4b1c      	ldr	r3, [pc, #112]	; (800be1c <xTaskResumeAll+0x124>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1cb      	bne.n	800bd48 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bdb6:	f000 fb77 	bl	800c4a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bdba:	4b1d      	ldr	r3, [pc, #116]	; (800be30 <xTaskResumeAll+0x138>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d010      	beq.n	800bde8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bdc6:	f000 f859 	bl	800be7c <xTaskIncrementTick>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800bdd0:	4b16      	ldr	r3, [pc, #88]	; (800be2c <xTaskResumeAll+0x134>)
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1f1      	bne.n	800bdc6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800bde2:	4b13      	ldr	r3, [pc, #76]	; (800be30 <xTaskResumeAll+0x138>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bde8:	4b10      	ldr	r3, [pc, #64]	; (800be2c <xTaskResumeAll+0x134>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <xTaskResumeAll+0x13c>)
 800bdf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be04:	f7fe fe56 	bl	800aab4 <vPortExitCritical>

	return xAlreadyYielded;
 800be08:	68bb      	ldr	r3, [r7, #8]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	2000500c 	.word	0x2000500c
 800be18:	20004fe4 	.word	0x20004fe4
 800be1c:	20004fa4 	.word	0x20004fa4
 800be20:	20004fec 	.word	0x20004fec
 800be24:	20004b14 	.word	0x20004b14
 800be28:	20004b10 	.word	0x20004b10
 800be2c:	20004ff8 	.word	0x20004ff8
 800be30:	20004ff4 	.word	0x20004ff4
 800be34:	e000ed04 	.word	0xe000ed04

0800be38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <xTaskGetTickCount+0x1c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be44:	687b      	ldr	r3, [r7, #4]
}
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	20004fe8 	.word	0x20004fe8

0800be58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be5e:	f7fe fedd 	bl	800ac1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800be62:	2300      	movs	r3, #0
 800be64:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800be66:	4b04      	ldr	r3, [pc, #16]	; (800be78 <xTaskGetTickCountFromISR+0x20>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be6c:	683b      	ldr	r3, [r7, #0]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20004fe8 	.word	0x20004fe8

0800be7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be82:	2300      	movs	r3, #0
 800be84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be86:	4b50      	ldr	r3, [pc, #320]	; (800bfc8 <xTaskIncrementTick+0x14c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f040 808b 	bne.w	800bfa6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be90:	4b4e      	ldr	r3, [pc, #312]	; (800bfcc <xTaskIncrementTick+0x150>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3301      	adds	r3, #1
 800be96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be98:	4a4c      	ldr	r2, [pc, #304]	; (800bfcc <xTaskIncrementTick+0x150>)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d122      	bne.n	800beea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800bea4:	4b4a      	ldr	r3, [pc, #296]	; (800bfd0 <xTaskIncrementTick+0x154>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00c      	beq.n	800bec8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb2:	b672      	cpsid	i
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	b662      	cpsie	i
 800bec2:	603b      	str	r3, [r7, #0]
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <xTaskIncrementTick+0x4a>
 800bec8:	4b41      	ldr	r3, [pc, #260]	; (800bfd0 <xTaskIncrementTick+0x154>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	4b41      	ldr	r3, [pc, #260]	; (800bfd4 <xTaskIncrementTick+0x158>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a3f      	ldr	r2, [pc, #252]	; (800bfd0 <xTaskIncrementTick+0x154>)
 800bed4:	6013      	str	r3, [r2, #0]
 800bed6:	4a3f      	ldr	r2, [pc, #252]	; (800bfd4 <xTaskIncrementTick+0x158>)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	4b3e      	ldr	r3, [pc, #248]	; (800bfd8 <xTaskIncrementTick+0x15c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3301      	adds	r3, #1
 800bee2:	4a3d      	ldr	r2, [pc, #244]	; (800bfd8 <xTaskIncrementTick+0x15c>)
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	f000 fadf 	bl	800c4a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800beea:	4b3c      	ldr	r3, [pc, #240]	; (800bfdc <xTaskIncrementTick+0x160>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d349      	bcc.n	800bf88 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bef4:	4b36      	ldr	r3, [pc, #216]	; (800bfd0 <xTaskIncrementTick+0x154>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d104      	bne.n	800bf08 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800befe:	4b37      	ldr	r3, [pc, #220]	; (800bfdc <xTaskIncrementTick+0x160>)
 800bf00:	f04f 32ff 	mov.w	r2, #4294967295
 800bf04:	601a      	str	r2, [r3, #0]
					break;
 800bf06:	e03f      	b.n	800bf88 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf08:	4b31      	ldr	r3, [pc, #196]	; (800bfd0 <xTaskIncrementTick+0x154>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d203      	bcs.n	800bf28 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf20:	4a2e      	ldr	r2, [pc, #184]	; (800bfdc <xTaskIncrementTick+0x160>)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf26:	e02f      	b.n	800bf88 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fe fc53 	bl	800a7d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d004      	beq.n	800bf44 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	3318      	adds	r3, #24
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fe fc4a 	bl	800a7d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf48:	4b25      	ldr	r3, [pc, #148]	; (800bfe0 <xTaskIncrementTick+0x164>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d903      	bls.n	800bf58 <xTaskIncrementTick+0xdc>
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf54:	4a22      	ldr	r2, [pc, #136]	; (800bfe0 <xTaskIncrementTick+0x164>)
 800bf56:	6013      	str	r3, [r2, #0]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4a1f      	ldr	r2, [pc, #124]	; (800bfe4 <xTaskIncrementTick+0x168>)
 800bf66:	441a      	add	r2, r3
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4610      	mov	r0, r2
 800bf70:	f7fe fbd5 	bl	800a71e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf78:	4b1b      	ldr	r3, [pc, #108]	; (800bfe8 <xTaskIncrementTick+0x16c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d3b8      	bcc.n	800bef4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bf82:	2301      	movs	r3, #1
 800bf84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf86:	e7b5      	b.n	800bef4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf88:	4b17      	ldr	r3, [pc, #92]	; (800bfe8 <xTaskIncrementTick+0x16c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8e:	4915      	ldr	r1, [pc, #84]	; (800bfe4 <xTaskIncrementTick+0x168>)
 800bf90:	4613      	mov	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	440b      	add	r3, r1
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d907      	bls.n	800bfb0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	617b      	str	r3, [r7, #20]
 800bfa4:	e004      	b.n	800bfb0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bfa6:	4b11      	ldr	r3, [pc, #68]	; (800bfec <xTaskIncrementTick+0x170>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	4a0f      	ldr	r2, [pc, #60]	; (800bfec <xTaskIncrementTick+0x170>)
 800bfae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bfb0:	4b0f      	ldr	r3, [pc, #60]	; (800bff0 <xTaskIncrementTick+0x174>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bfbc:	697b      	ldr	r3, [r7, #20]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3718      	adds	r7, #24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	2000500c 	.word	0x2000500c
 800bfcc:	20004fe8 	.word	0x20004fe8
 800bfd0:	20004f9c 	.word	0x20004f9c
 800bfd4:	20004fa0 	.word	0x20004fa0
 800bfd8:	20004ffc 	.word	0x20004ffc
 800bfdc:	20005004 	.word	0x20005004
 800bfe0:	20004fec 	.word	0x20004fec
 800bfe4:	20004b14 	.word	0x20004b14
 800bfe8:	20004b10 	.word	0x20004b10
 800bfec:	20004ff4 	.word	0x20004ff4
 800bff0:	20004ff8 	.word	0x20004ff8

0800bff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bffa:	4b29      	ldr	r3, [pc, #164]	; (800c0a0 <vTaskSwitchContext+0xac>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d003      	beq.n	800c00a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c002:	4b28      	ldr	r3, [pc, #160]	; (800c0a4 <vTaskSwitchContext+0xb0>)
 800c004:	2201      	movs	r2, #1
 800c006:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c008:	e043      	b.n	800c092 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800c00a:	4b26      	ldr	r3, [pc, #152]	; (800c0a4 <vTaskSwitchContext+0xb0>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c010:	4b25      	ldr	r3, [pc, #148]	; (800c0a8 <vTaskSwitchContext+0xb4>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	e012      	b.n	800c03e <vTaskSwitchContext+0x4a>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10c      	bne.n	800c038 <vTaskSwitchContext+0x44>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	b672      	cpsid	i
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	b662      	cpsie	i
 800c032:	607b      	str	r3, [r7, #4]
}
 800c034:	bf00      	nop
 800c036:	e7fe      	b.n	800c036 <vTaskSwitchContext+0x42>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	60fb      	str	r3, [r7, #12]
 800c03e:	491b      	ldr	r1, [pc, #108]	; (800c0ac <vTaskSwitchContext+0xb8>)
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	4613      	mov	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	440b      	add	r3, r1
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0e2      	beq.n	800c018 <vTaskSwitchContext+0x24>
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	4613      	mov	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4a13      	ldr	r2, [pc, #76]	; (800c0ac <vTaskSwitchContext+0xb8>)
 800c05e:	4413      	add	r3, r2
 800c060:	60bb      	str	r3, [r7, #8]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	605a      	str	r2, [r3, #4]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	685a      	ldr	r2, [r3, #4]
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	3308      	adds	r3, #8
 800c074:	429a      	cmp	r2, r3
 800c076:	d104      	bne.n	800c082 <vTaskSwitchContext+0x8e>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	605a      	str	r2, [r3, #4]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	4a09      	ldr	r2, [pc, #36]	; (800c0b0 <vTaskSwitchContext+0xbc>)
 800c08a:	6013      	str	r3, [r2, #0]
 800c08c:	4a06      	ldr	r2, [pc, #24]	; (800c0a8 <vTaskSwitchContext+0xb4>)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6013      	str	r3, [r2, #0]
}
 800c092:	bf00      	nop
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	2000500c 	.word	0x2000500c
 800c0a4:	20004ff8 	.word	0x20004ff8
 800c0a8:	20004fec 	.word	0x20004fec
 800c0ac:	20004b14 	.word	0x20004b14
 800c0b0:	20004b10 	.word	0x20004b10

0800c0b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10c      	bne.n	800c0de <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	b672      	cpsid	i
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	b662      	cpsie	i
 800c0d8:	60fb      	str	r3, [r7, #12]
}
 800c0da:	bf00      	nop
 800c0dc:	e7fe      	b.n	800c0dc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0de:	4b07      	ldr	r3, [pc, #28]	; (800c0fc <vTaskPlaceOnEventList+0x48>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3318      	adds	r3, #24
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7fe fb3d 	bl	800a766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	6838      	ldr	r0, [r7, #0]
 800c0f0:	f000 fa8a 	bl	800c608 <prvAddCurrentTaskToDelayedList>
}
 800c0f4:	bf00      	nop
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	20004b10 	.word	0x20004b10

0800c100 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10c      	bne.n	800c12c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	b672      	cpsid	i
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	b662      	cpsie	i
 800c126:	617b      	str	r3, [r7, #20]
}
 800c128:	bf00      	nop
 800c12a:	e7fe      	b.n	800c12a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c12c:	4b0a      	ldr	r3, [pc, #40]	; (800c158 <vTaskPlaceOnEventListRestricted+0x58>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3318      	adds	r3, #24
 800c132:	4619      	mov	r1, r3
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7fe faf2 	bl	800a71e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c140:	f04f 33ff 	mov.w	r3, #4294967295
 800c144:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c146:	6879      	ldr	r1, [r7, #4]
 800c148:	68b8      	ldr	r0, [r7, #8]
 800c14a:	f000 fa5d 	bl	800c608 <prvAddCurrentTaskToDelayedList>
	}
 800c14e:	bf00      	nop
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20004b10 	.word	0x20004b10

0800c15c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10c      	bne.n	800c18c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	b672      	cpsid	i
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	b662      	cpsie	i
 800c186:	60fb      	str	r3, [r7, #12]
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	3318      	adds	r3, #24
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe fb21 	bl	800a7d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c196:	4b1e      	ldr	r3, [pc, #120]	; (800c210 <xTaskRemoveFromEventList+0xb4>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d11d      	bne.n	800c1da <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe fb18 	bl	800a7d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ac:	4b19      	ldr	r3, [pc, #100]	; (800c214 <xTaskRemoveFromEventList+0xb8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d903      	bls.n	800c1bc <xTaskRemoveFromEventList+0x60>
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	4a16      	ldr	r2, [pc, #88]	; (800c214 <xTaskRemoveFromEventList+0xb8>)
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4a13      	ldr	r2, [pc, #76]	; (800c218 <xTaskRemoveFromEventList+0xbc>)
 800c1ca:	441a      	add	r2, r3
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	f7fe faa3 	bl	800a71e <vListInsertEnd>
 800c1d8:	e005      	b.n	800c1e6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	3318      	adds	r3, #24
 800c1de:	4619      	mov	r1, r3
 800c1e0:	480e      	ldr	r0, [pc, #56]	; (800c21c <xTaskRemoveFromEventList+0xc0>)
 800c1e2:	f7fe fa9c 	bl	800a71e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ea:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <xTaskRemoveFromEventList+0xc4>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d905      	bls.n	800c200 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1f8:	4b0a      	ldr	r3, [pc, #40]	; (800c224 <xTaskRemoveFromEventList+0xc8>)
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	e001      	b.n	800c204 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c200:	2300      	movs	r3, #0
 800c202:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c204:	697b      	ldr	r3, [r7, #20]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	2000500c 	.word	0x2000500c
 800c214:	20004fec 	.word	0x20004fec
 800c218:	20004b14 	.word	0x20004b14
 800c21c:	20004fa4 	.word	0x20004fa4
 800c220:	20004b10 	.word	0x20004b10
 800c224:	20004ff8 	.word	0x20004ff8

0800c228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c230:	4b06      	ldr	r3, [pc, #24]	; (800c24c <vTaskInternalSetTimeOutState+0x24>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <vTaskInternalSetTimeOutState+0x28>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	605a      	str	r2, [r3, #4]
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	20004ffc 	.word	0x20004ffc
 800c250:	20004fe8 	.word	0x20004fe8

0800c254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10c      	bne.n	800c27e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c268:	b672      	cpsid	i
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	b662      	cpsie	i
 800c278:	613b      	str	r3, [r7, #16]
}
 800c27a:	bf00      	nop
 800c27c:	e7fe      	b.n	800c27c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10c      	bne.n	800c29e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	b672      	cpsid	i
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	b662      	cpsie	i
 800c298:	60fb      	str	r3, [r7, #12]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c29e:	f7fe fbd5 	bl	800aa4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2a2:	4b1d      	ldr	r3, [pc, #116]	; (800c318 <xTaskCheckForTimeOut+0xc4>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ba:	d102      	bne.n	800c2c2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e023      	b.n	800c30a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	4b15      	ldr	r3, [pc, #84]	; (800c31c <xTaskCheckForTimeOut+0xc8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d007      	beq.n	800c2de <xTaskCheckForTimeOut+0x8a>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	69ba      	ldr	r2, [r7, #24]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d302      	bcc.n	800c2de <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	61fb      	str	r3, [r7, #28]
 800c2dc:	e015      	b.n	800c30a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d20b      	bcs.n	800c300 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	1ad2      	subs	r2, r2, r3
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff ff97 	bl	800c228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	61fb      	str	r3, [r7, #28]
 800c2fe:	e004      	b.n	800c30a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c306:	2301      	movs	r3, #1
 800c308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c30a:	f7fe fbd3 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 800c30e:	69fb      	ldr	r3, [r7, #28]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20004fe8 	.word	0x20004fe8
 800c31c:	20004ffc 	.word	0x20004ffc

0800c320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c320:	b480      	push	{r7}
 800c322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c324:	4b03      	ldr	r3, [pc, #12]	; (800c334 <vTaskMissedYield+0x14>)
 800c326:	2201      	movs	r2, #1
 800c328:	601a      	str	r2, [r3, #0]
}
 800c32a:	bf00      	nop
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	20004ff8 	.word	0x20004ff8

0800c338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c340:	f000 f852 	bl	800c3e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c344:	4b06      	ldr	r3, [pc, #24]	; (800c360 <prvIdleTask+0x28>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d9f9      	bls.n	800c340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c34c:	4b05      	ldr	r3, [pc, #20]	; (800c364 <prvIdleTask+0x2c>)
 800c34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c35c:	e7f0      	b.n	800c340 <prvIdleTask+0x8>
 800c35e:	bf00      	nop
 800c360:	20004b14 	.word	0x20004b14
 800c364:	e000ed04 	.word	0xe000ed04

0800c368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c36e:	2300      	movs	r3, #0
 800c370:	607b      	str	r3, [r7, #4]
 800c372:	e00c      	b.n	800c38e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4a12      	ldr	r2, [pc, #72]	; (800c3c8 <prvInitialiseTaskLists+0x60>)
 800c380:	4413      	add	r3, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe f99e 	bl	800a6c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3301      	adds	r3, #1
 800c38c:	607b      	str	r3, [r7, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b37      	cmp	r3, #55	; 0x37
 800c392:	d9ef      	bls.n	800c374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c394:	480d      	ldr	r0, [pc, #52]	; (800c3cc <prvInitialiseTaskLists+0x64>)
 800c396:	f7fe f995 	bl	800a6c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c39a:	480d      	ldr	r0, [pc, #52]	; (800c3d0 <prvInitialiseTaskLists+0x68>)
 800c39c:	f7fe f992 	bl	800a6c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3a0:	480c      	ldr	r0, [pc, #48]	; (800c3d4 <prvInitialiseTaskLists+0x6c>)
 800c3a2:	f7fe f98f 	bl	800a6c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3a6:	480c      	ldr	r0, [pc, #48]	; (800c3d8 <prvInitialiseTaskLists+0x70>)
 800c3a8:	f7fe f98c 	bl	800a6c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3ac:	480b      	ldr	r0, [pc, #44]	; (800c3dc <prvInitialiseTaskLists+0x74>)
 800c3ae:	f7fe f989 	bl	800a6c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3b2:	4b0b      	ldr	r3, [pc, #44]	; (800c3e0 <prvInitialiseTaskLists+0x78>)
 800c3b4:	4a05      	ldr	r2, [pc, #20]	; (800c3cc <prvInitialiseTaskLists+0x64>)
 800c3b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3b8:	4b0a      	ldr	r3, [pc, #40]	; (800c3e4 <prvInitialiseTaskLists+0x7c>)
 800c3ba:	4a05      	ldr	r2, [pc, #20]	; (800c3d0 <prvInitialiseTaskLists+0x68>)
 800c3bc:	601a      	str	r2, [r3, #0]
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20004b14 	.word	0x20004b14
 800c3cc:	20004f74 	.word	0x20004f74
 800c3d0:	20004f88 	.word	0x20004f88
 800c3d4:	20004fa4 	.word	0x20004fa4
 800c3d8:	20004fb8 	.word	0x20004fb8
 800c3dc:	20004fd0 	.word	0x20004fd0
 800c3e0:	20004f9c 	.word	0x20004f9c
 800c3e4:	20004fa0 	.word	0x20004fa0

0800c3e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3ee:	e019      	b.n	800c424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3f0:	f7fe fb2c 	bl	800aa4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3f4:	4b10      	ldr	r3, [pc, #64]	; (800c438 <prvCheckTasksWaitingTermination+0x50>)
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4618      	mov	r0, r3
 800c402:	f7fe f9e9 	bl	800a7d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c406:	4b0d      	ldr	r3, [pc, #52]	; (800c43c <prvCheckTasksWaitingTermination+0x54>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	4a0b      	ldr	r2, [pc, #44]	; (800c43c <prvCheckTasksWaitingTermination+0x54>)
 800c40e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c410:	4b0b      	ldr	r3, [pc, #44]	; (800c440 <prvCheckTasksWaitingTermination+0x58>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3b01      	subs	r3, #1
 800c416:	4a0a      	ldr	r2, [pc, #40]	; (800c440 <prvCheckTasksWaitingTermination+0x58>)
 800c418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c41a:	f7fe fb4b 	bl	800aab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f810 	bl	800c444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c424:	4b06      	ldr	r3, [pc, #24]	; (800c440 <prvCheckTasksWaitingTermination+0x58>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1e1      	bne.n	800c3f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20004fb8 	.word	0x20004fb8
 800c43c:	20004fe4 	.word	0x20004fe4
 800c440:	20004fcc 	.word	0x20004fcc

0800c444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c452:	2b00      	cmp	r3, #0
 800c454:	d108      	bne.n	800c468 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fe f818 	bl	800a490 <vPortFree>
				vPortFree( pxTCB );
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7fe f815 	bl	800a490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c466:	e01a      	b.n	800c49e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d103      	bne.n	800c47a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7fe f80c 	bl	800a490 <vPortFree>
	}
 800c478:	e011      	b.n	800c49e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c480:	2b02      	cmp	r3, #2
 800c482:	d00c      	beq.n	800c49e <prvDeleteTCB+0x5a>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	b672      	cpsid	i
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	b662      	cpsie	i
 800c498:	60fb      	str	r3, [r7, #12]
}
 800c49a:	bf00      	nop
 800c49c:	e7fe      	b.n	800c49c <prvDeleteTCB+0x58>
	}
 800c49e:	bf00      	nop
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	; (800c4e0 <prvResetNextTaskUnblockTime+0x38>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d104      	bne.n	800c4c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4b8:	4b0a      	ldr	r3, [pc, #40]	; (800c4e4 <prvResetNextTaskUnblockTime+0x3c>)
 800c4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c4be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4c0:	e008      	b.n	800c4d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c2:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <prvResetNextTaskUnblockTime+0x38>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	4a04      	ldr	r2, [pc, #16]	; (800c4e4 <prvResetNextTaskUnblockTime+0x3c>)
 800c4d2:	6013      	str	r3, [r2, #0]
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	20004f9c 	.word	0x20004f9c
 800c4e4:	20005004 	.word	0x20005004

0800c4e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4ee:	4b0b      	ldr	r3, [pc, #44]	; (800c51c <xTaskGetSchedulerState+0x34>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d102      	bne.n	800c4fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	607b      	str	r3, [r7, #4]
 800c4fa:	e008      	b.n	800c50e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4fc:	4b08      	ldr	r3, [pc, #32]	; (800c520 <xTaskGetSchedulerState+0x38>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d102      	bne.n	800c50a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c504:	2302      	movs	r3, #2
 800c506:	607b      	str	r3, [r7, #4]
 800c508:	e001      	b.n	800c50e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c50a:	2300      	movs	r3, #0
 800c50c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c50e:	687b      	ldr	r3, [r7, #4]
	}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	20004ff0 	.word	0x20004ff0
 800c520:	2000500c 	.word	0x2000500c

0800c524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c530:	2300      	movs	r3, #0
 800c532:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d05a      	beq.n	800c5f0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c53a:	4b30      	ldr	r3, [pc, #192]	; (800c5fc <xTaskPriorityDisinherit+0xd8>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	429a      	cmp	r2, r3
 800c542:	d00c      	beq.n	800c55e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c548:	b672      	cpsid	i
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	b662      	cpsie	i
 800c558:	60fb      	str	r3, [r7, #12]
}
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10c      	bne.n	800c580 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	b672      	cpsid	i
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	b662      	cpsie	i
 800c57a:	60bb      	str	r3, [r7, #8]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c584:	1e5a      	subs	r2, r3, #1
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c592:	429a      	cmp	r2, r3
 800c594:	d02c      	beq.n	800c5f0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d128      	bne.n	800c5f0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe f918 	bl	800a7d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c0:	4b0f      	ldr	r3, [pc, #60]	; (800c600 <xTaskPriorityDisinherit+0xdc>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d903      	bls.n	800c5d0 <xTaskPriorityDisinherit+0xac>
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5cc:	4a0c      	ldr	r2, [pc, #48]	; (800c600 <xTaskPriorityDisinherit+0xdc>)
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4a09      	ldr	r2, [pc, #36]	; (800c604 <xTaskPriorityDisinherit+0xe0>)
 800c5de:	441a      	add	r2, r3
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	f7fe f899 	bl	800a71e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5f0:	697b      	ldr	r3, [r7, #20]
	}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20004b10 	.word	0x20004b10
 800c600:	20004fec 	.word	0x20004fec
 800c604:	20004b14 	.word	0x20004b14

0800c608 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c612:	4b21      	ldr	r3, [pc, #132]	; (800c698 <prvAddCurrentTaskToDelayedList+0x90>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c618:	4b20      	ldr	r3, [pc, #128]	; (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3304      	adds	r3, #4
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe f8da 	bl	800a7d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62a:	d10a      	bne.n	800c642 <prvAddCurrentTaskToDelayedList+0x3a>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c632:	4b1a      	ldr	r3, [pc, #104]	; (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3304      	adds	r3, #4
 800c638:	4619      	mov	r1, r3
 800c63a:	4819      	ldr	r0, [pc, #100]	; (800c6a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c63c:	f7fe f86f 	bl	800a71e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c640:	e026      	b.n	800c690 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4413      	add	r3, r2
 800c648:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c64a:	4b14      	ldr	r3, [pc, #80]	; (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	429a      	cmp	r2, r3
 800c658:	d209      	bcs.n	800c66e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c65a:	4b12      	ldr	r3, [pc, #72]	; (800c6a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3304      	adds	r3, #4
 800c664:	4619      	mov	r1, r3
 800c666:	4610      	mov	r0, r2
 800c668:	f7fe f87d 	bl	800a766 <vListInsert>
}
 800c66c:	e010      	b.n	800c690 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c66e:	4b0e      	ldr	r3, [pc, #56]	; (800c6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <prvAddCurrentTaskToDelayedList+0x94>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3304      	adds	r3, #4
 800c678:	4619      	mov	r1, r3
 800c67a:	4610      	mov	r0, r2
 800c67c:	f7fe f873 	bl	800a766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c680:	4b0a      	ldr	r3, [pc, #40]	; (800c6ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	d202      	bcs.n	800c690 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c68a:	4a08      	ldr	r2, [pc, #32]	; (800c6ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	6013      	str	r3, [r2, #0]
}
 800c690:	bf00      	nop
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20004fe8 	.word	0x20004fe8
 800c69c:	20004b10 	.word	0x20004b10
 800c6a0:	20004fd0 	.word	0x20004fd0
 800c6a4:	20004fa0 	.word	0x20004fa0
 800c6a8:	20004f9c 	.word	0x20004f9c
 800c6ac:	20005004 	.word	0x20005004

0800c6b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	; 0x28
 800c6b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6ba:	f000 fb15 	bl	800cce8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6be:	4b1d      	ldr	r3, [pc, #116]	; (800c734 <xTimerCreateTimerTask+0x84>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d021      	beq.n	800c70a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6ce:	1d3a      	adds	r2, r7, #4
 800c6d0:	f107 0108 	add.w	r1, r7, #8
 800c6d4:	f107 030c 	add.w	r3, r7, #12
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fd fdf5 	bl	800a2c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	9202      	str	r2, [sp, #8]
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	460a      	mov	r2, r1
 800c6f0:	4911      	ldr	r1, [pc, #68]	; (800c738 <xTimerCreateTimerTask+0x88>)
 800c6f2:	4812      	ldr	r0, [pc, #72]	; (800c73c <xTimerCreateTimerTask+0x8c>)
 800c6f4:	f7ff f8a8 	bl	800b848 <xTaskCreateStatic>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	4a11      	ldr	r2, [pc, #68]	; (800c740 <xTimerCreateTimerTask+0x90>)
 800c6fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6fe:	4b10      	ldr	r3, [pc, #64]	; (800c740 <xTimerCreateTimerTask+0x90>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c706:	2301      	movs	r3, #1
 800c708:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10c      	bne.n	800c72a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c714:	b672      	cpsid	i
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	b662      	cpsie	i
 800c724:	613b      	str	r3, [r7, #16]
}
 800c726:	bf00      	nop
 800c728:	e7fe      	b.n	800c728 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c72a:	697b      	ldr	r3, [r7, #20]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20005040 	.word	0x20005040
 800c738:	08010820 	.word	0x08010820
 800c73c:	0800c881 	.word	0x0800c881
 800c740:	20005044 	.word	0x20005044

0800c744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08a      	sub	sp, #40	; 0x28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c752:	2300      	movs	r3, #0
 800c754:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10c      	bne.n	800c776 <xTimerGenericCommand+0x32>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	b672      	cpsid	i
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	b662      	cpsie	i
 800c770:	623b      	str	r3, [r7, #32]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c776:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <xTimerGenericCommand+0x9c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d02a      	beq.n	800c7d4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b05      	cmp	r3, #5
 800c78e:	dc18      	bgt.n	800c7c2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c790:	f7ff feaa 	bl	800c4e8 <xTaskGetSchedulerState>
 800c794:	4603      	mov	r3, r0
 800c796:	2b02      	cmp	r3, #2
 800c798:	d109      	bne.n	800c7ae <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c79a:	4b11      	ldr	r3, [pc, #68]	; (800c7e0 <xTimerGenericCommand+0x9c>)
 800c79c:	6818      	ldr	r0, [r3, #0]
 800c79e:	f107 0110 	add.w	r1, r7, #16
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a6:	f7fe fbcf 	bl	800af48 <xQueueGenericSend>
 800c7aa:	6278      	str	r0, [r7, #36]	; 0x24
 800c7ac:	e012      	b.n	800c7d4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7ae:	4b0c      	ldr	r3, [pc, #48]	; (800c7e0 <xTimerGenericCommand+0x9c>)
 800c7b0:	6818      	ldr	r0, [r3, #0]
 800c7b2:	f107 0110 	add.w	r1, r7, #16
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f7fe fbc5 	bl	800af48 <xQueueGenericSend>
 800c7be:	6278      	str	r0, [r7, #36]	; 0x24
 800c7c0:	e008      	b.n	800c7d4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7c2:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <xTimerGenericCommand+0x9c>)
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	f107 0110 	add.w	r1, r7, #16
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	f7fe fcc1 	bl	800b154 <xQueueGenericSendFromISR>
 800c7d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3728      	adds	r7, #40	; 0x28
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20005040 	.word	0x20005040

0800c7e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b088      	sub	sp, #32
 800c7e8:	af02      	add	r7, sp, #8
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ee:	4b23      	ldr	r3, [pc, #140]	; (800c87c <prvProcessExpiredTimer+0x98>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fd ffeb 	bl	800a7d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c808:	f003 0304 	and.w	r3, r3, #4
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d024      	beq.n	800c85a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	699a      	ldr	r2, [r3, #24]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	18d1      	adds	r1, r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	6978      	ldr	r0, [r7, #20]
 800c81e:	f000 f8d3 	bl	800c9c8 <prvInsertTimerInActiveList>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d021      	beq.n	800c86c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c828:	2300      	movs	r3, #0
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2300      	movs	r3, #0
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	2100      	movs	r1, #0
 800c832:	6978      	ldr	r0, [r7, #20]
 800c834:	f7ff ff86 	bl	800c744 <xTimerGenericCommand>
 800c838:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d115      	bne.n	800c86c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	b672      	cpsid	i
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	b662      	cpsie	i
 800c854:	60fb      	str	r3, [r7, #12]
}
 800c856:	bf00      	nop
 800c858:	e7fe      	b.n	800c858 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c860:	f023 0301 	bic.w	r3, r3, #1
 800c864:	b2da      	uxtb	r2, r3
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	6978      	ldr	r0, [r7, #20]
 800c872:	4798      	blx	r3
}
 800c874:	bf00      	nop
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20005038 	.word	0x20005038

0800c880 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c888:	f107 0308 	add.w	r3, r7, #8
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f857 	bl	800c940 <prvGetNextExpireTime>
 800c892:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	4619      	mov	r1, r3
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f000 f803 	bl	800c8a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c89e:	f000 f8d5 	bl	800ca4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8a2:	e7f1      	b.n	800c888 <prvTimerTask+0x8>

0800c8a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c8ae:	f7ff fa15 	bl	800bcdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8b2:	f107 0308 	add.w	r3, r7, #8
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 f866 	bl	800c988 <prvSampleTimeNow>
 800c8bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d130      	bne.n	800c926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <prvProcessTimerOrBlockTask+0x3c>
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d806      	bhi.n	800c8e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c8d2:	f7ff fa11 	bl	800bcf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8d6:	68f9      	ldr	r1, [r7, #12]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff ff83 	bl	800c7e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8de:	e024      	b.n	800c92a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d008      	beq.n	800c8f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8e6:	4b13      	ldr	r3, [pc, #76]	; (800c934 <prvProcessTimerOrBlockTask+0x90>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <prvProcessTimerOrBlockTask+0x50>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e000      	b.n	800c8f6 <prvProcessTimerOrBlockTask+0x52>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8f8:	4b0f      	ldr	r3, [pc, #60]	; (800c938 <prvProcessTimerOrBlockTask+0x94>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	4619      	mov	r1, r3
 800c906:	f7fe ff6b 	bl	800b7e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c90a:	f7ff f9f5 	bl	800bcf8 <xTaskResumeAll>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10a      	bne.n	800c92a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c914:	4b09      	ldr	r3, [pc, #36]	; (800c93c <prvProcessTimerOrBlockTask+0x98>)
 800c916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	f3bf 8f6f 	isb	sy
}
 800c924:	e001      	b.n	800c92a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c926:	f7ff f9e7 	bl	800bcf8 <xTaskResumeAll>
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	2000503c 	.word	0x2000503c
 800c938:	20005040 	.word	0x20005040
 800c93c:	e000ed04 	.word	0xe000ed04

0800c940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c948:	4b0e      	ldr	r3, [pc, #56]	; (800c984 <prvGetNextExpireTime+0x44>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <prvGetNextExpireTime+0x16>
 800c952:	2201      	movs	r2, #1
 800c954:	e000      	b.n	800c958 <prvGetNextExpireTime+0x18>
 800c956:	2200      	movs	r2, #0
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d105      	bne.n	800c970 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <prvGetNextExpireTime+0x44>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	e001      	b.n	800c974 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c970:	2300      	movs	r3, #0
 800c972:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c974:	68fb      	ldr	r3, [r7, #12]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3714      	adds	r7, #20
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	20005038 	.word	0x20005038

0800c988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c990:	f7ff fa52 	bl	800be38 <xTaskGetTickCount>
 800c994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c996:	4b0b      	ldr	r3, [pc, #44]	; (800c9c4 <prvSampleTimeNow+0x3c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d205      	bcs.n	800c9ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c9a0:	f000 f93c 	bl	800cc1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	e002      	b.n	800c9b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9b2:	4a04      	ldr	r2, [pc, #16]	; (800c9c4 <prvSampleTimeNow+0x3c>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20005048 	.word	0x20005048

0800c9c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d812      	bhi.n	800ca14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	1ad2      	subs	r2, r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	699b      	ldr	r3, [r3, #24]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d302      	bcc.n	800ca02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	e01b      	b.n	800ca3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca02:	4b10      	ldr	r3, [pc, #64]	; (800ca44 <prvInsertTimerInActiveList+0x7c>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	f7fd feaa 	bl	800a766 <vListInsert>
 800ca12:	e012      	b.n	800ca3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d206      	bcs.n	800ca2a <prvInsertTimerInActiveList+0x62>
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d302      	bcc.n	800ca2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca24:	2301      	movs	r3, #1
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	e007      	b.n	800ca3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca2a:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <prvInsertTimerInActiveList+0x80>)
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3304      	adds	r3, #4
 800ca32:	4619      	mov	r1, r3
 800ca34:	4610      	mov	r0, r2
 800ca36:	f7fd fe96 	bl	800a766 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca3a:	697b      	ldr	r3, [r7, #20]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	2000503c 	.word	0x2000503c
 800ca48:	20005038 	.word	0x20005038

0800ca4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08e      	sub	sp, #56	; 0x38
 800ca50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca52:	e0d0      	b.n	800cbf6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	da1a      	bge.n	800ca90 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca5a:	1d3b      	adds	r3, r7, #4
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10c      	bne.n	800ca80 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	b672      	cpsid	i
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	b662      	cpsie	i
 800ca7a:	61fb      	str	r3, [r7, #28]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca86:	6850      	ldr	r0, [r2, #4]
 800ca88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca8a:	6892      	ldr	r2, [r2, #8]
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f2c0 80ae 	blt.w	800cbf4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d004      	beq.n	800caae <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	3304      	adds	r3, #4
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fd fe95 	bl	800a7d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800caae:	463b      	mov	r3, r7
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7ff ff69 	bl	800c988 <prvSampleTimeNow>
 800cab6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b09      	cmp	r3, #9
 800cabc:	f200 809b 	bhi.w	800cbf6 <prvProcessReceivedCommands+0x1aa>
 800cac0:	a201      	add	r2, pc, #4	; (adr r2, 800cac8 <prvProcessReceivedCommands+0x7c>)
 800cac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac6:	bf00      	nop
 800cac8:	0800caf1 	.word	0x0800caf1
 800cacc:	0800caf1 	.word	0x0800caf1
 800cad0:	0800caf1 	.word	0x0800caf1
 800cad4:	0800cb69 	.word	0x0800cb69
 800cad8:	0800cb7d 	.word	0x0800cb7d
 800cadc:	0800cbcb 	.word	0x0800cbcb
 800cae0:	0800caf1 	.word	0x0800caf1
 800cae4:	0800caf1 	.word	0x0800caf1
 800cae8:	0800cb69 	.word	0x0800cb69
 800caec:	0800cb7d 	.word	0x0800cb7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caf6:	f043 0301 	orr.w	r3, r3, #1
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	699b      	ldr	r3, [r3, #24]
 800cb08:	18d1      	adds	r1, r2, r3
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb10:	f7ff ff5a 	bl	800c9c8 <prvInsertTimerInActiveList>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d06d      	beq.n	800cbf6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb28:	f003 0304 	and.w	r3, r3, #4
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d062      	beq.n	800cbf6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	441a      	add	r2, r3
 800cb38:	2300      	movs	r3, #0
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	2100      	movs	r1, #0
 800cb40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb42:	f7ff fdff 	bl	800c744 <xTimerGenericCommand>
 800cb46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb48:	6a3b      	ldr	r3, [r7, #32]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d153      	bne.n	800cbf6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb52:	b672      	cpsid	i
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	b662      	cpsie	i
 800cb62:	61bb      	str	r3, [r7, #24]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb6e:	f023 0301 	bic.w	r3, r3, #1
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb7a:	e03c      	b.n	800cbf6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb82:	f043 0301 	orr.w	r3, r3, #1
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10c      	bne.n	800cbb6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	b672      	cpsid	i
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	b662      	cpsie	i
 800cbb0:	617b      	str	r3, [r7, #20]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	699a      	ldr	r2, [r3, #24]
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	18d1      	adds	r1, r2, r3
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbc4:	f7ff ff00 	bl	800c9c8 <prvInsertTimerInActiveList>
					break;
 800cbc8:	e015      	b.n	800cbf6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbd0:	f003 0302 	and.w	r3, r3, #2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d103      	bne.n	800cbe0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800cbd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbda:	f7fd fc59 	bl	800a490 <vPortFree>
 800cbde:	e00a      	b.n	800cbf6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbe6:	f023 0301 	bic.w	r3, r3, #1
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbf2:	e000      	b.n	800cbf6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cbf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbf6:	4b08      	ldr	r3, [pc, #32]	; (800cc18 <prvProcessReceivedCommands+0x1cc>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	1d39      	adds	r1, r7, #4
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fb48 	bl	800b294 <xQueueReceive>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f47f af24 	bne.w	800ca54 <prvProcessReceivedCommands+0x8>
	}
}
 800cc0c:	bf00      	nop
 800cc0e:	bf00      	nop
 800cc10:	3730      	adds	r7, #48	; 0x30
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20005040 	.word	0x20005040

0800cc1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc22:	e04a      	b.n	800ccba <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc24:	4b2e      	ldr	r3, [pc, #184]	; (800cce0 <prvSwitchTimerLists+0xc4>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc2e:	4b2c      	ldr	r3, [pc, #176]	; (800cce0 <prvSwitchTimerLists+0xc4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fd fdcb 	bl	800a7d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc50:	f003 0304 	and.w	r3, r3, #4
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d030      	beq.n	800ccba <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	699b      	ldr	r3, [r3, #24]
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	4413      	add	r3, r2
 800cc60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d90e      	bls.n	800cc88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc76:	4b1a      	ldr	r3, [pc, #104]	; (800cce0 <prvSwitchTimerLists+0xc4>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4610      	mov	r0, r2
 800cc82:	f7fd fd70 	bl	800a766 <vListInsert>
 800cc86:	e018      	b.n	800ccba <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc88:	2300      	movs	r3, #0
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	2100      	movs	r1, #0
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f7ff fd56 	bl	800c744 <xTimerGenericCommand>
 800cc98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10c      	bne.n	800ccba <prvSwitchTimerLists+0x9e>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	b672      	cpsid	i
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	b662      	cpsie	i
 800ccb4:	603b      	str	r3, [r7, #0]
}
 800ccb6:	bf00      	nop
 800ccb8:	e7fe      	b.n	800ccb8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccba:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <prvSwitchTimerLists+0xc4>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1af      	bne.n	800cc24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ccc4:	4b06      	ldr	r3, [pc, #24]	; (800cce0 <prvSwitchTimerLists+0xc4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccca:	4b06      	ldr	r3, [pc, #24]	; (800cce4 <prvSwitchTimerLists+0xc8>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a04      	ldr	r2, [pc, #16]	; (800cce0 <prvSwitchTimerLists+0xc4>)
 800ccd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ccd2:	4a04      	ldr	r2, [pc, #16]	; (800cce4 <prvSwitchTimerLists+0xc8>)
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	6013      	str	r3, [r2, #0]
}
 800ccd8:	bf00      	nop
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	20005038 	.word	0x20005038
 800cce4:	2000503c 	.word	0x2000503c

0800cce8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ccee:	f7fd fead 	bl	800aa4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ccf2:	4b15      	ldr	r3, [pc, #84]	; (800cd48 <prvCheckForValidListAndQueue+0x60>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d120      	bne.n	800cd3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccfa:	4814      	ldr	r0, [pc, #80]	; (800cd4c <prvCheckForValidListAndQueue+0x64>)
 800ccfc:	f7fd fce2 	bl	800a6c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd00:	4813      	ldr	r0, [pc, #76]	; (800cd50 <prvCheckForValidListAndQueue+0x68>)
 800cd02:	f7fd fcdf 	bl	800a6c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd06:	4b13      	ldr	r3, [pc, #76]	; (800cd54 <prvCheckForValidListAndQueue+0x6c>)
 800cd08:	4a10      	ldr	r2, [pc, #64]	; (800cd4c <prvCheckForValidListAndQueue+0x64>)
 800cd0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd0c:	4b12      	ldr	r3, [pc, #72]	; (800cd58 <prvCheckForValidListAndQueue+0x70>)
 800cd0e:	4a10      	ldr	r2, [pc, #64]	; (800cd50 <prvCheckForValidListAndQueue+0x68>)
 800cd10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd12:	2300      	movs	r3, #0
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	4b11      	ldr	r3, [pc, #68]	; (800cd5c <prvCheckForValidListAndQueue+0x74>)
 800cd18:	4a11      	ldr	r2, [pc, #68]	; (800cd60 <prvCheckForValidListAndQueue+0x78>)
 800cd1a:	2110      	movs	r1, #16
 800cd1c:	200a      	movs	r0, #10
 800cd1e:	f7fe f82b 	bl	800ad78 <xQueueGenericCreateStatic>
 800cd22:	4603      	mov	r3, r0
 800cd24:	4a08      	ldr	r2, [pc, #32]	; (800cd48 <prvCheckForValidListAndQueue+0x60>)
 800cd26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd28:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <prvCheckForValidListAndQueue+0x60>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d005      	beq.n	800cd3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd30:	4b05      	ldr	r3, [pc, #20]	; (800cd48 <prvCheckForValidListAndQueue+0x60>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	490b      	ldr	r1, [pc, #44]	; (800cd64 <prvCheckForValidListAndQueue+0x7c>)
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fd28 	bl	800b78c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd3c:	f7fd feba 	bl	800aab4 <vPortExitCritical>
}
 800cd40:	bf00      	nop
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20005040 	.word	0x20005040
 800cd4c:	20005010 	.word	0x20005010
 800cd50:	20005024 	.word	0x20005024
 800cd54:	20005038 	.word	0x20005038
 800cd58:	2000503c 	.word	0x2000503c
 800cd5c:	200050ec 	.word	0x200050ec
 800cd60:	2000504c 	.word	0x2000504c
 800cd64:	08010828 	.word	0x08010828

0800cd68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	4613      	mov	r3, r2
 800cd74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	e025      	b.n	800cdcc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d003      	beq.n	800cda4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	79fa      	ldrb	r2, [r7, #7]
 800cdbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f003 f963 	bl	801008c <USBD_LL_Init>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3718      	adds	r7, #24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cde8:	2303      	movs	r3, #3
 800cdea:	e010      	b.n	800ce0e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfc:	f107 020e 	add.w	r2, r7, #14
 800ce00:	4610      	mov	r0, r2
 800ce02:	4798      	blx	r3
 800ce04:	4602      	mov	r2, r0
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f003 f986 	bl	8010130 <USBD_LL_Start>
 800ce24:	4603      	mov	r3, r0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b083      	sub	sp, #12
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ce50:	2303      	movs	r3, #3
 800ce52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d009      	beq.n	800ce72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	78fa      	ldrb	r2, [r7, #3]
 800ce68:	4611      	mov	r1, r2
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	4798      	blx	r3
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d007      	beq.n	800cea2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	78fa      	ldrb	r2, [r7, #3]
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	4798      	blx	r3
  }

  return USBD_OK;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f000 ff65 	bl	800dd8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ced2:	461a      	mov	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cee0:	f003 031f 	and.w	r3, r3, #31
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d01a      	beq.n	800cf1e <USBD_LL_SetupStage+0x72>
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d822      	bhi.n	800cf32 <USBD_LL_SetupStage+0x86>
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <USBD_LL_SetupStage+0x4a>
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d00a      	beq.n	800cf0a <USBD_LL_SetupStage+0x5e>
 800cef4:	e01d      	b.n	800cf32 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa18 	bl	800d334 <USBD_StdDevReq>
 800cf04:	4603      	mov	r3, r0
 800cf06:	73fb      	strb	r3, [r7, #15]
      break;
 800cf08:	e020      	b.n	800cf4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fa7c 	bl	800d410 <USBD_StdItfReq>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf1c:	e016      	b.n	800cf4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 faba 	bl	800d4a0 <USBD_StdEPReq>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf30:	e00c      	b.n	800cf4c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f003 f974 	bl	801022e <USBD_LL_StallEP>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73fb      	strb	r3, [r7, #15]
      break;
 800cf4a:	bf00      	nop
  }

  return ret;
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b086      	sub	sp, #24
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	60f8      	str	r0, [r7, #12]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	607a      	str	r2, [r7, #4]
 800cf62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cf64:	7afb      	ldrb	r3, [r7, #11]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d137      	bne.n	800cfda <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf78:	2b03      	cmp	r3, #3
 800cf7a:	d14a      	bne.n	800d012 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d913      	bls.n	800cfb0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	689a      	ldr	r2, [r3, #8]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	1ad2      	subs	r2, r2, r3
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	68da      	ldr	r2, [r3, #12]
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	bf28      	it	cs
 800cfa2:	4613      	movcs	r3, r2
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	6879      	ldr	r1, [r7, #4]
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 ffc7 	bl	800df3c <USBD_CtlContinueRx>
 800cfae:	e030      	b.n	800d012 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00a      	beq.n	800cfd2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cfc2:	2b03      	cmp	r3, #3
 800cfc4:	d105      	bne.n	800cfd2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f000 ffc3 	bl	800df5e <USBD_CtlSendStatus>
 800cfd8:	e01b      	b.n	800d012 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d013      	beq.n	800d00e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d10e      	bne.n	800d00e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	7afa      	ldrb	r2, [r7, #11]
 800cffa:	4611      	mov	r1, r2
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	4798      	blx	r3
 800d000:	4603      	mov	r3, r0
 800d002:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d004:	7dfb      	ldrb	r3, [r7, #23]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d003      	beq.n	800d012 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d00a:	7dfb      	ldrb	r3, [r7, #23]
 800d00c:	e002      	b.n	800d014 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d00e:	2303      	movs	r3, #3
 800d010:	e000      	b.n	800d014 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	460b      	mov	r3, r1
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d02a:	7afb      	ldrb	r3, [r7, #11]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d16a      	bne.n	800d106 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	3314      	adds	r3, #20
 800d034:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d155      	bne.n	800d0ec <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d914      	bls.n	800d076 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	689a      	ldr	r2, [r3, #8]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	1ad2      	subs	r2, r2, r3
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	461a      	mov	r2, r3
 800d060:	6879      	ldr	r1, [r7, #4]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f000 ff59 	bl	800df1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d068:	2300      	movs	r3, #0
 800d06a:	2200      	movs	r2, #0
 800d06c:	2100      	movs	r1, #0
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f003 f987 	bl	8010382 <USBD_LL_PrepareReceive>
 800d074:	e03a      	b.n	800d0ec <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d11c      	bne.n	800d0bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d316      	bcc.n	800d0bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d098:	429a      	cmp	r2, r3
 800d09a:	d20f      	bcs.n	800d0bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d09c:	2200      	movs	r2, #0
 800d09e:	2100      	movs	r1, #0
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 ff3a 	bl	800df1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f003 f964 	bl	8010382 <USBD_LL_PrepareReceive>
 800d0ba:	e017      	b.n	800d0ec <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00a      	beq.n	800d0de <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d0ce:	2b03      	cmp	r3, #3
 800d0d0:	d105      	bne.n	800d0de <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0de:	2180      	movs	r1, #128	; 0x80
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f003 f8a4 	bl	801022e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 ff4c 	bl	800df84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d123      	bne.n	800d13e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f7ff fe99 	bl	800ce2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d104:	e01b      	b.n	800d13e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d013      	beq.n	800d13a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d118:	2b03      	cmp	r3, #3
 800d11a:	d10e      	bne.n	800d13a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	7afa      	ldrb	r2, [r7, #11]
 800d126:	4611      	mov	r1, r2
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	4798      	blx	r3
 800d12c:	4603      	mov	r3, r0
 800d12e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d130:	7dfb      	ldrb	r3, [r7, #23]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800d136:	7dfb      	ldrb	r3, [r7, #23]
 800d138:	e002      	b.n	800d140 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e000      	b.n	800d140 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3718      	adds	r7, #24
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d174:	2b00      	cmp	r3, #0
 800d176:	d009      	beq.n	800d18c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	6852      	ldr	r2, [r2, #4]
 800d184:	b2d2      	uxtb	r2, r2
 800d186:	4611      	mov	r1, r2
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d18c:	2340      	movs	r3, #64	; 0x40
 800d18e:	2200      	movs	r2, #0
 800d190:	2100      	movs	r1, #0
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f002 ffe7 	bl	8010166 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2240      	movs	r2, #64	; 0x40
 800d1a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1a8:	2340      	movs	r3, #64	; 0x40
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2180      	movs	r1, #128	; 0x80
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f002 ffd9 	bl	8010166 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2240      	movs	r2, #64	; 0x40
 800d1be:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b083      	sub	sp, #12
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	78fa      	ldrb	r2, [r7, #3]
 800d1da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2204      	movs	r2, #4
 800d202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d222:	2b04      	cmp	r3, #4
 800d224:	d105      	bne.n	800d232 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d24e:	2b03      	cmp	r3, #3
 800d250:	d10b      	bne.n	800d26a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d005      	beq.n	800d26a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	460b      	mov	r3, r1
 800d298:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d009      	beq.n	800d2ec <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	6852      	ldr	r2, [r2, #4]
 800d2e4:	b2d2      	uxtb	r2, r2
 800d2e6:	4611      	mov	r1, r2
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	4798      	blx	r3
  }

  return USBD_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d2f6:	b480      	push	{r7}
 800d2f8:	b087      	sub	sp, #28
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	3301      	adds	r3, #1
 800d30c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d314:	8a3b      	ldrh	r3, [r7, #16]
 800d316:	021b      	lsls	r3, r3, #8
 800d318:	b21a      	sxth	r2, r3
 800d31a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d31e:	4313      	orrs	r3, r2
 800d320:	b21b      	sxth	r3, r3
 800d322:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d324:	89fb      	ldrh	r3, [r7, #14]
}
 800d326:	4618      	mov	r0, r3
 800d328:	371c      	adds	r7, #28
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
	...

0800d334 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d33e:	2300      	movs	r3, #0
 800d340:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d34a:	2b40      	cmp	r3, #64	; 0x40
 800d34c:	d005      	beq.n	800d35a <USBD_StdDevReq+0x26>
 800d34e:	2b40      	cmp	r3, #64	; 0x40
 800d350:	d853      	bhi.n	800d3fa <USBD_StdDevReq+0xc6>
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00b      	beq.n	800d36e <USBD_StdDevReq+0x3a>
 800d356:	2b20      	cmp	r3, #32
 800d358:	d14f      	bne.n	800d3fa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	4798      	blx	r3
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]
    break;
 800d36c:	e04a      	b.n	800d404 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	785b      	ldrb	r3, [r3, #1]
 800d372:	2b09      	cmp	r3, #9
 800d374:	d83b      	bhi.n	800d3ee <USBD_StdDevReq+0xba>
 800d376:	a201      	add	r2, pc, #4	; (adr r2, 800d37c <USBD_StdDevReq+0x48>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800d3d1 	.word	0x0800d3d1
 800d380:	0800d3e5 	.word	0x0800d3e5
 800d384:	0800d3ef 	.word	0x0800d3ef
 800d388:	0800d3db 	.word	0x0800d3db
 800d38c:	0800d3ef 	.word	0x0800d3ef
 800d390:	0800d3af 	.word	0x0800d3af
 800d394:	0800d3a5 	.word	0x0800d3a5
 800d398:	0800d3ef 	.word	0x0800d3ef
 800d39c:	0800d3c7 	.word	0x0800d3c7
 800d3a0:	0800d3b9 	.word	0x0800d3b9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f9d8 	bl	800d75c <USBD_GetDescriptor>
      break;
 800d3ac:	e024      	b.n	800d3f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fb67 	bl	800da84 <USBD_SetAddress>
      break;
 800d3b6:	e01f      	b.n	800d3f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800d3b8:	6839      	ldr	r1, [r7, #0]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fba6 	bl	800db0c <USBD_SetConfig>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3c4:	e018      	b.n	800d3f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800d3c6:	6839      	ldr	r1, [r7, #0]
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fc43 	bl	800dc54 <USBD_GetConfig>
      break;
 800d3ce:	e013      	b.n	800d3f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800d3d0:	6839      	ldr	r1, [r7, #0]
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fc73 	bl	800dcbe <USBD_GetStatus>
      break;
 800d3d8:	e00e      	b.n	800d3f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fca1 	bl	800dd24 <USBD_SetFeature>
      break;
 800d3e2:	e009      	b.n	800d3f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800d3e4:	6839      	ldr	r1, [r7, #0]
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fcb0 	bl	800dd4c <USBD_ClrFeature>
      break;
 800d3ec:	e004      	b.n	800d3f8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fd06 	bl	800de02 <USBD_CtlError>
      break;
 800d3f6:	bf00      	nop
    }
    break;
 800d3f8:	e004      	b.n	800d404 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fd00 	bl	800de02 <USBD_CtlError>
    break;
 800d402:	bf00      	nop
  }

  return ret;
 800d404:	7bfb      	ldrb	r3, [r7, #15]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop

0800d410 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d426:	2b40      	cmp	r3, #64	; 0x40
 800d428:	d005      	beq.n	800d436 <USBD_StdItfReq+0x26>
 800d42a:	2b40      	cmp	r3, #64	; 0x40
 800d42c:	d82e      	bhi.n	800d48c <USBD_StdItfReq+0x7c>
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d001      	beq.n	800d436 <USBD_StdItfReq+0x26>
 800d432:	2b20      	cmp	r3, #32
 800d434:	d12a      	bne.n	800d48c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d43c:	3b01      	subs	r3, #1
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d81d      	bhi.n	800d47e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	889b      	ldrh	r3, [r3, #4]
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d813      	bhi.n	800d474 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	6839      	ldr	r1, [r7, #0]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	4798      	blx	r3
 800d45a:	4603      	mov	r3, r0
 800d45c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	88db      	ldrh	r3, [r3, #6]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d110      	bne.n	800d488 <USBD_StdItfReq+0x78>
 800d466:	7bfb      	ldrb	r3, [r7, #15]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10d      	bne.n	800d488 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fd76 	bl	800df5e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d472:	e009      	b.n	800d488 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d474:	6839      	ldr	r1, [r7, #0]
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fcc3 	bl	800de02 <USBD_CtlError>
      break;
 800d47c:	e004      	b.n	800d488 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fcbe 	bl	800de02 <USBD_CtlError>
      break;
 800d486:	e000      	b.n	800d48a <USBD_StdItfReq+0x7a>
      break;
 800d488:	bf00      	nop
    }
    break;
 800d48a:	e004      	b.n	800d496 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fcb7 	bl	800de02 <USBD_CtlError>
    break;
 800d494:	bf00      	nop
  }

  return ret;
 800d496:	7bfb      	ldrb	r3, [r7, #15]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	889b      	ldrh	r3, [r3, #4]
 800d4b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4bc:	2b40      	cmp	r3, #64	; 0x40
 800d4be:	d007      	beq.n	800d4d0 <USBD_StdEPReq+0x30>
 800d4c0:	2b40      	cmp	r3, #64	; 0x40
 800d4c2:	f200 8140 	bhi.w	800d746 <USBD_StdEPReq+0x2a6>
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00c      	beq.n	800d4e4 <USBD_StdEPReq+0x44>
 800d4ca:	2b20      	cmp	r3, #32
 800d4cc:	f040 813b 	bne.w	800d746 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	4798      	blx	r3
 800d4de:	4603      	mov	r3, r0
 800d4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e2:	e135      	b.n	800d750 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	2b03      	cmp	r3, #3
 800d4ea:	d007      	beq.n	800d4fc <USBD_StdEPReq+0x5c>
 800d4ec:	2b03      	cmp	r3, #3
 800d4ee:	f300 8124 	bgt.w	800d73a <USBD_StdEPReq+0x29a>
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d07b      	beq.n	800d5ee <USBD_StdEPReq+0x14e>
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d03b      	beq.n	800d572 <USBD_StdEPReq+0xd2>
 800d4fa:	e11e      	b.n	800d73a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d502:	2b02      	cmp	r3, #2
 800d504:	d002      	beq.n	800d50c <USBD_StdEPReq+0x6c>
 800d506:	2b03      	cmp	r3, #3
 800d508:	d016      	beq.n	800d538 <USBD_StdEPReq+0x98>
 800d50a:	e02c      	b.n	800d566 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00d      	beq.n	800d52e <USBD_StdEPReq+0x8e>
 800d512:	7bbb      	ldrb	r3, [r7, #14]
 800d514:	2b80      	cmp	r3, #128	; 0x80
 800d516:	d00a      	beq.n	800d52e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	4619      	mov	r1, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f002 fe86 	bl	801022e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d522:	2180      	movs	r1, #128	; 0x80
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f002 fe82 	bl	801022e <USBD_LL_StallEP>
 800d52a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d52c:	e020      	b.n	800d570 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fc66 	bl	800de02 <USBD_CtlError>
        break;
 800d536:	e01b      	b.n	800d570 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	885b      	ldrh	r3, [r3, #2]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10e      	bne.n	800d55e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d540:	7bbb      	ldrb	r3, [r7, #14]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00b      	beq.n	800d55e <USBD_StdEPReq+0xbe>
 800d546:	7bbb      	ldrb	r3, [r7, #14]
 800d548:	2b80      	cmp	r3, #128	; 0x80
 800d54a:	d008      	beq.n	800d55e <USBD_StdEPReq+0xbe>
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	88db      	ldrh	r3, [r3, #6]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d104      	bne.n	800d55e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800d554:	7bbb      	ldrb	r3, [r7, #14]
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f002 fe68 	bl	801022e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fcfd 	bl	800df5e <USBD_CtlSendStatus>

        break;
 800d564:	e004      	b.n	800d570 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fc4a 	bl	800de02 <USBD_CtlError>
        break;
 800d56e:	bf00      	nop
      }
      break;
 800d570:	e0e8      	b.n	800d744 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d002      	beq.n	800d582 <USBD_StdEPReq+0xe2>
 800d57c:	2b03      	cmp	r3, #3
 800d57e:	d016      	beq.n	800d5ae <USBD_StdEPReq+0x10e>
 800d580:	e02e      	b.n	800d5e0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d582:	7bbb      	ldrb	r3, [r7, #14]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00d      	beq.n	800d5a4 <USBD_StdEPReq+0x104>
 800d588:	7bbb      	ldrb	r3, [r7, #14]
 800d58a:	2b80      	cmp	r3, #128	; 0x80
 800d58c:	d00a      	beq.n	800d5a4 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d58e:	7bbb      	ldrb	r3, [r7, #14]
 800d590:	4619      	mov	r1, r3
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f002 fe4b 	bl	801022e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d598:	2180      	movs	r1, #128	; 0x80
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f002 fe47 	bl	801022e <USBD_LL_StallEP>
 800d5a0:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d5a2:	e023      	b.n	800d5ec <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fc2b 	bl	800de02 <USBD_CtlError>
        break;
 800d5ac:	e01e      	b.n	800d5ec <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	885b      	ldrh	r3, [r3, #2]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d119      	bne.n	800d5ea <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d5b6:	7bbb      	ldrb	r3, [r7, #14]
 800d5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d004      	beq.n	800d5ca <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d5c0:	7bbb      	ldrb	r3, [r7, #14]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f002 fe51 	bl	801026c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fcc7 	bl	800df5e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	4798      	blx	r3
        }
        break;
 800d5de:	e004      	b.n	800d5ea <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fc0d 	bl	800de02 <USBD_CtlError>
        break;
 800d5e8:	e000      	b.n	800d5ec <USBD_StdEPReq+0x14c>
        break;
 800d5ea:	bf00      	nop
      }
      break;
 800d5ec:	e0aa      	b.n	800d744 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d002      	beq.n	800d5fe <USBD_StdEPReq+0x15e>
 800d5f8:	2b03      	cmp	r3, #3
 800d5fa:	d032      	beq.n	800d662 <USBD_StdEPReq+0x1c2>
 800d5fc:	e097      	b.n	800d72e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d007      	beq.n	800d614 <USBD_StdEPReq+0x174>
 800d604:	7bbb      	ldrb	r3, [r7, #14]
 800d606:	2b80      	cmp	r3, #128	; 0x80
 800d608:	d004      	beq.n	800d614 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800d60a:	6839      	ldr	r1, [r7, #0]
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 fbf8 	bl	800de02 <USBD_CtlError>
          break;
 800d612:	e091      	b.n	800d738 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	da0b      	bge.n	800d634 <USBD_StdEPReq+0x194>
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d622:	4613      	mov	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	4413      	add	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	3310      	adds	r3, #16
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	4413      	add	r3, r2
 800d630:	3304      	adds	r3, #4
 800d632:	e00b      	b.n	800d64c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d634:	7bbb      	ldrb	r3, [r7, #14]
 800d636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d63a:	4613      	mov	r3, r2
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4413      	add	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	4413      	add	r3, r2
 800d64a:	3304      	adds	r3, #4
 800d64c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	2202      	movs	r2, #2
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fc42 	bl	800dee4 <USBD_CtlSendData>
        break;
 800d660:	e06a      	b.n	800d738 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800d662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d666:	2b00      	cmp	r3, #0
 800d668:	da11      	bge.n	800d68e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
 800d66c:	f003 020f 	and.w	r2, r3, #15
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	440b      	add	r3, r1
 800d67c:	3324      	adds	r3, #36	; 0x24
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d117      	bne.n	800d6b4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fbbb 	bl	800de02 <USBD_CtlError>
            break;
 800d68c:	e054      	b.n	800d738 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
 800d690:	f003 020f 	and.w	r2, r3, #15
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	4613      	mov	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	440b      	add	r3, r1
 800d6a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d104      	bne.n	800d6b4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fba8 	bl	800de02 <USBD_CtlError>
            break;
 800d6b2:	e041      	b.n	800d738 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	da0b      	bge.n	800d6d4 <USBD_StdEPReq+0x234>
 800d6bc:	7bbb      	ldrb	r3, [r7, #14]
 800d6be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	3310      	adds	r3, #16
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	e00b      	b.n	800d6ec <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
 800d6d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6da:	4613      	mov	r3, r2
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	4413      	add	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d6ee:	7bbb      	ldrb	r3, [r7, #14]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <USBD_StdEPReq+0x25a>
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
 800d6f6:	2b80      	cmp	r3, #128	; 0x80
 800d6f8:	d103      	bne.n	800d702 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	e00e      	b.n	800d720 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	4619      	mov	r1, r3
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f002 fdcf 	bl	80102aa <USBD_LL_IsStallEP>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d003      	beq.n	800d71a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2201      	movs	r2, #1
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	e002      	b.n	800d720 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2200      	movs	r2, #0
 800d71e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2202      	movs	r2, #2
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fbdc 	bl	800dee4 <USBD_CtlSendData>
          break;
 800d72c:	e004      	b.n	800d738 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fb66 	bl	800de02 <USBD_CtlError>
        break;
 800d736:	bf00      	nop
      }
      break;
 800d738:	e004      	b.n	800d744 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fb60 	bl	800de02 <USBD_CtlError>
      break;
 800d742:	bf00      	nop
    }
    break;
 800d744:	e004      	b.n	800d750 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800d746:	6839      	ldr	r1, [r7, #0]
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 fb5a 	bl	800de02 <USBD_CtlError>
    break;
 800d74e:	bf00      	nop
  }

  return ret;
 800d750:	7bfb      	ldrb	r3, [r7, #15]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
	...

0800d75c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d766:	2300      	movs	r3, #0
 800d768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d76a:	2300      	movs	r3, #0
 800d76c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d76e:	2300      	movs	r3, #0
 800d770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	885b      	ldrh	r3, [r3, #2]
 800d776:	0a1b      	lsrs	r3, r3, #8
 800d778:	b29b      	uxth	r3, r3
 800d77a:	3b01      	subs	r3, #1
 800d77c:	2b0e      	cmp	r3, #14
 800d77e:	f200 8152 	bhi.w	800da26 <USBD_GetDescriptor+0x2ca>
 800d782:	a201      	add	r2, pc, #4	; (adr r2, 800d788 <USBD_GetDescriptor+0x2c>)
 800d784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d788:	0800d7f9 	.word	0x0800d7f9
 800d78c:	0800d811 	.word	0x0800d811
 800d790:	0800d851 	.word	0x0800d851
 800d794:	0800da27 	.word	0x0800da27
 800d798:	0800da27 	.word	0x0800da27
 800d79c:	0800d9c7 	.word	0x0800d9c7
 800d7a0:	0800d9f3 	.word	0x0800d9f3
 800d7a4:	0800da27 	.word	0x0800da27
 800d7a8:	0800da27 	.word	0x0800da27
 800d7ac:	0800da27 	.word	0x0800da27
 800d7b0:	0800da27 	.word	0x0800da27
 800d7b4:	0800da27 	.word	0x0800da27
 800d7b8:	0800da27 	.word	0x0800da27
 800d7bc:	0800da27 	.word	0x0800da27
 800d7c0:	0800d7c5 	.word	0x0800d7c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00b      	beq.n	800d7e8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7d6:	69db      	ldr	r3, [r3, #28]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	7c12      	ldrb	r2, [r2, #16]
 800d7dc:	f107 0108 	add.w	r1, r7, #8
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	4798      	blx	r3
 800d7e4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d7e6:	e126      	b.n	800da36 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d7e8:	6839      	ldr	r1, [r7, #0]
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fb09 	bl	800de02 <USBD_CtlError>
      err++;
 800d7f0:	7afb      	ldrb	r3, [r7, #11]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	72fb      	strb	r3, [r7, #11]
    break;
 800d7f6:	e11e      	b.n	800da36 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	7c12      	ldrb	r2, [r2, #16]
 800d804:	f107 0108 	add.w	r1, r7, #8
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
 800d80c:	60f8      	str	r0, [r7, #12]
    break;
 800d80e:	e112      	b.n	800da36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7c1b      	ldrb	r3, [r3, #16]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10d      	bne.n	800d834 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d820:	f107 0208 	add.w	r2, r7, #8
 800d824:	4610      	mov	r0, r2
 800d826:	4798      	blx	r3
 800d828:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3301      	adds	r3, #1
 800d82e:	2202      	movs	r2, #2
 800d830:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d832:	e100      	b.n	800da36 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83c:	f107 0208 	add.w	r2, r7, #8
 800d840:	4610      	mov	r0, r2
 800d842:	4798      	blx	r3
 800d844:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	2202      	movs	r2, #2
 800d84c:	701a      	strb	r2, [r3, #0]
    break;
 800d84e:	e0f2      	b.n	800da36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	885b      	ldrh	r3, [r3, #2]
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b05      	cmp	r3, #5
 800d858:	f200 80ac 	bhi.w	800d9b4 <USBD_GetDescriptor+0x258>
 800d85c:	a201      	add	r2, pc, #4	; (adr r2, 800d864 <USBD_GetDescriptor+0x108>)
 800d85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d862:	bf00      	nop
 800d864:	0800d87d 	.word	0x0800d87d
 800d868:	0800d8b1 	.word	0x0800d8b1
 800d86c:	0800d8e5 	.word	0x0800d8e5
 800d870:	0800d919 	.word	0x0800d919
 800d874:	0800d94d 	.word	0x0800d94d
 800d878:	0800d981 	.word	0x0800d981
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00b      	beq.n	800d8a0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	7c12      	ldrb	r2, [r2, #16]
 800d894:	f107 0108 	add.w	r1, r7, #8
 800d898:	4610      	mov	r0, r2
 800d89a:	4798      	blx	r3
 800d89c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d89e:	e091      	b.n	800d9c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d8a0:	6839      	ldr	r1, [r7, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 faad 	bl	800de02 <USBD_CtlError>
        err++;
 800d8a8:	7afb      	ldrb	r3, [r7, #11]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	72fb      	strb	r3, [r7, #11]
      break;
 800d8ae:	e089      	b.n	800d9c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00b      	beq.n	800d8d4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	7c12      	ldrb	r2, [r2, #16]
 800d8c8:	f107 0108 	add.w	r1, r7, #8
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	4798      	blx	r3
 800d8d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8d2:	e077      	b.n	800d9c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa93 	bl	800de02 <USBD_CtlError>
        err++;
 800d8dc:	7afb      	ldrb	r3, [r7, #11]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	72fb      	strb	r3, [r7, #11]
      break;
 800d8e2:	e06f      	b.n	800d9c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00b      	beq.n	800d908 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	7c12      	ldrb	r2, [r2, #16]
 800d8fc:	f107 0108 	add.w	r1, r7, #8
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
 800d904:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d906:	e05d      	b.n	800d9c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fa79 	bl	800de02 <USBD_CtlError>
        err++;
 800d910:	7afb      	ldrb	r3, [r7, #11]
 800d912:	3301      	adds	r3, #1
 800d914:	72fb      	strb	r3, [r7, #11]
      break;
 800d916:	e055      	b.n	800d9c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00b      	beq.n	800d93c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	7c12      	ldrb	r2, [r2, #16]
 800d930:	f107 0108 	add.w	r1, r7, #8
 800d934:	4610      	mov	r0, r2
 800d936:	4798      	blx	r3
 800d938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d93a:	e043      	b.n	800d9c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fa5f 	bl	800de02 <USBD_CtlError>
        err++;
 800d944:	7afb      	ldrb	r3, [r7, #11]
 800d946:	3301      	adds	r3, #1
 800d948:	72fb      	strb	r3, [r7, #11]
      break;
 800d94a:	e03b      	b.n	800d9c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00b      	beq.n	800d970 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d95e:	695b      	ldr	r3, [r3, #20]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	7c12      	ldrb	r2, [r2, #16]
 800d964:	f107 0108 	add.w	r1, r7, #8
 800d968:	4610      	mov	r0, r2
 800d96a:	4798      	blx	r3
 800d96c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d96e:	e029      	b.n	800d9c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d970:	6839      	ldr	r1, [r7, #0]
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fa45 	bl	800de02 <USBD_CtlError>
        err++;
 800d978:	7afb      	ldrb	r3, [r7, #11]
 800d97a:	3301      	adds	r3, #1
 800d97c:	72fb      	strb	r3, [r7, #11]
      break;
 800d97e:	e021      	b.n	800d9c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00b      	beq.n	800d9a4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	7c12      	ldrb	r2, [r2, #16]
 800d998:	f107 0108 	add.w	r1, r7, #8
 800d99c:	4610      	mov	r0, r2
 800d99e:	4798      	blx	r3
 800d9a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9a2:	e00f      	b.n	800d9c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fa2b 	bl	800de02 <USBD_CtlError>
        err++;
 800d9ac:	7afb      	ldrb	r3, [r7, #11]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	72fb      	strb	r3, [r7, #11]
      break;
 800d9b2:	e007      	b.n	800d9c4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 fa23 	bl	800de02 <USBD_CtlError>
      err++;
 800d9bc:	7afb      	ldrb	r3, [r7, #11]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800d9c2:	bf00      	nop
    }
    break;
 800d9c4:	e037      	b.n	800da36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	7c1b      	ldrb	r3, [r3, #16]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d109      	bne.n	800d9e2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d6:	f107 0208 	add.w	r2, r7, #8
 800d9da:	4610      	mov	r0, r2
 800d9dc:	4798      	blx	r3
 800d9de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d9e0:	e029      	b.n	800da36 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fa0c 	bl	800de02 <USBD_CtlError>
      err++;
 800d9ea:	7afb      	ldrb	r3, [r7, #11]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	72fb      	strb	r3, [r7, #11]
    break;
 800d9f0:	e021      	b.n	800da36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	7c1b      	ldrb	r3, [r3, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10d      	bne.n	800da16 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da02:	f107 0208 	add.w	r2, r7, #8
 800da06:	4610      	mov	r0, r2
 800da08:	4798      	blx	r3
 800da0a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3301      	adds	r3, #1
 800da10:	2207      	movs	r2, #7
 800da12:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800da14:	e00f      	b.n	800da36 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800da16:	6839      	ldr	r1, [r7, #0]
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f9f2 	bl	800de02 <USBD_CtlError>
      err++;
 800da1e:	7afb      	ldrb	r3, [r7, #11]
 800da20:	3301      	adds	r3, #1
 800da22:	72fb      	strb	r3, [r7, #11]
    break;
 800da24:	e007      	b.n	800da36 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f9ea 	bl	800de02 <USBD_CtlError>
    err++;
 800da2e:	7afb      	ldrb	r3, [r7, #11]
 800da30:	3301      	adds	r3, #1
 800da32:	72fb      	strb	r3, [r7, #11]
    break;
 800da34:	bf00      	nop
  }

  if (err != 0U)
 800da36:	7afb      	ldrb	r3, [r7, #11]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d11e      	bne.n	800da7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	88db      	ldrh	r3, [r3, #6]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d016      	beq.n	800da72 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800da44:	893b      	ldrh	r3, [r7, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00e      	beq.n	800da68 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	88da      	ldrh	r2, [r3, #6]
 800da4e:	893b      	ldrh	r3, [r7, #8]
 800da50:	4293      	cmp	r3, r2
 800da52:	bf28      	it	cs
 800da54:	4613      	movcs	r3, r2
 800da56:	b29b      	uxth	r3, r3
 800da58:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800da5a:	893b      	ldrh	r3, [r7, #8]
 800da5c:	461a      	mov	r2, r3
 800da5e:	68f9      	ldr	r1, [r7, #12]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fa3f 	bl	800dee4 <USBD_CtlSendData>
 800da66:	e009      	b.n	800da7c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800da68:	6839      	ldr	r1, [r7, #0]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f9c9 	bl	800de02 <USBD_CtlError>
 800da70:	e004      	b.n	800da7c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fa73 	bl	800df5e <USBD_CtlSendStatus>
 800da78:	e000      	b.n	800da7c <USBD_GetDescriptor+0x320>
    return;
 800da7a:	bf00      	nop
    }
  }
}
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop

0800da84 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	889b      	ldrh	r3, [r3, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d130      	bne.n	800daf8 <USBD_SetAddress+0x74>
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	88db      	ldrh	r3, [r3, #6]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d12c      	bne.n	800daf8 <USBD_SetAddress+0x74>
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	885b      	ldrh	r3, [r3, #2]
 800daa2:	2b7f      	cmp	r3, #127	; 0x7f
 800daa4:	d828      	bhi.n	800daf8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	885b      	ldrh	r3, [r3, #2]
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dab8:	2b03      	cmp	r3, #3
 800daba:	d104      	bne.n	800dac6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f99f 	bl	800de02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dac4:	e01d      	b.n	800db02 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7bfa      	ldrb	r2, [r7, #15]
 800daca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dace:	7bfb      	ldrb	r3, [r7, #15]
 800dad0:	4619      	mov	r1, r3
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f002 fc15 	bl	8010302 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 fa40 	bl	800df5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d004      	beq.n	800daee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2202      	movs	r2, #2
 800dae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daec:	e009      	b.n	800db02 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf6:	e004      	b.n	800db02 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800daf8:	6839      	ldr	r1, [r7, #0]
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f981 	bl	800de02 <USBD_CtlError>
  }
}
 800db00:	bf00      	nop
 800db02:	bf00      	nop
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	885b      	ldrh	r3, [r3, #2]
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	4b4b      	ldr	r3, [pc, #300]	; (800dc50 <USBD_SetConfig+0x144>)
 800db22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db24:	4b4a      	ldr	r3, [pc, #296]	; (800dc50 <USBD_SetConfig+0x144>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d905      	bls.n	800db38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f967 	bl	800de02 <USBD_CtlError>
    return USBD_FAIL;
 800db34:	2303      	movs	r3, #3
 800db36:	e087      	b.n	800dc48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d002      	beq.n	800db48 <USBD_SetConfig+0x3c>
 800db42:	2b03      	cmp	r3, #3
 800db44:	d025      	beq.n	800db92 <USBD_SetConfig+0x86>
 800db46:	e071      	b.n	800dc2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800db48:	4b41      	ldr	r3, [pc, #260]	; (800dc50 <USBD_SetConfig+0x144>)
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01c      	beq.n	800db8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800db50:	4b3f      	ldr	r3, [pc, #252]	; (800dc50 <USBD_SetConfig+0x144>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	461a      	mov	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800db5a:	4b3d      	ldr	r3, [pc, #244]	; (800dc50 <USBD_SetConfig+0x144>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff f96f 	bl	800ce44 <USBD_SetClassConfig>
 800db66:	4603      	mov	r3, r0
 800db68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f945 	bl	800de02 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800db78:	e065      	b.n	800dc46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f9ef 	bl	800df5e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2203      	movs	r2, #3
 800db84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800db88:	e05d      	b.n	800dc46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f9e7 	bl	800df5e <USBD_CtlSendStatus>
    break;
 800db90:	e059      	b.n	800dc46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800db92:	4b2f      	ldr	r3, [pc, #188]	; (800dc50 <USBD_SetConfig+0x144>)
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d112      	bne.n	800dbc0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2202      	movs	r2, #2
 800db9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800dba2:	4b2b      	ldr	r3, [pc, #172]	; (800dc50 <USBD_SetConfig+0x144>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dbac:	4b28      	ldr	r3, [pc, #160]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff f962 	bl	800ce7c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f9d0 	bl	800df5e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dbbe:	e042      	b.n	800dc46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800dbc0:	4b23      	ldr	r3, [pc, #140]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d02a      	beq.n	800dc24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7ff f950 	bl	800ce7c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800dbdc:	4b1c      	ldr	r3, [pc, #112]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbe6:	4b1a      	ldr	r3, [pc, #104]	; (800dc50 <USBD_SetConfig+0x144>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	4619      	mov	r1, r3
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff f929 	bl	800ce44 <USBD_SetClassConfig>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00f      	beq.n	800dc1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800dbfc:	6839      	ldr	r1, [r7, #0]
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f8ff 	bl	800de02 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff f935 	bl	800ce7c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2202      	movs	r2, #2
 800dc16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800dc1a:	e014      	b.n	800dc46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f99e 	bl	800df5e <USBD_CtlSendStatus>
    break;
 800dc22:	e010      	b.n	800dc46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 f99a 	bl	800df5e <USBD_CtlSendStatus>
    break;
 800dc2a:	e00c      	b.n	800dc46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f8e7 	bl	800de02 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc34:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <USBD_SetConfig+0x144>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7ff f91e 	bl	800ce7c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800dc40:	2303      	movs	r3, #3
 800dc42:	73fb      	strb	r3, [r7, #15]
    break;
 800dc44:	bf00      	nop
  }

  return ret;
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	2000513c 	.word	0x2000513c

0800dc54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	88db      	ldrh	r3, [r3, #6]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d004      	beq.n	800dc70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f8ca 	bl	800de02 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800dc6e:	e022      	b.n	800dcb6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	dc02      	bgt.n	800dc80 <USBD_GetConfig+0x2c>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	dc03      	bgt.n	800dc86 <USBD_GetConfig+0x32>
 800dc7e:	e015      	b.n	800dcac <USBD_GetConfig+0x58>
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d00b      	beq.n	800dc9c <USBD_GetConfig+0x48>
 800dc84:	e012      	b.n	800dcac <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	3308      	adds	r3, #8
 800dc90:	2201      	movs	r2, #1
 800dc92:	4619      	mov	r1, r3
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 f925 	bl	800dee4 <USBD_CtlSendData>
      break;
 800dc9a:	e00c      	b.n	800dcb6 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	3304      	adds	r3, #4
 800dca0:	2201      	movs	r2, #1
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f91d 	bl	800dee4 <USBD_CtlSendData>
      break;
 800dcaa:	e004      	b.n	800dcb6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f8a7 	bl	800de02 <USBD_CtlError>
      break;
 800dcb4:	bf00      	nop
}
 800dcb6:	bf00      	nop
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d81e      	bhi.n	800dd12 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	88db      	ldrh	r3, [r3, #6]
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d004      	beq.n	800dce6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f88f 	bl	800de02 <USBD_CtlError>
      break;
 800dce4:	e01a      	b.n	800dd1c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d005      	beq.n	800dd02 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	f043 0202 	orr.w	r2, r3, #2
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	330c      	adds	r3, #12
 800dd06:	2202      	movs	r2, #2
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f8ea 	bl	800dee4 <USBD_CtlSendData>
    break;
 800dd10:	e004      	b.n	800dd1c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f874 	bl	800de02 <USBD_CtlError>
    break;
 800dd1a:	bf00      	nop
  }
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	885b      	ldrh	r3, [r3, #2]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d106      	bne.n	800dd44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 f90d 	bl	800df5e <USBD_CtlSendStatus>
  }
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d80b      	bhi.n	800dd7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d10c      	bne.n	800dd84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 f8f3 	bl	800df5e <USBD_CtlSendStatus>
      }
      break;
 800dd78:	e004      	b.n	800dd84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f840 	bl	800de02 <USBD_CtlError>
      break;
 800dd82:	e000      	b.n	800dd86 <USBD_ClrFeature+0x3a>
      break;
 800dd84:	bf00      	nop
  }
}
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
 800dd96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	781a      	ldrb	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3301      	adds	r3, #1
 800dda8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	781a      	ldrb	r2, [r3, #0]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff fa9c 	bl	800d2f6 <SWAPBYTE>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7ff fa8f 	bl	800d2f6 <SWAPBYTE>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	461a      	mov	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	3301      	adds	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3301      	adds	r3, #1
 800ddea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f7ff fa82 	bl	800d2f6 <SWAPBYTE>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	80da      	strh	r2, [r3, #6]
}
 800ddfa:	bf00      	nop
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b082      	sub	sp, #8
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de0c:	2180      	movs	r1, #128	; 0x80
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f002 fa0d 	bl	801022e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de14:	2100      	movs	r1, #0
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f002 fa09 	bl	801022e <USBD_LL_StallEP>
}
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d036      	beq.n	800dea8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de3e:	6938      	ldr	r0, [r7, #16]
 800de40:	f000 f836 	bl	800deb0 <USBD_GetLen>
 800de44:	4603      	mov	r3, r0
 800de46:	3301      	adds	r3, #1
 800de48:	b29b      	uxth	r3, r3
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	68ba      	ldr	r2, [r7, #8]
 800de56:	4413      	add	r3, r2
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	7812      	ldrb	r2, [r2, #0]
 800de5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	3301      	adds	r3, #1
 800de62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de64:	7dfb      	ldrb	r3, [r7, #23]
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	4413      	add	r3, r2
 800de6a:	2203      	movs	r2, #3
 800de6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
 800de70:	3301      	adds	r3, #1
 800de72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800de74:	e013      	b.n	800de9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800de76:	7dfb      	ldrb	r3, [r7, #23]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	4413      	add	r3, r2
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	7812      	ldrb	r2, [r2, #0]
 800de80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	3301      	adds	r3, #1
 800de86:	613b      	str	r3, [r7, #16]
    idx++;
 800de88:	7dfb      	ldrb	r3, [r7, #23]
 800de8a:	3301      	adds	r3, #1
 800de8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	4413      	add	r3, r2
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
    idx++;
 800de98:	7dfb      	ldrb	r3, [r7, #23]
 800de9a:	3301      	adds	r3, #1
 800de9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1e7      	bne.n	800de76 <USBD_GetString+0x52>
 800dea6:	e000      	b.n	800deaa <USBD_GetString+0x86>
    return;
 800dea8:	bf00      	nop
  }
}
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dec0:	e005      	b.n	800dece <USBD_GetLen+0x1e>
  {
    len++;
 800dec2:	7bfb      	ldrb	r3, [r7, #15]
 800dec4:	3301      	adds	r3, #1
 800dec6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	3301      	adds	r3, #1
 800decc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1f5      	bne.n	800dec2 <USBD_GetLen+0x12>
  }

  return len;
 800ded6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2202      	movs	r2, #2
 800def4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68ba      	ldr	r2, [r7, #8]
 800df08:	2100      	movs	r1, #0
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f002 fa18 	bl	8010340 <USBD_LL_Transmit>

  return USBD_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b084      	sub	sp, #16
 800df1e:	af00      	add	r7, sp, #0
 800df20:	60f8      	str	r0, [r7, #12]
 800df22:	60b9      	str	r1, [r7, #8]
 800df24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	2100      	movs	r1, #0
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f002 fa07 	bl	8010340 <USBD_LL_Transmit>

  return USBD_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68ba      	ldr	r2, [r7, #8]
 800df4c:	2100      	movs	r1, #0
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f002 fa17 	bl	8010382 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b082      	sub	sp, #8
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2204      	movs	r2, #4
 800df6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df6e:	2300      	movs	r3, #0
 800df70:	2200      	movs	r2, #0
 800df72:	2100      	movs	r1, #0
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f002 f9e3 	bl	8010340 <USBD_LL_Transmit>

  return USBD_OK;
 800df7a:	2300      	movs	r3, #0
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2205      	movs	r2, #5
 800df90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df94:	2300      	movs	r3, #0
 800df96:	2200      	movs	r2, #0
 800df98:	2100      	movs	r1, #0
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f002 f9f1 	bl	8010382 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800dfb6:	f44f 701d 	mov.w	r0, #628	; 0x274
 800dfba:	f002 fac1 	bl	8010540 <malloc>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d105      	bne.n	800dfd4 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	e034      	b.n	800e03e <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	7c1b      	ldrb	r3, [r3, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d115      	bne.n	800e010 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800dfe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfe8:	2202      	movs	r2, #2
 800dfea:	2101      	movs	r1, #1
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f002 f8ba 	bl	8010166 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2201      	movs	r2, #1
 800dff6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800dffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dffe:	2202      	movs	r2, #2
 800e000:	2181      	movs	r1, #129	; 0x81
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f002 f8af 	bl	8010166 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	871a      	strh	r2, [r3, #56]	; 0x38
 800e00e:	e012      	b.n	800e036 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e010:	2340      	movs	r3, #64	; 0x40
 800e012:	2202      	movs	r2, #2
 800e014:	2101      	movs	r1, #1
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f002 f8a5 	bl	8010166 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e024:	2340      	movs	r3, #64	; 0x40
 800e026:	2202      	movs	r2, #2
 800e028:	2181      	movs	r1, #129	; 0x81
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f002 f89b 	bl	8010166 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f991 	bl	800e35e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b082      	sub	sp, #8
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	460b      	mov	r3, r1
 800e050:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800e052:	2101      	movs	r1, #1
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f002 f8ac 	bl	80101b2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800e062:	2181      	movs	r1, #129	; 0x81
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f002 f8a4 	bl	80101b2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f9ca 	bl	800e40a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d009      	beq.n	800e094 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e086:	4618      	mov	r0, r3
 800e088:	f002 fa62 	bl	8010550 <free>
    pdev->pClassData = NULL;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0b0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d04e      	beq.n	800e164 <USBD_MSC_Setup+0xc4>
 800e0c6:	2b20      	cmp	r3, #32
 800e0c8:	f040 80c8 	bne.w	800e25c <USBD_MSC_Setup+0x1bc>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	785b      	ldrb	r3, [r3, #1]
 800e0d0:	2bfe      	cmp	r3, #254	; 0xfe
 800e0d2:	d002      	beq.n	800e0da <USBD_MSC_Setup+0x3a>
 800e0d4:	2bff      	cmp	r3, #255	; 0xff
 800e0d6:	d025      	beq.n	800e124 <USBD_MSC_Setup+0x84>
 800e0d8:	e03c      	b.n	800e154 <USBD_MSC_Setup+0xb4>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	885b      	ldrh	r3, [r3, #2]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d119      	bne.n	800e116 <USBD_MSC_Setup+0x76>
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	88db      	ldrh	r3, [r3, #6]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d115      	bne.n	800e116 <USBD_MSC_Setup+0x76>
          ((req->bmRequest & 0x80U) == 0x80U))
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	da10      	bge.n	800e116 <USBD_MSC_Setup+0x76>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0fa:	699b      	ldr	r3, [r3, #24]
 800e0fc:	4798      	blx	r3
 800e0fe:	4603      	mov	r3, r0
 800e100:	461a      	mov	r2, r3
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2201      	movs	r2, #1
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff fee9 	bl	800dee4 <USBD_CtlSendData>
 800e112:	bf00      	nop
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e114:	e025      	b.n	800e162 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 800e116:	6839      	ldr	r1, [r7, #0]
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7ff fe72 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800e11e:	2303      	movs	r3, #3
 800e120:	75fb      	strb	r3, [r7, #23]
      break;
 800e122:	e01e      	b.n	800e162 <USBD_MSC_Setup+0xc2>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	885b      	ldrh	r3, [r3, #2]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d10c      	bne.n	800e146 <USBD_MSC_Setup+0xa6>
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	88db      	ldrh	r3, [r3, #6]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d108      	bne.n	800e146 <USBD_MSC_Setup+0xa6>
          ((req->bmRequest & 0x80U) != 0x80U))
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	db03      	blt.n	800e146 <USBD_MSC_Setup+0xa6>
      {
        MSC_BOT_Reset(pdev);
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f941 	bl	800e3c6 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e144:	e00d      	b.n	800e162 <USBD_MSC_Setup+0xc2>
        USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff fe5a 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800e14e:	2303      	movs	r3, #3
 800e150:	75fb      	strb	r3, [r7, #23]
      break;
 800e152:	e006      	b.n	800e162 <USBD_MSC_Setup+0xc2>

    default:
      USBD_CtlError(pdev, req);
 800e154:	6839      	ldr	r1, [r7, #0]
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff fe53 	bl	800de02 <USBD_CtlError>
      ret = USBD_FAIL;
 800e15c:	2303      	movs	r3, #3
 800e15e:	75fb      	strb	r3, [r7, #23]
      break;
 800e160:	bf00      	nop
    }
    break;
 800e162:	e082      	b.n	800e26a <USBD_MSC_Setup+0x1ca>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	785b      	ldrb	r3, [r3, #1]
 800e168:	2b0b      	cmp	r3, #11
 800e16a:	d86e      	bhi.n	800e24a <USBD_MSC_Setup+0x1aa>
 800e16c:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <USBD_MSC_Setup+0xd4>)
 800e16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e172:	bf00      	nop
 800e174:	0800e1a5 	.word	0x0800e1a5
 800e178:	0800e21b 	.word	0x0800e21b
 800e17c:	0800e24b 	.word	0x0800e24b
 800e180:	0800e24b 	.word	0x0800e24b
 800e184:	0800e24b 	.word	0x0800e24b
 800e188:	0800e24b 	.word	0x0800e24b
 800e18c:	0800e24b 	.word	0x0800e24b
 800e190:	0800e24b 	.word	0x0800e24b
 800e194:	0800e24b 	.word	0x0800e24b
 800e198:	0800e24b 	.word	0x0800e24b
 800e19c:	0800e1cd 	.word	0x0800e1cd
 800e1a0:	0800e1f5 	.word	0x0800e1f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1aa:	2b03      	cmp	r3, #3
 800e1ac:	d107      	bne.n	800e1be <USBD_MSC_Setup+0x11e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e1ae:	f107 030e 	add.w	r3, r7, #14
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7ff fe94 	bl	800dee4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e1bc:	e04d      	b.n	800e25a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff fe1e 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	75fb      	strb	r3, [r7, #23]
      break;
 800e1ca:	e046      	b.n	800e25a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d107      	bne.n	800e1e6 <USBD_MSC_Setup+0x146>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	2201      	movs	r2, #1
 800e1dc:	4619      	mov	r1, r3
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f7ff fe80 	bl	800dee4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e1e4:	e039      	b.n	800e25a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7ff fe0a 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800e1ee:	2303      	movs	r3, #3
 800e1f0:	75fb      	strb	r3, [r7, #23]
      break;
 800e1f2:	e032      	b.n	800e25a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1fa:	2b03      	cmp	r3, #3
 800e1fc:	d106      	bne.n	800e20c <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	885b      	ldrh	r3, [r3, #2]
 800e202:	b2db      	uxtb	r3, r3
 800e204:	461a      	mov	r2, r3
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e20a:	e026      	b.n	800e25a <USBD_MSC_Setup+0x1ba>
        USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff fdf7 	bl	800de02 <USBD_CtlError>
        ret = USBD_FAIL;
 800e214:	2303      	movs	r3, #3
 800e216:	75fb      	strb	r3, [r7, #23]
      break;
 800e218:	e01f      	b.n	800e25a <USBD_MSC_Setup+0x1ba>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e220:	2b03      	cmp	r3, #3
 800e222:	d119      	bne.n	800e258 <USBD_MSC_Setup+0x1b8>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	885b      	ldrh	r3, [r3, #2]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d115      	bne.n	800e258 <USBD_MSC_Setup+0x1b8>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	889b      	ldrh	r3, [r3, #4]
 800e230:	b2db      	uxtb	r3, r3
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f001 ffdb 	bl	80101f0 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	889b      	ldrh	r3, [r3, #4]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 fa5c 	bl	800e700 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800e248:	e006      	b.n	800e258 <USBD_MSC_Setup+0x1b8>

    default:
      USBD_CtlError(pdev, req);
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff fdd8 	bl	800de02 <USBD_CtlError>
      ret = USBD_FAIL;
 800e252:	2303      	movs	r3, #3
 800e254:	75fb      	strb	r3, [r7, #23]
      break;
 800e256:	e000      	b.n	800e25a <USBD_MSC_Setup+0x1ba>
      break;
 800e258:	bf00      	nop
    }
    break;
 800e25a:	e006      	b.n	800e26a <USBD_MSC_Setup+0x1ca>

  default:
    USBD_CtlError(pdev, req);
 800e25c:	6839      	ldr	r1, [r7, #0]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7ff fdcf 	bl	800de02 <USBD_CtlError>
    ret = USBD_FAIL;
 800e264:	2303      	movs	r3, #3
 800e266:	75fb      	strb	r3, [r7, #23]
    break;
 800e268:	bf00      	nop
  }

  return (uint8_t)ret;
 800e26a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	460b      	mov	r3, r1
 800e27e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800e280:	78fb      	ldrb	r3, [r7, #3]
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f8d1 	bl	800e42c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	460b      	mov	r3, r1
 800e29e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800e2a0:	78fb      	ldrb	r3, [r7, #3]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f8f3 	bl	800e490 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2220      	movs	r2, #32
 800e2c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800e2c2:	4b03      	ldr	r3, [pc, #12]	; (800e2d0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr
 800e2d0:	20000048 	.word	0x20000048

0800e2d4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800e2e2:	4b03      	ldr	r3, [pc, #12]	; (800e2f0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	20000068 	.word	0x20000068

0800e2f4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2220      	movs	r2, #32
 800e300:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800e302:	4b03      	ldr	r3, [pc, #12]	; (800e310 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	20000088 	.word	0x20000088

0800e314 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	220a      	movs	r2, #10
 800e320:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800e322:	4b03      	ldr	r3, [pc, #12]	; (800e330 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e324:	4618      	mov	r0, r3
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	200000a8 	.word	0x200000a8

0800e334 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e344:	2303      	movs	r3, #3
 800e346:	e004      	b.n	800e352 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	370c      	adds	r7, #12
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr

0800e35e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b084      	sub	sp, #16
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e36c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2200      	movs	r2, #0
 800e37e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2000      	movs	r0, #0
 800e39c:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800e39e:	2101      	movs	r1, #1
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f001 ff25 	bl	80101f0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800e3a6:	2181      	movs	r1, #129	; 0x81
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f001 ff21 	bl	80101f0 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e3b4:	231f      	movs	r3, #31
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f001 ffe2 	bl	8010382 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e3be:	bf00      	nop
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b084      	sub	sp, #16
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3d4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800e3e2:	2181      	movs	r1, #129	; 0x81
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f001 ff41 	bl	801026c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f001 ff3d 	bl	801026c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e3f8:	231f      	movs	r3, #31
 800e3fa:	2101      	movs	r1, #1
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f001 ffc0 	bl	8010382 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b085      	sub	sp, #20
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e418:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2200      	movs	r2, #0
 800e41e:	721a      	strb	r2, [r3, #8]
}
 800e420:	bf00      	nop
 800e422:	3714      	adds	r7, #20
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	460b      	mov	r3, r1
 800e436:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e43e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	7a1b      	ldrb	r3, [r3, #8]
 800e444:	2b02      	cmp	r3, #2
 800e446:	d005      	beq.n	800e454 <MSC_BOT_DataIn+0x28>
 800e448:	2b02      	cmp	r3, #2
 800e44a:	db1a      	blt.n	800e482 <MSC_BOT_DataIn+0x56>
 800e44c:	3b03      	subs	r3, #3
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d817      	bhi.n	800e482 <MSC_BOT_DataIn+0x56>
 800e452:	e011      	b.n	800e478 <MSC_BOT_DataIn+0x4c>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e460:	461a      	mov	r2, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f974 	bl	800e750 <SCSI_ProcessCmd>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	da0b      	bge.n	800e486 <MSC_BOT_DataIn+0x5a>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e46e:	2101      	movs	r1, #1
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 f8eb 	bl	800e64c <MSC_BOT_SendCSW>
    }
    break;
 800e476:	e006      	b.n	800e486 <MSC_BOT_DataIn+0x5a>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e478:	2100      	movs	r1, #0
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 f8e6 	bl	800e64c <MSC_BOT_SendCSW>
    break;
 800e480:	e002      	b.n	800e488 <MSC_BOT_DataIn+0x5c>

  default:
    break;
 800e482:	bf00      	nop
 800e484:	e000      	b.n	800e488 <MSC_BOT_DataIn+0x5c>
    break;
 800e486:	bf00      	nop
  }
}
 800e488:	bf00      	nop
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4a2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	7a1b      	ldrb	r3, [r3, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <MSC_BOT_DataOut+0x22>
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d004      	beq.n	800e4ba <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e4b0:	e015      	b.n	800e4de <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f818 	bl	800e4e8 <MSC_BOT_CBW_Decode>
      break;
 800e4b8:	e011      	b.n	800e4de <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 f941 	bl	800e750 <SCSI_ProcessCmd>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	da03      	bge.n	800e4dc <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e4d4:	2101      	movs	r1, #1
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 f8b8 	bl	800e64c <MSC_BOT_SendCSW>
      break;
 800e4dc:	bf00      	nop
  }
}
 800e4de:	bf00      	nop
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
	...

0800e4e8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4f6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e510:	2101      	movs	r1, #1
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f001 ff56 	bl	80103c4 <USBD_LL_GetRxDataSize>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b1f      	cmp	r3, #31
 800e51c:	d114      	bne.n	800e548 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e524:	4a32      	ldr	r2, [pc, #200]	; (800e5f0 <MSC_BOT_CBW_Decode+0x108>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d10e      	bne.n	800e548 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e530:	2b01      	cmp	r3, #1
 800e532:	d809      	bhi.n	800e548 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d004      	beq.n	800e548 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e544:	2b10      	cmp	r3, #16
 800e546:	d90e      	bls.n	800e566 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e54e:	2320      	movs	r3, #32
 800e550:	2205      	movs	r2, #5
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fd71 	bl	800f03a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2202      	movs	r2, #2
 800e55c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 f8a0 	bl	800e6a4 <MSC_BOT_Abort>
 800e564:	e041      	b.n	800e5ea <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e572:	461a      	mov	r2, r3
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 f8eb 	bl	800e750 <SCSI_ProcessCmd>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	da0c      	bge.n	800e59a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	7a1b      	ldrb	r3, [r3, #8]
 800e584:	2b05      	cmp	r3, #5
 800e586:	d104      	bne.n	800e592 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e588:	2101      	movs	r1, #1
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 f85e 	bl	800e64c <MSC_BOT_SendCSW>
 800e590:	e02b      	b.n	800e5ea <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 f886 	bl	800e6a4 <MSC_BOT_Abort>
 800e598:	e027      	b.n	800e5ea <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	7a1b      	ldrb	r3, [r3, #8]
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d022      	beq.n	800e5e8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d01e      	beq.n	800e5e8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e5ae:	2b03      	cmp	r3, #3
 800e5b0:	d01a      	beq.n	800e5e8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d009      	beq.n	800e5ce <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f103 0110 	add.w	r1, r3, #16
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f814 	bl	800e5f4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e5cc:	e00d      	b.n	800e5ea <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d104      	bne.n	800e5e0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 f837 	bl	800e64c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e5de:	e004      	b.n	800e5ea <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f85f 	bl	800e6a4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e5e6:	e000      	b.n	800e5ea <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800e5e8:	bf00      	nop
    }
  }
}
 800e5ea:	3710      	adds	r7, #16
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	43425355 	.word	0x43425355

0800e5f4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e606:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	4293      	cmp	r3, r2
 800e612:	bf28      	it	cs
 800e614:	4613      	movcs	r3, r2
 800e616:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	1ad2      	subs	r2, r2, r3
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	2204      	movs	r2, #4
 800e634:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	2181      	movs	r1, #129	; 0x81
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f001 fe7f 	bl	8010340 <USBD_LL_Transmit>
}
 800e642:	bf00      	nop
 800e644:	3718      	adds	r7, #24
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
	...

0800e64c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e65e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4a0f      	ldr	r2, [pc, #60]	; (800e6a0 <MSC_BOT_SendCSW+0x54>)
 800e664:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e67c:	230d      	movs	r3, #13
 800e67e:	2181      	movs	r1, #129	; 0x81
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f001 fe5d 	bl	8010340 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e68c:	231f      	movs	r3, #31
 800e68e:	2101      	movs	r1, #1
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f001 fe76 	bl	8010382 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e696:	bf00      	nop
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	53425355 	.word	0x53425355

0800e6a4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6b2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10c      	bne.n	800e6d8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d007      	beq.n	800e6d8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d103      	bne.n	800e6d8 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f001 fdab 	bl	801022e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e6d8:	2181      	movs	r1, #129	; 0x81
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f001 fda7 	bl	801022e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	7a5b      	ldrb	r3, [r3, #9]
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d107      	bne.n	800e6f8 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e6e8:	2181      	movs	r1, #129	; 0x81
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f001 fd9f 	bl	801022e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f001 fd9b 	bl	801022e <USBD_LL_StallEP>
  }
}
 800e6f8:	bf00      	nop
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	460b      	mov	r3, r1
 800e70a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e712:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	7a5b      	ldrb	r3, [r3, #9]
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d108      	bne.n	800e72e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e71c:	2181      	movs	r1, #129	; 0x81
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f001 fd85 	bl	801022e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e724:	2101      	movs	r1, #1
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f001 fd81 	bl	801022e <USBD_LL_StallEP>
 800e72c:	e00d      	b.n	800e74a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e72e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e732:	2b00      	cmp	r3, #0
 800e734:	da08      	bge.n	800e748 <MSC_BOT_CplClrFeature+0x48>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	7a5b      	ldrb	r3, [r3, #9]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d004      	beq.n	800e748 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e73e:	2101      	movs	r1, #1
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7ff ff83 	bl	800e64c <MSC_BOT_SendCSW>
 800e746:	e000      	b.n	800e74a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800e748:	bf00      	nop
  }
}
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	460b      	mov	r3, r1
 800e75a:	607a      	str	r2, [r7, #4]
 800e75c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e764:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2baa      	cmp	r3, #170	; 0xaa
 800e76c:	f000 8144 	beq.w	800e9f8 <SCSI_ProcessCmd+0x2a8>
 800e770:	2baa      	cmp	r3, #170	; 0xaa
 800e772:	f300 8153 	bgt.w	800ea1c <SCSI_ProcessCmd+0x2cc>
 800e776:	2ba8      	cmp	r3, #168	; 0xa8
 800e778:	f000 812c 	beq.w	800e9d4 <SCSI_ProcessCmd+0x284>
 800e77c:	2ba8      	cmp	r3, #168	; 0xa8
 800e77e:	f300 814d 	bgt.w	800ea1c <SCSI_ProcessCmd+0x2cc>
 800e782:	2b5a      	cmp	r3, #90	; 0x5a
 800e784:	f300 80c0 	bgt.w	800e908 <SCSI_ProcessCmd+0x1b8>
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f2c0 8147 	blt.w	800ea1c <SCSI_ProcessCmd+0x2cc>
 800e78e:	2b5a      	cmp	r3, #90	; 0x5a
 800e790:	f200 8144 	bhi.w	800ea1c <SCSI_ProcessCmd+0x2cc>
 800e794:	a201      	add	r2, pc, #4	; (adr r2, 800e79c <SCSI_ProcessCmd+0x4c>)
 800e796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79a:	bf00      	nop
 800e79c:	0800e90f 	.word	0x0800e90f
 800e7a0:	0800ea1d 	.word	0x0800ea1d
 800e7a4:	0800ea1d 	.word	0x0800ea1d
 800e7a8:	0800e921 	.word	0x0800e921
 800e7ac:	0800ea1d 	.word	0x0800ea1d
 800e7b0:	0800ea1d 	.word	0x0800ea1d
 800e7b4:	0800ea1d 	.word	0x0800ea1d
 800e7b8:	0800ea1d 	.word	0x0800ea1d
 800e7bc:	0800ea1d 	.word	0x0800ea1d
 800e7c0:	0800ea1d 	.word	0x0800ea1d
 800e7c4:	0800ea1d 	.word	0x0800ea1d
 800e7c8:	0800ea1d 	.word	0x0800ea1d
 800e7cc:	0800ea1d 	.word	0x0800ea1d
 800e7d0:	0800ea1d 	.word	0x0800ea1d
 800e7d4:	0800ea1d 	.word	0x0800ea1d
 800e7d8:	0800ea1d 	.word	0x0800ea1d
 800e7dc:	0800ea1d 	.word	0x0800ea1d
 800e7e0:	0800ea1d 	.word	0x0800ea1d
 800e7e4:	0800e933 	.word	0x0800e933
 800e7e8:	0800ea1d 	.word	0x0800ea1d
 800e7ec:	0800ea1d 	.word	0x0800ea1d
 800e7f0:	0800ea1d 	.word	0x0800ea1d
 800e7f4:	0800ea1d 	.word	0x0800ea1d
 800e7f8:	0800ea1d 	.word	0x0800ea1d
 800e7fc:	0800ea1d 	.word	0x0800ea1d
 800e800:	0800ea1d 	.word	0x0800ea1d
 800e804:	0800e969 	.word	0x0800e969
 800e808:	0800e945 	.word	0x0800e945
 800e80c:	0800ea1d 	.word	0x0800ea1d
 800e810:	0800ea1d 	.word	0x0800ea1d
 800e814:	0800e957 	.word	0x0800e957
 800e818:	0800ea1d 	.word	0x0800ea1d
 800e81c:	0800ea1d 	.word	0x0800ea1d
 800e820:	0800ea1d 	.word	0x0800ea1d
 800e824:	0800ea1d 	.word	0x0800ea1d
 800e828:	0800e98d 	.word	0x0800e98d
 800e82c:	0800ea1d 	.word	0x0800ea1d
 800e830:	0800e99f 	.word	0x0800e99f
 800e834:	0800ea1d 	.word	0x0800ea1d
 800e838:	0800ea1d 	.word	0x0800ea1d
 800e83c:	0800e9c3 	.word	0x0800e9c3
 800e840:	0800ea1d 	.word	0x0800ea1d
 800e844:	0800e9e7 	.word	0x0800e9e7
 800e848:	0800ea1d 	.word	0x0800ea1d
 800e84c:	0800ea1d 	.word	0x0800ea1d
 800e850:	0800ea1d 	.word	0x0800ea1d
 800e854:	0800ea1d 	.word	0x0800ea1d
 800e858:	0800ea0b 	.word	0x0800ea0b
 800e85c:	0800ea1d 	.word	0x0800ea1d
 800e860:	0800ea1d 	.word	0x0800ea1d
 800e864:	0800ea1d 	.word	0x0800ea1d
 800e868:	0800ea1d 	.word	0x0800ea1d
 800e86c:	0800ea1d 	.word	0x0800ea1d
 800e870:	0800ea1d 	.word	0x0800ea1d
 800e874:	0800ea1d 	.word	0x0800ea1d
 800e878:	0800ea1d 	.word	0x0800ea1d
 800e87c:	0800ea1d 	.word	0x0800ea1d
 800e880:	0800ea1d 	.word	0x0800ea1d
 800e884:	0800ea1d 	.word	0x0800ea1d
 800e888:	0800ea1d 	.word	0x0800ea1d
 800e88c:	0800ea1d 	.word	0x0800ea1d
 800e890:	0800ea1d 	.word	0x0800ea1d
 800e894:	0800ea1d 	.word	0x0800ea1d
 800e898:	0800ea1d 	.word	0x0800ea1d
 800e89c:	0800ea1d 	.word	0x0800ea1d
 800e8a0:	0800ea1d 	.word	0x0800ea1d
 800e8a4:	0800ea1d 	.word	0x0800ea1d
 800e8a8:	0800ea1d 	.word	0x0800ea1d
 800e8ac:	0800ea1d 	.word	0x0800ea1d
 800e8b0:	0800ea1d 	.word	0x0800ea1d
 800e8b4:	0800ea1d 	.word	0x0800ea1d
 800e8b8:	0800ea1d 	.word	0x0800ea1d
 800e8bc:	0800ea1d 	.word	0x0800ea1d
 800e8c0:	0800ea1d 	.word	0x0800ea1d
 800e8c4:	0800ea1d 	.word	0x0800ea1d
 800e8c8:	0800ea1d 	.word	0x0800ea1d
 800e8cc:	0800ea1d 	.word	0x0800ea1d
 800e8d0:	0800ea1d 	.word	0x0800ea1d
 800e8d4:	0800ea1d 	.word	0x0800ea1d
 800e8d8:	0800ea1d 	.word	0x0800ea1d
 800e8dc:	0800ea1d 	.word	0x0800ea1d
 800e8e0:	0800ea1d 	.word	0x0800ea1d
 800e8e4:	0800ea1d 	.word	0x0800ea1d
 800e8e8:	0800ea1d 	.word	0x0800ea1d
 800e8ec:	0800ea1d 	.word	0x0800ea1d
 800e8f0:	0800ea1d 	.word	0x0800ea1d
 800e8f4:	0800ea1d 	.word	0x0800ea1d
 800e8f8:	0800ea1d 	.word	0x0800ea1d
 800e8fc:	0800ea1d 	.word	0x0800ea1d
 800e900:	0800ea1d 	.word	0x0800ea1d
 800e904:	0800e97b 	.word	0x0800e97b
 800e908:	2b9e      	cmp	r3, #158	; 0x9e
 800e90a:	d051      	beq.n	800e9b0 <SCSI_ProcessCmd+0x260>
 800e90c:	e086      	b.n	800ea1c <SCSI_ProcessCmd+0x2cc>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e90e:	7afb      	ldrb	r3, [r7, #11]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	4619      	mov	r1, r3
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 f893 	bl	800ea40 <SCSI_TestUnitReady>
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]
    break;
 800e91e:	e089      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800e920:	7afb      	ldrb	r3, [r7, #11]
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	4619      	mov	r1, r3
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f000 fb0e 	bl	800ef48 <SCSI_RequestSense>
 800e92c:	4603      	mov	r3, r0
 800e92e:	75fb      	strb	r3, [r7, #23]
    break;
 800e930:	e080      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800e932:	7afb      	ldrb	r3, [r7, #11]
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	4619      	mov	r1, r3
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f000 f8cb 	bl	800ead4 <SCSI_Inquiry>
 800e93e:	4603      	mov	r3, r0
 800e940:	75fb      	strb	r3, [r7, #23]
    break;
 800e942:	e077      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e944:	7afb      	ldrb	r3, [r7, #11]
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	4619      	mov	r1, r3
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f000 fbb8 	bl	800f0c0 <SCSI_StartStopUnit>
 800e950:	4603      	mov	r3, r0
 800e952:	75fb      	strb	r3, [r7, #23]
    break;
 800e954:	e06e      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e956:	7afb      	ldrb	r3, [r7, #11]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	4619      	mov	r1, r3
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f000 fbfa 	bl	800f156 <SCSI_AllowPreventRemovable>
 800e962:	4603      	mov	r3, r0
 800e964:	75fb      	strb	r3, [r7, #23]
    break;
 800e966:	e065      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e968:	7afb      	ldrb	r3, [r7, #11]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	4619      	mov	r1, r3
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f000 fa9e 	bl	800eeb0 <SCSI_ModeSense6>
 800e974:	4603      	mov	r3, r0
 800e976:	75fb      	strb	r3, [r7, #23]
    break;
 800e978:	e05c      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e97a:	7afb      	ldrb	r3, [r7, #11]
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	4619      	mov	r1, r3
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 fabb 	bl	800eefc <SCSI_ModeSense10>
 800e986:	4603      	mov	r3, r0
 800e988:	75fb      	strb	r3, [r7, #23]
    break;
 800e98a:	e053      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e98c:	7afb      	ldrb	r3, [r7, #11]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	4619      	mov	r1, r3
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f000 fa1f 	bl	800edd6 <SCSI_ReadFormatCapacity>
 800e998:	4603      	mov	r3, r0
 800e99a:	75fb      	strb	r3, [r7, #23]
    break;
 800e99c:	e04a      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e99e:	7afb      	ldrb	r3, [r7, #11]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f000 f903 	bl	800ebb0 <SCSI_ReadCapacity10>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	75fb      	strb	r3, [r7, #23]
    break;
 800e9ae:	e041      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e9b0:	7afb      	ldrb	r3, [r7, #11]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f000 f969 	bl	800ec8e <SCSI_ReadCapacity16>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	75fb      	strb	r3, [r7, #23]
    break;
 800e9c0:	e038      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800e9c2:	7afb      	ldrb	r3, [r7, #11]
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f000 fbe7 	bl	800f19c <SCSI_Read10>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	75fb      	strb	r3, [r7, #23]
    break;
 800e9d2:	e02f      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800e9d4:	7afb      	ldrb	r3, [r7, #11]
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f000 fc78 	bl	800f2d0 <SCSI_Read12>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	75fb      	strb	r3, [r7, #23]
    break;
 800e9e4:	e026      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800e9e6:	7afb      	ldrb	r3, [r7, #11]
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f000 fd14 	bl	800f41a <SCSI_Write10>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	75fb      	strb	r3, [r7, #23]
    break;
 800e9f6:	e01d      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800e9f8:	7afb      	ldrb	r3, [r7, #11]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f000 fdca 	bl	800f598 <SCSI_Write12>
 800ea04:	4603      	mov	r3, r0
 800ea06:	75fb      	strb	r3, [r7, #23]
    break;
 800ea08:	e014      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800ea0a:	7afb      	ldrb	r3, [r7, #11]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f000 fe90 	bl	800f736 <SCSI_Verify10>
 800ea16:	4603      	mov	r3, r0
 800ea18:	75fb      	strb	r3, [r7, #23]
    break;
 800ea1a:	e00b      	b.n	800ea34 <SCSI_ProcessCmd+0x2e4>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800ea1c:	7af9      	ldrb	r1, [r7, #11]
 800ea1e:	2320      	movs	r3, #32
 800ea20:	2205      	movs	r2, #5
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f000 fb09 	bl	800f03a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800ea2e:	23ff      	movs	r3, #255	; 0xff
 800ea30:	75fb      	strb	r3, [r7, #23]
    break;
 800ea32:	bf00      	nop
  }

  return ret;
 800ea34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3718      	adds	r7, #24
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	607a      	str	r2, [r7, #4]
 800ea4c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea54:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d00a      	beq.n	800ea76 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ea66:	2320      	movs	r3, #32
 800ea68:	2205      	movs	r2, #5
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f000 fae5 	bl	800f03a <SCSI_SenseCode>

    return -1;
 800ea70:	f04f 33ff 	mov.w	r3, #4294967295
 800ea74:	e02a      	b.n	800eacc <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d10b      	bne.n	800ea98 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ea80:	7af9      	ldrb	r1, [r7, #11]
 800ea82:	233a      	movs	r3, #58	; 0x3a
 800ea84:	2202      	movs	r2, #2
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f000 fad7 	bl	800f03a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2205      	movs	r2, #5
 800ea90:	721a      	strb	r2, [r3, #8]
    return -1;
 800ea92:	f04f 33ff 	mov.w	r3, #4294967295
 800ea96:	e019      	b.n	800eacc <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	7afa      	ldrb	r2, [r7, #11]
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4798      	blx	r3
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00b      	beq.n	800eac4 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eaac:	7af9      	ldrb	r1, [r7, #11]
 800eaae:	233a      	movs	r3, #58	; 0x3a
 800eab0:	2202      	movs	r2, #2
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f000 fac1 	bl	800f03a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2205      	movs	r2, #5
 800eabc:	721a      	strb	r2, [r3, #8]

    return -1;
 800eabe:	f04f 33ff 	mov.w	r3, #4294967295
 800eac2:	e003      	b.n	800eacc <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	2200      	movs	r2, #0
 800eac8:	60da      	str	r2, [r3, #12]

  return 0;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	460b      	mov	r3, r1
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eae8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10a      	bne.n	800eb0a <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eafa:	2320      	movs	r3, #32
 800eafc:	2205      	movs	r2, #5
 800eafe:	68f8      	ldr	r0, [r7, #12]
 800eb00:	f000 fa9b 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295
 800eb08:	e04a      	b.n	800eba0 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	f003 0301 	and.w	r3, r3, #1
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d020      	beq.n	800eb5a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3302      	adds	r3, #2
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d105      	bne.n	800eb2e <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800eb22:	2206      	movs	r2, #6
 800eb24:	4920      	ldr	r1, [pc, #128]	; (800eba8 <SCSI_Inquiry+0xd4>)
 800eb26:	69b8      	ldr	r0, [r7, #24]
 800eb28:	f000 ff50 	bl	800f9cc <SCSI_UpdateBotData>
 800eb2c:	e037      	b.n	800eb9e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3302      	adds	r3, #2
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b80      	cmp	r3, #128	; 0x80
 800eb36:	d105      	bne.n	800eb44 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800eb38:	2208      	movs	r2, #8
 800eb3a:	491c      	ldr	r1, [pc, #112]	; (800ebac <SCSI_Inquiry+0xd8>)
 800eb3c:	69b8      	ldr	r0, [r7, #24]
 800eb3e:	f000 ff45 	bl	800f9cc <SCSI_UpdateBotData>
 800eb42:	e02c      	b.n	800eb9e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eb4a:	2324      	movs	r3, #36	; 0x24
 800eb4c:	2205      	movs	r2, #5
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f000 fa73 	bl	800f03a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800eb54:	f04f 33ff 	mov.w	r3, #4294967295
 800eb58:	e022      	b.n	800eba0 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb60:	69d9      	ldr	r1, [r3, #28]
 800eb62:	7afa      	ldrb	r2, [r7, #11]
 800eb64:	4613      	mov	r3, r2
 800eb66:	00db      	lsls	r3, r3, #3
 800eb68:	4413      	add	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	440b      	add	r3, r1
 800eb6e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	3304      	adds	r3, #4
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	3305      	adds	r3, #5
 800eb7a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3304      	adds	r3, #4
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	8bfa      	ldrh	r2, [r7, #30]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d303      	bcc.n	800eb92 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800eb92:	8bfb      	ldrh	r3, [r7, #30]
 800eb94:	461a      	mov	r2, r3
 800eb96:	6979      	ldr	r1, [r7, #20]
 800eb98:	69b8      	ldr	r0, [r7, #24]
 800eb9a:	f000 ff17 	bl	800f9cc <SCSI_UpdateBotData>
  }

  return 0;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3720      	adds	r7, #32
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	200000b4 	.word	0x200000b4
 800ebac:	200000bc 	.word	0x200000bc

0800ebb0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	607a      	str	r2, [r7, #4]
 800ebbc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebc4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	697a      	ldr	r2, [r7, #20]
 800ebd0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800ebda:	7af8      	ldrb	r0, [r7, #11]
 800ebdc:	4798      	blx	r3
 800ebde:	4603      	mov	r3, r0
 800ebe0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ebe2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d104      	bne.n	800ebf4 <SCSI_ReadCapacity10+0x44>
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d108      	bne.n	800ec06 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ebf4:	7af9      	ldrb	r1, [r7, #11]
 800ebf6:	233a      	movs	r3, #58	; 0x3a
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f000 fa1d 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800ec00:	f04f 33ff 	mov.w	r3, #4294967295
 800ec04:	e03f      	b.n	800ec86 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	0e1b      	lsrs	r3, r3, #24
 800ec10:	b2da      	uxtb	r2, r3
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	0c1b      	lsrs	r3, r3, #16
 800ec20:	b2da      	uxtb	r2, r3
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	0a1b      	lsrs	r3, r3, #8
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec4c:	161b      	asrs	r3, r3, #24
 800ec4e:	b2da      	uxtb	r2, r3
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec5a:	141b      	asrs	r3, r3, #16
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec68:	0a1b      	lsrs	r3, r3, #8
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	b2da      	uxtb	r2, r3
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ec78:	b2da      	uxtb	r2, r3
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	2208      	movs	r2, #8
 800ec82:	60da      	str	r2, [r3, #12]

  return 0;
 800ec84:	2300      	movs	r3, #0

}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b088      	sub	sp, #32
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	60f8      	str	r0, [r7, #12]
 800ec96:	460b      	mov	r3, r1
 800ec98:	607a      	str	r2, [r7, #4]
 800ec9a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eca2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	69ba      	ldr	r2, [r7, #24]
 800ecae:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800ecb2:	69ba      	ldr	r2, [r7, #24]
 800ecb4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800ecb8:	7af8      	ldrb	r0, [r7, #11]
 800ecba:	4798      	blx	r3
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ecc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d104      	bne.n	800ecd2 <SCSI_ReadCapacity16+0x44>
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ecce:	2b02      	cmp	r3, #2
 800ecd0:	d108      	bne.n	800ece4 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ecd2:	7af9      	ldrb	r1, [r7, #11]
 800ecd4:	233a      	movs	r3, #58	; 0x3a
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f000 f9ae 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800ecde:	f04f 33ff 	mov.w	r3, #4294967295
 800ece2:	e074      	b.n	800edce <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	330a      	adds	r3, #10
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	330b      	adds	r3, #11
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ecf4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	330c      	adds	r3, #12
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800ecfe:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	320d      	adds	r2, #13
 800ed04:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800ed06:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	77fb      	strb	r3, [r7, #31]
 800ed10:	e007      	b.n	800ed22 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800ed12:	7ffb      	ldrb	r3, [r7, #31]
 800ed14:	69ba      	ldr	r2, [r7, #24]
 800ed16:	4413      	add	r3, r2
 800ed18:	2200      	movs	r2, #0
 800ed1a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ed1c:	7ffb      	ldrb	r3, [r7, #31]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	77fb      	strb	r3, [r7, #31]
 800ed22:	7ffa      	ldrb	r2, [r7, #31]
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d3f2      	bcc.n	800ed12 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed32:	3b01      	subs	r3, #1
 800ed34:	0e1b      	lsrs	r3, r3, #24
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed42:	3b01      	subs	r3, #1
 800ed44:	0c1b      	lsrs	r3, r3, #16
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed52:	3b01      	subs	r3, #1
 800ed54:	0a1b      	lsrs	r3, r3, #8
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	3b01      	subs	r3, #1
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ed72:	161b      	asrs	r3, r3, #24
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ed80:	141b      	asrs	r3, r3, #16
 800ed82:	b2da      	uxtb	r2, r3
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ed8e:	0a1b      	lsrs	r3, r3, #8
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	330a      	adds	r3, #10
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	330b      	adds	r3, #11
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800edb4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	330c      	adds	r3, #12
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800edbe:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	320d      	adds	r2, #13
 800edc4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800edc6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	60da      	str	r2, [r3, #12]

  return 0;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3720      	adds	r7, #32
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b088      	sub	sp, #32
 800edda:	af00      	add	r7, sp, #0
 800eddc:	60f8      	str	r0, [r7, #12]
 800edde:	460b      	mov	r3, r1
 800ede0:	607a      	str	r2, [r7, #4]
 800ede2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edea:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	f107 0214 	add.w	r2, r7, #20
 800edf8:	f107 0110 	add.w	r1, r7, #16
 800edfc:	7af8      	ldrb	r0, [r7, #11]
 800edfe:	4798      	blx	r3
 800ee00:	4603      	mov	r3, r0
 800ee02:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ee04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d104      	bne.n	800ee16 <SCSI_ReadFormatCapacity+0x40>
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d108      	bne.n	800ee28 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ee16:	7af9      	ldrb	r1, [r7, #11]
 800ee18:	233a      	movs	r3, #58	; 0x3a
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 f90c 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800ee22:	f04f 33ff 	mov.w	r3, #4294967295
 800ee26:	e03e      	b.n	800eea6 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800ee28:	2300      	movs	r3, #0
 800ee2a:	83fb      	strh	r3, [r7, #30]
 800ee2c:	e007      	b.n	800ee3e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800ee2e:	8bfb      	ldrh	r3, [r7, #30]
 800ee30:	69ba      	ldr	r2, [r7, #24]
 800ee32:	4413      	add	r3, r2
 800ee34:	2200      	movs	r2, #0
 800ee36:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800ee38:	8bfb      	ldrh	r3, [r7, #30]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	83fb      	strh	r3, [r7, #30]
 800ee3e:	8bfb      	ldrh	r3, [r7, #30]
 800ee40:	2b0b      	cmp	r3, #11
 800ee42:	d9f4      	bls.n	800ee2e <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	2208      	movs	r2, #8
 800ee48:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	0e1b      	lsrs	r3, r3, #24
 800ee50:	b2da      	uxtb	r2, r3
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	0c1b      	lsrs	r3, r3, #16
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	0a1b      	lsrs	r3, r3, #8
 800ee68:	b2da      	uxtb	r2, r3
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	3b01      	subs	r3, #1
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800ee80:	8abb      	ldrh	r3, [r7, #20]
 800ee82:	141b      	asrs	r3, r3, #16
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800ee8a:	8abb      	ldrh	r3, [r7, #20]
 800ee8c:	0a1b      	lsrs	r3, r3, #8
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800ee96:	8abb      	ldrh	r3, [r7, #20]
 800ee98:	b2da      	uxtb	r2, r3
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	220c      	movs	r2, #12
 800eea2:	60da      	str	r2, [r3, #12]

  return 0;
 800eea4:	2300      	movs	r3, #0
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3720      	adds	r7, #32
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eec4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800eec6:	2317      	movs	r3, #23
 800eec8:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	3304      	adds	r3, #4
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	8afa      	ldrh	r2, [r7, #22]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d303      	bcc.n	800eee0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3304      	adds	r3, #4
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800eee0:	8afb      	ldrh	r3, [r7, #22]
 800eee2:	461a      	mov	r2, r3
 800eee4:	4904      	ldr	r1, [pc, #16]	; (800eef8 <SCSI_ModeSense6+0x48>)
 800eee6:	6938      	ldr	r0, [r7, #16]
 800eee8:	f000 fd70 	bl	800f9cc <SCSI_UpdateBotData>

  return 0;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3718      	adds	r7, #24
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	200000c4 	.word	0x200000c4

0800eefc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	460b      	mov	r3, r1
 800ef06:	607a      	str	r2, [r7, #4]
 800ef08:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef10:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800ef12:	231b      	movs	r3, #27
 800ef14:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	3308      	adds	r3, #8
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	8afa      	ldrh	r2, [r7, #22]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d303      	bcc.n	800ef2c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	3308      	adds	r3, #8
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800ef2c:	8afb      	ldrh	r3, [r7, #22]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	4904      	ldr	r1, [pc, #16]	; (800ef44 <SCSI_ModeSense10+0x48>)
 800ef32:	6938      	ldr	r0, [r7, #16]
 800ef34:	f000 fd4a 	bl	800f9cc <SCSI_UpdateBotData>

  return 0;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3718      	adds	r7, #24
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	200000dc 	.word	0x200000dc

0800ef48 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	460b      	mov	r3, r1
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef5c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10a      	bne.n	800ef7e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ef6e:	2320      	movs	r3, #32
 800ef70:	2205      	movs	r2, #5
 800ef72:	68f8      	ldr	r0, [r7, #12]
 800ef74:	f000 f861 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800ef78:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7c:	e059      	b.n	800f032 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ef7e:	2300      	movs	r3, #0
 800ef80:	75fb      	strb	r3, [r7, #23]
 800ef82:	e007      	b.n	800ef94 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800ef84:	7dfb      	ldrb	r3, [r7, #23]
 800ef86:	693a      	ldr	r2, [r7, #16]
 800ef88:	4413      	add	r3, r2
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ef8e:	7dfb      	ldrb	r3, [r7, #23]
 800ef90:	3301      	adds	r3, #1
 800ef92:	75fb      	strb	r3, [r7, #23]
 800ef94:	7dfb      	ldrb	r3, [r7, #23]
 800ef96:	2b11      	cmp	r3, #17
 800ef98:	d9f4      	bls.n	800ef84 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	2270      	movs	r2, #112	; 0x70
 800ef9e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	220c      	movs	r2, #12
 800efa4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d02e      	beq.n	800f014 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800efbc:	461a      	mov	r2, r3
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	3248      	adds	r2, #72	; 0x48
 800efc2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	3348      	adds	r3, #72	; 0x48
 800efd4:	00db      	lsls	r3, r3, #3
 800efd6:	4413      	add	r3, r2
 800efd8:	791a      	ldrb	r2, [r3, #4]
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	3348      	adds	r3, #72	; 0x48
 800efe8:	00db      	lsls	r3, r3, #3
 800efea:	4413      	add	r3, r2
 800efec:	795a      	ldrb	r2, [r3, #5]
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eff8:	3301      	adds	r3, #1
 800effa:	b2da      	uxtb	r2, r3
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f008:	2b04      	cmp	r3, #4
 800f00a:	d103      	bne.n	800f014 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	2200      	movs	r2, #0
 800f010:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	2212      	movs	r2, #18
 800f018:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	3304      	adds	r3, #4
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	2b12      	cmp	r3, #18
 800f022:	d805      	bhi.n	800f030 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	3304      	adds	r3, #4
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3718      	adds	r7, #24
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f03a:	b480      	push	{r7}
 800f03c:	b085      	sub	sp, #20
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	4608      	mov	r0, r1
 800f044:	4611      	mov	r1, r2
 800f046:	461a      	mov	r2, r3
 800f048:	4603      	mov	r3, r0
 800f04a:	70fb      	strb	r3, [r7, #3]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70bb      	strb	r3, [r7, #2]
 800f050:	4613      	mov	r3, r2
 800f052:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f05a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f062:	461a      	mov	r2, r3
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3248      	adds	r2, #72	; 0x48
 800f068:	78b9      	ldrb	r1, [r7, #2]
 800f06a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	3348      	adds	r3, #72	; 0x48
 800f078:	00db      	lsls	r3, r3, #3
 800f07a:	4413      	add	r3, r2
 800f07c:	787a      	ldrb	r2, [r7, #1]
 800f07e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	3348      	adds	r3, #72	; 0x48
 800f08a:	00db      	lsls	r3, r3, #3
 800f08c:	4413      	add	r3, r2
 800f08e:	2200      	movs	r2, #0
 800f090:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f098:	3301      	adds	r3, #1
 800f09a:	b2da      	uxtb	r2, r3
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f0a8:	2b04      	cmp	r3, #4
 800f0aa:	d103      	bne.n	800f0b4 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800f0b4:	bf00      	nop
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	607a      	str	r2, [r7, #4]
 800f0cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0d4:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d10f      	bne.n	800f100 <SCSI_StartStopUnit+0x40>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	f003 0303 	and.w	r3, r3, #3
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	d108      	bne.n	800f100 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f0ee:	7af9      	ldrb	r1, [r7, #11]
 800f0f0:	2324      	movs	r3, #36	; 0x24
 800f0f2:	2205      	movs	r2, #5
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f7ff ffa0 	bl	800f03a <SCSI_SenseCode>

    return -1;
 800f0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f0fe:	e026      	b.n	800f14e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	3304      	adds	r3, #4
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	f003 0303 	and.w	r3, r3, #3
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d104      	bne.n	800f118 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	2200      	movs	r2, #0
 800f112:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f116:	e016      	b.n	800f146 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	3304      	adds	r3, #4
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	f003 0303 	and.w	r3, r3, #3
 800f122:	2b02      	cmp	r3, #2
 800f124:	d104      	bne.n	800f130 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	2202      	movs	r2, #2
 800f12a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f12e:	e00a      	b.n	800f146 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	3304      	adds	r3, #4
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	f003 0303 	and.w	r3, r3, #3
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d103      	bne.n	800f146 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2200      	movs	r2, #0
 800f142:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2200      	movs	r2, #0
 800f14a:	60da      	str	r2, [r3, #12]

  return 0;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3718      	adds	r7, #24
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f156:	b480      	push	{r7}
 800f158:	b087      	sub	sp, #28
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	60f8      	str	r0, [r7, #12]
 800f15e:	460b      	mov	r3, r1
 800f160:	607a      	str	r2, [r7, #4]
 800f162:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f16a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3304      	adds	r3, #4
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d104      	bne.n	800f180 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	2200      	movs	r2, #0
 800f17a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f17e:	e003      	b.n	800f188 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	2200      	movs	r2, #0
 800f18c:	60da      	str	r2, [r3, #12]

  return 0;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	371c      	adds	r7, #28
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b086      	sub	sp, #24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	607a      	str	r2, [r7, #4]
 800f1a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1b0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	7a1b      	ldrb	r3, [r3, #8]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d17c      	bne.n	800f2b4 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f1c0:	b25b      	sxtb	r3, r3
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	db0a      	blt.n	800f1dc <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f1cc:	2320      	movs	r3, #32
 800f1ce:	2205      	movs	r2, #5
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f7ff ff32 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1da:	e075      	b.n	800f2c8 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d108      	bne.n	800f1f8 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f1e6:	7af9      	ldrb	r1, [r7, #11]
 800f1e8:	233a      	movs	r3, #58	; 0x3a
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f7ff ff24 	bl	800f03a <SCSI_SenseCode>

      return -1;
 800f1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f6:	e067      	b.n	800f2c8 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	7afa      	ldrb	r2, [r7, #11]
 800f202:	4610      	mov	r0, r2
 800f204:	4798      	blx	r3
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d008      	beq.n	800f21e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f20c:	7af9      	ldrb	r1, [r7, #11]
 800f20e:	233a      	movs	r3, #58	; 0x3a
 800f210:	2202      	movs	r2, #2
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f7ff ff11 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f218:	f04f 33ff 	mov.w	r3, #4294967295
 800f21c:	e054      	b.n	800f2c8 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	3302      	adds	r3, #2
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	3303      	adds	r3, #3
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f22e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	3304      	adds	r3, #4
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f238:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	3205      	adds	r2, #5
 800f23e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f240:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3307      	adds	r3, #7
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	021b      	lsls	r3, r3, #8
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	3208      	adds	r2, #8
 800f254:	7812      	ldrb	r2, [r2, #0]
 800f256:	431a      	orrs	r2, r3
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f26a:	7af9      	ldrb	r1, [r7, #11]
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f000 fa95 	bl	800f79c <SCSI_CheckAddressRange>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	da02      	bge.n	800f27e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f278:	f04f 33ff 	mov.w	r3, #4294967295
 800f27c:	e024      	b.n	800f2c8 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f28a:	6979      	ldr	r1, [r7, #20]
 800f28c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f290:	fb01 f303 	mul.w	r3, r1, r3
 800f294:	429a      	cmp	r2, r3
 800f296:	d00a      	beq.n	800f2ae <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f29e:	2320      	movs	r3, #32
 800f2a0:	2205      	movs	r2, #5
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7ff fec9 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ac:	e00c      	b.n	800f2c8 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	2202      	movs	r2, #2
 800f2b2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2ba:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f2bc:	7afb      	ldrb	r3, [r7, #11]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f000 fa8d 	bl	800f7e0 <SCSI_ProcessRead>
 800f2c6:	4603      	mov	r3, r0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2e4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	7a1b      	ldrb	r3, [r3, #8]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f040 8087 	bne.w	800f3fe <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f2f6:	b25b      	sxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	db0a      	blt.n	800f312 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f302:	2320      	movs	r3, #32
 800f304:	2205      	movs	r2, #5
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	f7ff fe97 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f30c:	f04f 33ff 	mov.w	r3, #4294967295
 800f310:	e07f      	b.n	800f412 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d108      	bne.n	800f32e <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f31c:	7af9      	ldrb	r1, [r7, #11]
 800f31e:	233a      	movs	r3, #58	; 0x3a
 800f320:	2202      	movs	r2, #2
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f7ff fe89 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f328:	f04f 33ff 	mov.w	r3, #4294967295
 800f32c:	e071      	b.n	800f412 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	7afa      	ldrb	r2, [r7, #11]
 800f338:	4610      	mov	r0, r2
 800f33a:	4798      	blx	r3
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d008      	beq.n	800f354 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f342:	7af9      	ldrb	r1, [r7, #11]
 800f344:	233a      	movs	r3, #58	; 0x3a
 800f346:	2202      	movs	r2, #2
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f7ff fe76 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f34e:	f04f 33ff 	mov.w	r3, #4294967295
 800f352:	e05e      	b.n	800f412 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3302      	adds	r3, #2
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	3303      	adds	r3, #3
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f364:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3304      	adds	r3, #4
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f36e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	3205      	adds	r2, #5
 800f374:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f376:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3306      	adds	r3, #6
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	3307      	adds	r3, #7
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f38e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	3308      	adds	r3, #8
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f398:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	3209      	adds	r2, #9
 800f39e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f3a0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3b4:	7af9      	ldrb	r1, [r7, #11]
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f000 f9f0 	bl	800f79c <SCSI_CheckAddressRange>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	da02      	bge.n	800f3c8 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c6:	e024      	b.n	800f412 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3d4:	6979      	ldr	r1, [r7, #20]
 800f3d6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f3da:	fb01 f303 	mul.w	r3, r1, r3
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d00a      	beq.n	800f3f8 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f3e8:	2320      	movs	r3, #32
 800f3ea:	2205      	movs	r2, #5
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f7ff fe24 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f6:	e00c      	b.n	800f412 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2202      	movs	r2, #2
 800f3fc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f404:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f406:	7afb      	ldrb	r3, [r7, #11]
 800f408:	4619      	mov	r1, r3
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f000 f9e8 	bl	800f7e0 <SCSI_ProcessRead>
 800f410:	4603      	mov	r3, r0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3718      	adds	r7, #24
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b086      	sub	sp, #24
 800f41e:	af00      	add	r7, sp, #0
 800f420:	60f8      	str	r0, [r7, #12]
 800f422:	460b      	mov	r3, r1
 800f424:	607a      	str	r2, [r7, #4]
 800f426:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f42e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	7a1b      	ldrb	r3, [r3, #8]
 800f434:	2b00      	cmp	r3, #0
 800f436:	f040 80a5 	bne.w	800f584 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10a      	bne.n	800f45a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f44a:	2320      	movs	r3, #32
 800f44c:	2205      	movs	r2, #5
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f7ff fdf3 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f454:	f04f 33ff 	mov.w	r3, #4294967295
 800f458:	e09a      	b.n	800f590 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f460:	b25b      	sxtb	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	da0a      	bge.n	800f47c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f46c:	2320      	movs	r3, #32
 800f46e:	2205      	movs	r2, #5
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f7ff fde2 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f476:	f04f 33ff 	mov.w	r3, #4294967295
 800f47a:	e089      	b.n	800f590 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	7afa      	ldrb	r2, [r7, #11]
 800f486:	4610      	mov	r0, r2
 800f488:	4798      	blx	r3
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d008      	beq.n	800f4a2 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f490:	7af9      	ldrb	r1, [r7, #11]
 800f492:	233a      	movs	r3, #58	; 0x3a
 800f494:	2202      	movs	r2, #2
 800f496:	68f8      	ldr	r0, [r7, #12]
 800f498:	f7ff fdcf 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f49c:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a0:	e076      	b.n	800f590 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	7afa      	ldrb	r2, [r7, #11]
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	4798      	blx	r3
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d008      	beq.n	800f4c8 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f4b6:	7af9      	ldrb	r1, [r7, #11]
 800f4b8:	2327      	movs	r3, #39	; 0x27
 800f4ba:	2202      	movs	r2, #2
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f7ff fdbc 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4c6:	e063      	b.n	800f590 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	3302      	adds	r3, #2
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3303      	adds	r3, #3
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f4d8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3304      	adds	r3, #4
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f4e2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	3205      	adds	r2, #5
 800f4e8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f4ea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	3307      	adds	r3, #7
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	3208      	adds	r2, #8
 800f4fe:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f500:	431a      	orrs	r2, r3
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f514:	7af9      	ldrb	r1, [r7, #11]
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f000 f940 	bl	800f79c <SCSI_CheckAddressRange>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	da02      	bge.n	800f528 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f522:	f04f 33ff 	mov.w	r3, #4294967295
 800f526:	e033      	b.n	800f590 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f52e:	697a      	ldr	r2, [r7, #20]
 800f530:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f534:	fb02 f303 	mul.w	r3, r2, r3
 800f538:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f540:	693a      	ldr	r2, [r7, #16]
 800f542:	429a      	cmp	r2, r3
 800f544:	d00a      	beq.n	800f55c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f54c:	2320      	movs	r3, #32
 800f54e:	2205      	movs	r2, #5
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f7ff fd72 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f556:	f04f 33ff 	mov.w	r3, #4294967295
 800f55a:	e019      	b.n	800f590 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f562:	bf28      	it	cs
 800f564:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f568:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2201      	movs	r2, #1
 800f56e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	f103 0210 	add.w	r2, r3, #16
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	2101      	movs	r1, #1
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f000 ff01 	bl	8010382 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f580:	2300      	movs	r3, #0
 800f582:	e005      	b.n	800f590 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800f584:	7afb      	ldrb	r3, [r7, #11]
 800f586:	4619      	mov	r1, r3
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f000 f99c 	bl	800f8c6 <SCSI_ProcessWrite>
 800f58e:	4603      	mov	r3, r0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3718      	adds	r7, #24
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5ac:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	7a1b      	ldrb	r3, [r3, #8]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f040 80b5 	bne.w	800f722 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d10a      	bne.n	800f5d8 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f5c8:	2320      	movs	r3, #32
 800f5ca:	2205      	movs	r2, #5
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f7ff fd34 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d6:	e0aa      	b.n	800f72e <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f5de:	b25b      	sxtb	r3, r3
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	da0a      	bge.n	800f5fa <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f5ea:	2320      	movs	r3, #32
 800f5ec:	2205      	movs	r2, #5
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f7ff fd23 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f8:	e099      	b.n	800f72e <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	7afa      	ldrb	r2, [r7, #11]
 800f604:	4610      	mov	r0, r2
 800f606:	4798      	blx	r3
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f60e:	7af9      	ldrb	r1, [r7, #11]
 800f610:	233a      	movs	r3, #58	; 0x3a
 800f612:	2202      	movs	r2, #2
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f7ff fd10 	bl	800f03a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	2205      	movs	r2, #5
 800f61e:	721a      	strb	r2, [r3, #8]
      return -1;
 800f620:	f04f 33ff 	mov.w	r3, #4294967295
 800f624:	e083      	b.n	800f72e <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	7afa      	ldrb	r2, [r7, #11]
 800f630:	4610      	mov	r0, r2
 800f632:	4798      	blx	r3
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00b      	beq.n	800f652 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f63a:	7af9      	ldrb	r1, [r7, #11]
 800f63c:	2327      	movs	r3, #39	; 0x27
 800f63e:	2202      	movs	r2, #2
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f7ff fcfa 	bl	800f03a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	2205      	movs	r2, #5
 800f64a:	721a      	strb	r2, [r3, #8]
      return -1;
 800f64c:	f04f 33ff 	mov.w	r3, #4294967295
 800f650:	e06d      	b.n	800f72e <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	3302      	adds	r3, #2
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3303      	adds	r3, #3
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f662:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	3304      	adds	r3, #4
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f66c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	3205      	adds	r2, #5
 800f672:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f674:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3306      	adds	r3, #6
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3307      	adds	r3, #7
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f68c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3308      	adds	r3, #8
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f696:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	3209      	adds	r2, #9
 800f69c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f69e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f6b2:	7af9      	ldrb	r1, [r7, #11]
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f000 f871 	bl	800f79c <SCSI_CheckAddressRange>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	da02      	bge.n	800f6c6 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c4:	e033      	b.n	800f72e <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f6d2:	fb02 f303 	mul.w	r3, r2, r3
 800f6d6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f6de:	693a      	ldr	r2, [r7, #16]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d00a      	beq.n	800f6fa <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f6ea:	2320      	movs	r3, #32
 800f6ec:	2205      	movs	r2, #5
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7ff fca3 	bl	800f03a <SCSI_SenseCode>
      return -1;
 800f6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f8:	e019      	b.n	800f72e <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f700:	bf28      	it	cs
 800f702:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f706:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	2201      	movs	r2, #1
 800f70c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	f103 0210 	add.w	r2, r3, #16
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	2101      	movs	r1, #1
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f000 fe32 	bl	8010382 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f71e:	2300      	movs	r3, #0
 800f720:	e005      	b.n	800f72e <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800f722:	7afb      	ldrb	r3, [r7, #11]
 800f724:	4619      	mov	r1, r3
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f000 f8cd 	bl	800f8c6 <SCSI_ProcessWrite>
 800f72c:	4603      	mov	r3, r0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b086      	sub	sp, #24
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	60f8      	str	r0, [r7, #12]
 800f73e:	460b      	mov	r3, r1
 800f740:	607a      	str	r2, [r7, #4]
 800f742:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f74a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	3301      	adds	r3, #1
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	f003 0302 	and.w	r3, r3, #2
 800f756:	2b00      	cmp	r3, #0
 800f758:	d008      	beq.n	800f76c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f75a:	7af9      	ldrb	r1, [r7, #11]
 800f75c:	2324      	movs	r3, #36	; 0x24
 800f75e:	2205      	movs	r2, #5
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7ff fc6a 	bl	800f03a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f766:	f04f 33ff 	mov.w	r3, #4294967295
 800f76a:	e013      	b.n	800f794 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f778:	7af9      	ldrb	r1, [r7, #11]
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f000 f80e 	bl	800f79c <SCSI_CheckAddressRange>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	da02      	bge.n	800f78c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800f786:	f04f 33ff 	mov.w	r3, #4294967295
 800f78a:	e003      	b.n	800f794 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	2200      	movs	r2, #0
 800f790:	60da      	str	r2, [r3, #12]

  return 0;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	607a      	str	r2, [r7, #4]
 800f7a6:	603b      	str	r3, [r7, #0]
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7b2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	441a      	add	r2, r3
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d908      	bls.n	800f7d6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f7c4:	7af9      	ldrb	r1, [r7, #11]
 800f7c6:	2321      	movs	r3, #33	; 0x21
 800f7c8:	2205      	movs	r2, #5
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f7ff fc35 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800f7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d4:	e000      	b.n	800f7d8 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3718      	adds	r7, #24
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f7e0:	b590      	push	{r4, r7, lr}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7f2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f800:	fb02 f303 	mul.w	r3, r2, r3
 800f804:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f80c:	bf28      	it	cs
 800f80e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f812:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f81a:	691c      	ldr	r4, [r3, #16]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f103 0110 	add.w	r1, r3, #16
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f82e:	4618      	mov	r0, r3
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f836:	b29b      	uxth	r3, r3
 800f838:	78f8      	ldrb	r0, [r7, #3]
 800f83a:	47a0      	blx	r4
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	da08      	bge.n	800f854 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f842:	78f9      	ldrb	r1, [r7, #3]
 800f844:	2311      	movs	r3, #17
 800f846:	2204      	movs	r2, #4
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff fbf6 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800f84e:	f04f 33ff 	mov.w	r3, #4294967295
 800f852:	e034      	b.n	800f8be <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f103 0210 	add.w	r2, r3, #16
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2181      	movs	r1, #129	; 0x81
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fd6e 	bl	8010340 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f870:	4619      	mov	r1, r3
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	fbb3 f3f1 	udiv	r3, r3, r1
 800f878:	441a      	add	r2, r3
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f88c:	4619      	mov	r1, r3
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	fbb3 f3f1 	udiv	r3, r3, r1
 800f894:	1ad2      	subs	r2, r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	1ad2      	subs	r2, r2, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d102      	bne.n	800f8bc <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2203      	movs	r2, #3
 800f8ba:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3714      	adds	r7, #20
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd90      	pop	{r4, r7, pc}

0800f8c6 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f8c6:	b590      	push	{r4, r7, lr}
 800f8c8:	b085      	sub	sp, #20
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8d8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f8e6:	fb02 f303 	mul.w	r3, r2, r3
 800f8ea:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8f2:	bf28      	it	cs
 800f8f4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f8f8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f900:	695c      	ldr	r4, [r3, #20]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f103 0110 	add.w	r1, r3, #16
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f914:	4618      	mov	r0, r3
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	78f8      	ldrb	r0, [r7, #3]
 800f920:	47a0      	blx	r4
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	da08      	bge.n	800f93a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f928:	78f9      	ldrb	r1, [r7, #3]
 800f92a:	2303      	movs	r3, #3
 800f92c:	2204      	movs	r2, #4
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff fb83 	bl	800f03a <SCSI_SenseCode>
    return -1;
 800f934:	f04f 33ff 	mov.w	r3, #4294967295
 800f938:	e044      	b.n	800f9c4 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f946:	4619      	mov	r1, r3
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f94e:	441a      	add	r2, r3
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f962:	4619      	mov	r1, r3
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	fbb3 f3f1 	udiv	r3, r3, r1
 800f96a:	1ad2      	subs	r2, r2, r3
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	1ad2      	subs	r2, r2, r3
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d104      	bne.n	800f996 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f98c:	2100      	movs	r1, #0
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7fe fe5c 	bl	800e64c <MSC_BOT_SendCSW>
 800f994:	e015      	b.n	800f9c2 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f9a2:	fb02 f303 	mul.w	r3, r2, r3
 800f9a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9aa:	bf28      	it	cs
 800f9ac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f9b0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f103 0210 	add.w	r2, r3, #16
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	2101      	movs	r1, #1
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 fce0 	bl	8010382 <USBD_LL_PrepareReceive>
  }

  return 0;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3714      	adds	r7, #20
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd90      	pop	{r4, r7, pc}

0800f9cc <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b087      	sub	sp, #28
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f9da:	88fb      	ldrh	r3, [r7, #6]
 800f9dc:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800f9de:	8afa      	ldrh	r2, [r7, #22]
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f9e4:	e00b      	b.n	800f9fe <SCSI_UpdateBotData+0x32>
  {
    len--;
 800f9e6:	8afb      	ldrh	r3, [r7, #22]
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f9ec:	8afb      	ldrh	r3, [r7, #22]
 800f9ee:	68ba      	ldr	r2, [r7, #8]
 800f9f0:	441a      	add	r2, r3
 800f9f2:	8afb      	ldrh	r3, [r7, #22]
 800f9f4:	7811      	ldrb	r1, [r2, #0]
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	460a      	mov	r2, r1
 800f9fc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f9fe:	8afb      	ldrh	r3, [r7, #22]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d1f0      	bne.n	800f9e6 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	371c      	adds	r7, #28
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr
	...

0800fa14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800fa18:	2201      	movs	r2, #1
 800fa1a:	4912      	ldr	r1, [pc, #72]	; (800fa64 <MX_USB_DEVICE_Init+0x50>)
 800fa1c:	4812      	ldr	r0, [pc, #72]	; (800fa68 <MX_USB_DEVICE_Init+0x54>)
 800fa1e:	f7fd f9a3 	bl	800cd68 <USBD_Init>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d001      	beq.n	800fa2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fa28:	f7f1 fa04 	bl	8000e34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 800fa2c:	490f      	ldr	r1, [pc, #60]	; (800fa6c <MX_USB_DEVICE_Init+0x58>)
 800fa2e:	480e      	ldr	r0, [pc, #56]	; (800fa68 <MX_USB_DEVICE_Init+0x54>)
 800fa30:	f7fd f9d0 	bl	800cdd4 <USBD_RegisterClass>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fa3a:	f7f1 f9fb 	bl	8000e34 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 800fa3e:	490c      	ldr	r1, [pc, #48]	; (800fa70 <MX_USB_DEVICE_Init+0x5c>)
 800fa40:	4809      	ldr	r0, [pc, #36]	; (800fa68 <MX_USB_DEVICE_Init+0x54>)
 800fa42:	f7fe fc77 	bl	800e334 <USBD_MSC_RegisterStorage>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fa4c:	f7f1 f9f2 	bl	8000e34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800fa50:	4805      	ldr	r0, [pc, #20]	; (800fa68 <MX_USB_DEVICE_Init+0x54>)
 800fa52:	f7fd f9e0 	bl	800ce16 <USBD_Start>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fa5c:	f7f1 f9ea 	bl	8000e34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa60:	bf00      	nop
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	200000f8 	.word	0x200000f8
 800fa68:	20005140 	.word	0x20005140
 800fa6c:	20000010 	.word	0x20000010
 800fa70:	20000158 	.word	0x20000158

0800fa74 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	6039      	str	r1, [r7, #0]
 800fa7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	2212      	movs	r2, #18
 800fa84:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800fa86:	4b03      	ldr	r3, [pc, #12]	; (800fa94 <USBD_HS_DeviceDescriptor+0x20>)
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	370c      	adds	r7, #12
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr
 800fa94:	20000118 	.word	0x20000118

0800fa98 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	4603      	mov	r3, r0
 800faa0:	6039      	str	r1, [r7, #0]
 800faa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	2204      	movs	r2, #4
 800faa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800faaa:	4b03      	ldr	r3, [pc, #12]	; (800fab8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	20000138 	.word	0x20000138

0800fabc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	4603      	mov	r3, r0
 800fac4:	6039      	str	r1, [r7, #0]
 800fac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fac8:	79fb      	ldrb	r3, [r7, #7]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d105      	bne.n	800fada <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800face:	683a      	ldr	r2, [r7, #0]
 800fad0:	4907      	ldr	r1, [pc, #28]	; (800faf0 <USBD_HS_ProductStrDescriptor+0x34>)
 800fad2:	4808      	ldr	r0, [pc, #32]	; (800faf4 <USBD_HS_ProductStrDescriptor+0x38>)
 800fad4:	f7fe f9a6 	bl	800de24 <USBD_GetString>
 800fad8:	e004      	b.n	800fae4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800fada:	683a      	ldr	r2, [r7, #0]
 800fadc:	4904      	ldr	r1, [pc, #16]	; (800faf0 <USBD_HS_ProductStrDescriptor+0x34>)
 800fade:	4805      	ldr	r0, [pc, #20]	; (800faf4 <USBD_HS_ProductStrDescriptor+0x38>)
 800fae0:	f7fe f9a0 	bl	800de24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fae4:	4b02      	ldr	r3, [pc, #8]	; (800faf0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	20005410 	.word	0x20005410
 800faf4:	08010830 	.word	0x08010830

0800faf8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	4603      	mov	r3, r0
 800fb00:	6039      	str	r1, [r7, #0]
 800fb02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	4904      	ldr	r1, [pc, #16]	; (800fb18 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800fb08:	4804      	ldr	r0, [pc, #16]	; (800fb1c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800fb0a:	f7fe f98b 	bl	800de24 <USBD_GetString>
  return USBD_StrDesc;
 800fb0e:	4b02      	ldr	r3, [pc, #8]	; (800fb18 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	20005410 	.word	0x20005410
 800fb1c:	08010844 	.word	0x08010844

0800fb20 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	4603      	mov	r3, r0
 800fb28:	6039      	str	r1, [r7, #0]
 800fb2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	221a      	movs	r2, #26
 800fb30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb32:	f000 f855 	bl	800fbe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800fb36:	4b02      	ldr	r3, [pc, #8]	; (800fb40 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	2000013c 	.word	0x2000013c

0800fb44 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	6039      	str	r1, [r7, #0]
 800fb4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb50:	79fb      	ldrb	r3, [r7, #7]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d105      	bne.n	800fb62 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800fb56:	683a      	ldr	r2, [r7, #0]
 800fb58:	4907      	ldr	r1, [pc, #28]	; (800fb78 <USBD_HS_ConfigStrDescriptor+0x34>)
 800fb5a:	4808      	ldr	r0, [pc, #32]	; (800fb7c <USBD_HS_ConfigStrDescriptor+0x38>)
 800fb5c:	f7fe f962 	bl	800de24 <USBD_GetString>
 800fb60:	e004      	b.n	800fb6c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800fb62:	683a      	ldr	r2, [r7, #0]
 800fb64:	4904      	ldr	r1, [pc, #16]	; (800fb78 <USBD_HS_ConfigStrDescriptor+0x34>)
 800fb66:	4805      	ldr	r0, [pc, #20]	; (800fb7c <USBD_HS_ConfigStrDescriptor+0x38>)
 800fb68:	f7fe f95c 	bl	800de24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb6c:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	20005410 	.word	0x20005410
 800fb7c:	08010858 	.word	0x08010858

0800fb80 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	6039      	str	r1, [r7, #0]
 800fb8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d105      	bne.n	800fb9e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800fb92:	683a      	ldr	r2, [r7, #0]
 800fb94:	4907      	ldr	r1, [pc, #28]	; (800fbb4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800fb96:	4808      	ldr	r0, [pc, #32]	; (800fbb8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800fb98:	f7fe f944 	bl	800de24 <USBD_GetString>
 800fb9c:	e004      	b.n	800fba8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800fb9e:	683a      	ldr	r2, [r7, #0]
 800fba0:	4904      	ldr	r1, [pc, #16]	; (800fbb4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800fba2:	4805      	ldr	r0, [pc, #20]	; (800fbb8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800fba4:	f7fe f93e 	bl	800de24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fba8:	4b02      	ldr	r3, [pc, #8]	; (800fbb4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	20005410 	.word	0x20005410
 800fbb8:	08010864 	.word	0x08010864

0800fbbc <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	6039      	str	r1, [r7, #0]
 800fbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	220c      	movs	r2, #12
 800fbcc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800fbce:	4b03      	ldr	r3, [pc, #12]	; (800fbdc <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr
 800fbdc:	2000012c 	.word	0x2000012c

0800fbe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fbe6:	4b0f      	ldr	r3, [pc, #60]	; (800fc24 <Get_SerialNum+0x44>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fbec:	4b0e      	ldr	r3, [pc, #56]	; (800fc28 <Get_SerialNum+0x48>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fbf2:	4b0e      	ldr	r3, [pc, #56]	; (800fc2c <Get_SerialNum+0x4c>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d009      	beq.n	800fc1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fc06:	2208      	movs	r2, #8
 800fc08:	4909      	ldr	r1, [pc, #36]	; (800fc30 <Get_SerialNum+0x50>)
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f000 f814 	bl	800fc38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fc10:	2204      	movs	r2, #4
 800fc12:	4908      	ldr	r1, [pc, #32]	; (800fc34 <Get_SerialNum+0x54>)
 800fc14:	68b8      	ldr	r0, [r7, #8]
 800fc16:	f000 f80f 	bl	800fc38 <IntToUnicode>
  }
}
 800fc1a:	bf00      	nop
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	1ff0f420 	.word	0x1ff0f420
 800fc28:	1ff0f424 	.word	0x1ff0f424
 800fc2c:	1ff0f428 	.word	0x1ff0f428
 800fc30:	2000013e 	.word	0x2000013e
 800fc34:	2000014e 	.word	0x2000014e

0800fc38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b087      	sub	sp, #28
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	4613      	mov	r3, r2
 800fc44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc46:	2300      	movs	r3, #0
 800fc48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	75fb      	strb	r3, [r7, #23]
 800fc4e:	e027      	b.n	800fca0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	0f1b      	lsrs	r3, r3, #28
 800fc54:	2b09      	cmp	r3, #9
 800fc56:	d80b      	bhi.n	800fc70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	0f1b      	lsrs	r3, r3, #28
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	4619      	mov	r1, r3
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	440b      	add	r3, r1
 800fc68:	3230      	adds	r2, #48	; 0x30
 800fc6a:	b2d2      	uxtb	r2, r2
 800fc6c:	701a      	strb	r2, [r3, #0]
 800fc6e:	e00a      	b.n	800fc86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	0f1b      	lsrs	r3, r3, #28
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	7dfb      	ldrb	r3, [r7, #23]
 800fc78:	005b      	lsls	r3, r3, #1
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	440b      	add	r3, r1
 800fc80:	3237      	adds	r2, #55	; 0x37
 800fc82:	b2d2      	uxtb	r2, r2
 800fc84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	011b      	lsls	r3, r3, #4
 800fc8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc8c:	7dfb      	ldrb	r3, [r7, #23]
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	3301      	adds	r3, #1
 800fc92:	68ba      	ldr	r2, [r7, #8]
 800fc94:	4413      	add	r3, r2
 800fc96:	2200      	movs	r2, #0
 800fc98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	75fb      	strb	r3, [r7, #23]
 800fca0:	7dfa      	ldrb	r2, [r7, #23]
 800fca2:	79fb      	ldrb	r3, [r7, #7]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d3d3      	bcc.n	800fc50 <IntToUnicode+0x18>
  }
}
 800fca8:	bf00      	nop
 800fcaa:	bf00      	nop
 800fcac:	371c      	adds	r7, #28
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr

0800fcb6 <STORAGE_Init_HS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 800fcb6:	b480      	push	{r7}
 800fcb8:	b083      	sub	sp, #12
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800fcc0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	370c      	adds	r7, #12
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr

0800fcce <STORAGE_GetCapacity_HS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800fcce:	b480      	push	{r7}
 800fcd0:	b085      	sub	sp, #20
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	60b9      	str	r1, [r7, #8]
 800fcd8:	607a      	str	r2, [r7, #4]
 800fcda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  *block_num  = STORAGE_BLK_NBR;
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fce2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcea:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800fcec:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3714      	adds	r7, #20
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr

0800fcfa <STORAGE_IsReady_HS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 800fcfa:	b480      	push	{r7}
 800fcfc:	b083      	sub	sp, #12
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	4603      	mov	r3, r0
 800fd02:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  return (USBD_OK);
 800fd04:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	370c      	adds	r7, #12
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <STORAGE_IsWriteProtected_HS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 800fd12:	b480      	push	{r7}
 800fd14:	b083      	sub	sp, #12
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	4603      	mov	r3, r0
 800fd1a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 800fd1c:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr

0800fd2a <STORAGE_Read_HS>:
  * @param  blk_addr: .
  * @param  blk_len: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fd2a:	b480      	push	{r7}
 800fd2c:	b085      	sub	sp, #20
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	461a      	mov	r2, r3
 800fd36:	4603      	mov	r3, r0
 800fd38:	73fb      	strb	r3, [r7, #15]
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 13 */
  return (USBD_OK);
 800fd3e:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <STORAGE_Write_HS>:
  * @param  blk_addr: .
  * @param  blk_len: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60b9      	str	r1, [r7, #8]
 800fd54:	607a      	str	r2, [r7, #4]
 800fd56:	461a      	mov	r2, r3
 800fd58:	4603      	mov	r3, r0
 800fd5a:	73fb      	strb	r3, [r7, #15]
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 14 */
  return (USBD_OK);
 800fd60:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3714      	adds	r7, #20
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <STORAGE_GetMaxLun_HS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 800fd6e:	b480      	push	{r7}
 800fd70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 800fd72:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
	...

0800fd80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b08c      	sub	sp, #48	; 0x30
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd88:	f107 031c 	add.w	r3, r7, #28
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	601a      	str	r2, [r3, #0]
 800fd90:	605a      	str	r2, [r3, #4]
 800fd92:	609a      	str	r2, [r3, #8]
 800fd94:	60da      	str	r2, [r3, #12]
 800fd96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a3d      	ldr	r2, [pc, #244]	; (800fe94 <HAL_PCD_MspInit+0x114>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d174      	bne.n	800fe8c <HAL_PCD_MspInit+0x10c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fda2:	4b3d      	ldr	r3, [pc, #244]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda6:	4a3c      	ldr	r2, [pc, #240]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fda8:	f043 0304 	orr.w	r3, r3, #4
 800fdac:	6313      	str	r3, [r2, #48]	; 0x30
 800fdae:	4b3a      	ldr	r3, [pc, #232]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb2:	f003 0304 	and.w	r3, r3, #4
 800fdb6:	61bb      	str	r3, [r7, #24]
 800fdb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fdba:	4b37      	ldr	r3, [pc, #220]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbe:	4a36      	ldr	r2, [pc, #216]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fdc0:	f043 0301 	orr.w	r3, r3, #1
 800fdc4:	6313      	str	r3, [r2, #48]	; 0x30
 800fdc6:	4b34      	ldr	r3, [pc, #208]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdca:	f003 0301 	and.w	r3, r3, #1
 800fdce:	617b      	str	r3, [r7, #20]
 800fdd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fdd2:	4b31      	ldr	r3, [pc, #196]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd6:	4a30      	ldr	r2, [pc, #192]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fdd8:	f043 0302 	orr.w	r3, r3, #2
 800fddc:	6313      	str	r3, [r2, #48]	; 0x30
 800fdde:	4b2e      	ldr	r3, [pc, #184]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde2:	f003 0302 	and.w	r3, r3, #2
 800fde6:	613b      	str	r3, [r7, #16]
 800fde8:	693b      	ldr	r3, [r7, #16]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800fdea:	230d      	movs	r3, #13
 800fdec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fdee:	2302      	movs	r3, #2
 800fdf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fdf6:	2303      	movs	r3, #3
 800fdf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800fdfa:	230a      	movs	r3, #10
 800fdfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fdfe:	f107 031c 	add.w	r3, r7, #28
 800fe02:	4619      	mov	r1, r3
 800fe04:	4825      	ldr	r0, [pc, #148]	; (800fe9c <HAL_PCD_MspInit+0x11c>)
 800fe06:	f7f1 ff71 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800fe0a:	2328      	movs	r3, #40	; 0x28
 800fe0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe0e:	2302      	movs	r3, #2
 800fe10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe16:	2303      	movs	r3, #3
 800fe18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800fe1a:	230a      	movs	r3, #10
 800fe1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe1e:	f107 031c 	add.w	r3, r7, #28
 800fe22:	4619      	mov	r1, r3
 800fe24:	481e      	ldr	r0, [pc, #120]	; (800fea0 <HAL_PCD_MspInit+0x120>)
 800fe26:	f7f1 ff61 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800fe2a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800fe2e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe30:	2302      	movs	r3, #2
 800fe32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe34:	2300      	movs	r3, #0
 800fe36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe38:	2303      	movs	r3, #3
 800fe3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800fe3c:	230a      	movs	r3, #10
 800fe3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fe40:	f107 031c 	add.w	r3, r7, #28
 800fe44:	4619      	mov	r1, r3
 800fe46:	4817      	ldr	r0, [pc, #92]	; (800fea4 <HAL_PCD_MspInit+0x124>)
 800fe48:	f7f1 ff50 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800fe4c:	4b12      	ldr	r3, [pc, #72]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fe4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe50:	4a11      	ldr	r2, [pc, #68]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fe52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fe56:	6313      	str	r3, [r2, #48]	; 0x30
 800fe58:	4b0f      	ldr	r3, [pc, #60]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fe5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe60:	60fb      	str	r3, [r7, #12]
 800fe62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800fe64:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fe66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe68:	4a0b      	ldr	r2, [pc, #44]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fe6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe6e:	6313      	str	r3, [r2, #48]	; 0x30
 800fe70:	4b09      	ldr	r3, [pc, #36]	; (800fe98 <HAL_PCD_MspInit+0x118>)
 800fe72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fe78:	60bb      	str	r3, [r7, #8]
 800fe7a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	2105      	movs	r1, #5
 800fe80:	204d      	movs	r0, #77	; 0x4d
 800fe82:	f7f1 fe62 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800fe86:	204d      	movs	r0, #77	; 0x4d
 800fe88:	f7f1 fe7b 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800fe8c:	bf00      	nop
 800fe8e:	3730      	adds	r7, #48	; 0x30
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	40040000 	.word	0x40040000
 800fe98:	40023800 	.word	0x40023800
 800fe9c:	40020800 	.word	0x40020800
 800fea0:	40020000 	.word	0x40020000
 800fea4:	40020400 	.word	0x40020400

0800fea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800febc:	4619      	mov	r1, r3
 800febe:	4610      	mov	r0, r2
 800fec0:	f7fc fff4 	bl	800ceac <USBD_LL_SetupStage>
}
 800fec4:	bf00      	nop
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	460b      	mov	r3, r1
 800fed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800fede:	78fa      	ldrb	r2, [r7, #3]
 800fee0:	6879      	ldr	r1, [r7, #4]
 800fee2:	4613      	mov	r3, r2
 800fee4:	00db      	lsls	r3, r3, #3
 800fee6:	1a9b      	subs	r3, r3, r2
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	440b      	add	r3, r1
 800feec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	78fb      	ldrb	r3, [r7, #3]
 800fef4:	4619      	mov	r1, r3
 800fef6:	f7fd f82e 	bl	800cf56 <USBD_LL_DataOutStage>
}
 800fefa:	bf00      	nop
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b082      	sub	sp, #8
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800ff14:	78fa      	ldrb	r2, [r7, #3]
 800ff16:	6879      	ldr	r1, [r7, #4]
 800ff18:	4613      	mov	r3, r2
 800ff1a:	00db      	lsls	r3, r3, #3
 800ff1c:	1a9b      	subs	r3, r3, r2
 800ff1e:	009b      	lsls	r3, r3, #2
 800ff20:	440b      	add	r3, r1
 800ff22:	3348      	adds	r3, #72	; 0x48
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	78fb      	ldrb	r3, [r7, #3]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	f7fd f877 	bl	800d01c <USBD_LL_DataInStage>
}
 800ff2e:	bf00      	nop
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b082      	sub	sp, #8
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fd f97b 	bl	800d240 <USBD_LL_SOF>
}
 800ff4a:	bf00      	nop
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b084      	sub	sp, #16
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d102      	bne.n	800ff6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ff66:	2300      	movs	r3, #0
 800ff68:	73fb      	strb	r3, [r7, #15]
 800ff6a:	e008      	b.n	800ff7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	d102      	bne.n	800ff7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ff74:	2301      	movs	r3, #1
 800ff76:	73fb      	strb	r3, [r7, #15]
 800ff78:	e001      	b.n	800ff7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ff7a:	f7f0 ff5b 	bl	8000e34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ff84:	7bfa      	ldrb	r2, [r7, #15]
 800ff86:	4611      	mov	r1, r2
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fd f91e 	bl	800d1ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fd f8d7 	bl	800d148 <USBD_LL_Reset>
}
 800ff9a:	bf00      	nop
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
	...

0800ffa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fd f919 	bl	800d1ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	6812      	ldr	r2, [r2, #0]
 800ffc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ffca:	f043 0301 	orr.w	r3, r3, #1
 800ffce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a1b      	ldr	r3, [r3, #32]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ffd8:	4b04      	ldr	r3, [pc, #16]	; (800ffec <HAL_PCD_SuspendCallback+0x48>)
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	4a03      	ldr	r2, [pc, #12]	; (800ffec <HAL_PCD_SuspendCallback+0x48>)
 800ffde:	f043 0306 	orr.w	r3, r3, #6
 800ffe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ffe4:	bf00      	nop
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	e000ed00 	.word	0xe000ed00

0800fff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fd f908 	bl	800d214 <USBD_LL_Resume>
}
 8010004:	bf00      	nop
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	460b      	mov	r3, r1
 8010016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801001e:	78fa      	ldrb	r2, [r7, #3]
 8010020:	4611      	mov	r1, r2
 8010022:	4618      	mov	r0, r3
 8010024:	f7fd f933 	bl	800d28e <USBD_LL_IsoOUTIncomplete>
}
 8010028:	bf00      	nop
 801002a:	3708      	adds	r7, #8
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	460b      	mov	r3, r1
 801003a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010042:	78fa      	ldrb	r2, [r7, #3]
 8010044:	4611      	mov	r1, r2
 8010046:	4618      	mov	r0, r3
 8010048:	f7fd f914 	bl	800d274 <USBD_LL_IsoINIncomplete>
}
 801004c:	bf00      	nop
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd f920 	bl	800d2a8 <USBD_LL_DevConnected>
}
 8010068:	bf00      	nop
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801007e:	4618      	mov	r0, r3
 8010080:	f7fd f91d 	bl	800d2be <USBD_LL_DevDisconnected>
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	2b01      	cmp	r3, #1
 801009a:	d140      	bne.n	801011e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801009c:	4a22      	ldr	r2, [pc, #136]	; (8010128 <USBD_LL_Init+0x9c>)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_HS;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4a20      	ldr	r2, [pc, #128]	; (8010128 <USBD_LL_Init+0x9c>)
 80100a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80100ac:	4b1e      	ldr	r3, [pc, #120]	; (8010128 <USBD_LL_Init+0x9c>)
 80100ae:	4a1f      	ldr	r2, [pc, #124]	; (801012c <USBD_LL_Init+0xa0>)
 80100b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 80100b2:	4b1d      	ldr	r3, [pc, #116]	; (8010128 <USBD_LL_Init+0x9c>)
 80100b4:	2208      	movs	r2, #8
 80100b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80100b8:	4b1b      	ldr	r3, [pc, #108]	; (8010128 <USBD_LL_Init+0x9c>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80100be:	4b1a      	ldr	r3, [pc, #104]	; (8010128 <USBD_LL_Init+0x9c>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80100c4:	4b18      	ldr	r3, [pc, #96]	; (8010128 <USBD_LL_Init+0x9c>)
 80100c6:	2201      	movs	r2, #1
 80100c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80100ca:	4b17      	ldr	r3, [pc, #92]	; (8010128 <USBD_LL_Init+0x9c>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80100d0:	4b15      	ldr	r3, [pc, #84]	; (8010128 <USBD_LL_Init+0x9c>)
 80100d2:	2200      	movs	r2, #0
 80100d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80100d6:	4b14      	ldr	r3, [pc, #80]	; (8010128 <USBD_LL_Init+0x9c>)
 80100d8:	2200      	movs	r2, #0
 80100da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80100dc:	4b12      	ldr	r3, [pc, #72]	; (8010128 <USBD_LL_Init+0x9c>)
 80100de:	2200      	movs	r2, #0
 80100e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80100e2:	4b11      	ldr	r3, [pc, #68]	; (8010128 <USBD_LL_Init+0x9c>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80100e8:	4b0f      	ldr	r3, [pc, #60]	; (8010128 <USBD_LL_Init+0x9c>)
 80100ea:	2200      	movs	r2, #0
 80100ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80100ee:	480e      	ldr	r0, [pc, #56]	; (8010128 <USBD_LL_Init+0x9c>)
 80100f0:	f7f2 f8cf 	bl	8002292 <HAL_PCD_Init>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d001      	beq.n	80100fe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80100fa:	f7f0 fe9b 	bl	8000e34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80100fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010102:	4809      	ldr	r0, [pc, #36]	; (8010128 <USBD_LL_Init+0x9c>)
 8010104:	f7f3 fa6b 	bl	80035de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8010108:	2280      	movs	r2, #128	; 0x80
 801010a:	2100      	movs	r1, #0
 801010c:	4806      	ldr	r0, [pc, #24]	; (8010128 <USBD_LL_Init+0x9c>)
 801010e:	f7f3 fa1f 	bl	8003550 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8010112:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8010116:	2101      	movs	r1, #1
 8010118:	4803      	ldr	r0, [pc, #12]	; (8010128 <USBD_LL_Init+0x9c>)
 801011a:	f7f3 fa19 	bl	8003550 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801011e:	2300      	movs	r3, #0
}
 8010120:	4618      	mov	r0, r3
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	20005610 	.word	0x20005610
 801012c:	40040000 	.word	0x40040000

08010130 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010138:	2300      	movs	r3, #0
 801013a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010146:	4618      	mov	r0, r3
 8010148:	f7f2 f9c7 	bl	80024da <HAL_PCD_Start>
 801014c:	4603      	mov	r3, r0
 801014e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010150:	7bfb      	ldrb	r3, [r7, #15]
 8010152:	4618      	mov	r0, r3
 8010154:	f000 f99e 	bl	8010494 <USBD_Get_USB_Status>
 8010158:	4603      	mov	r3, r0
 801015a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801015c:	7bbb      	ldrb	r3, [r7, #14]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b084      	sub	sp, #16
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	4608      	mov	r0, r1
 8010170:	4611      	mov	r1, r2
 8010172:	461a      	mov	r2, r3
 8010174:	4603      	mov	r3, r0
 8010176:	70fb      	strb	r3, [r7, #3]
 8010178:	460b      	mov	r3, r1
 801017a:	70bb      	strb	r3, [r7, #2]
 801017c:	4613      	mov	r3, r2
 801017e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010184:	2300      	movs	r3, #0
 8010186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801018e:	78bb      	ldrb	r3, [r7, #2]
 8010190:	883a      	ldrh	r2, [r7, #0]
 8010192:	78f9      	ldrb	r1, [r7, #3]
 8010194:	f7f2 fdb7 	bl	8002d06 <HAL_PCD_EP_Open>
 8010198:	4603      	mov	r3, r0
 801019a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 f978 	bl	8010494 <USBD_Get_USB_Status>
 80101a4:	4603      	mov	r3, r0
 80101a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b084      	sub	sp, #16
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	460b      	mov	r3, r1
 80101bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101cc:	78fa      	ldrb	r2, [r7, #3]
 80101ce:	4611      	mov	r1, r2
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7f2 fe00 	bl	8002dd6 <HAL_PCD_EP_Close>
 80101d6:	4603      	mov	r3, r0
 80101d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101da:	7bfb      	ldrb	r3, [r7, #15]
 80101dc:	4618      	mov	r0, r3
 80101de:	f000 f959 	bl	8010494 <USBD_Get_USB_Status>
 80101e2:	4603      	mov	r3, r0
 80101e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	460b      	mov	r3, r1
 80101fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101fc:	2300      	movs	r3, #0
 80101fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010200:	2300      	movs	r3, #0
 8010202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801020a:	78fa      	ldrb	r2, [r7, #3]
 801020c:	4611      	mov	r1, r2
 801020e:	4618      	mov	r0, r3
 8010210:	f7f2 ff92 	bl	8003138 <HAL_PCD_EP_Flush>
 8010214:	4603      	mov	r3, r0
 8010216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010218:	7bfb      	ldrb	r3, [r7, #15]
 801021a:	4618      	mov	r0, r3
 801021c:	f000 f93a 	bl	8010494 <USBD_Get_USB_Status>
 8010220:	4603      	mov	r3, r0
 8010222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010224:	7bbb      	ldrb	r3, [r7, #14]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b084      	sub	sp, #16
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	460b      	mov	r3, r1
 8010238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801023a:	2300      	movs	r3, #0
 801023c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801023e:	2300      	movs	r3, #0
 8010240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010248:	78fa      	ldrb	r2, [r7, #3]
 801024a:	4611      	mov	r1, r2
 801024c:	4618      	mov	r0, r3
 801024e:	f7f2 feb9 	bl	8002fc4 <HAL_PCD_EP_SetStall>
 8010252:	4603      	mov	r3, r0
 8010254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010256:	7bfb      	ldrb	r3, [r7, #15]
 8010258:	4618      	mov	r0, r3
 801025a:	f000 f91b 	bl	8010494 <USBD_Get_USB_Status>
 801025e:	4603      	mov	r3, r0
 8010260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010262:	7bbb      	ldrb	r3, [r7, #14]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801027c:	2300      	movs	r3, #0
 801027e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010286:	78fa      	ldrb	r2, [r7, #3]
 8010288:	4611      	mov	r1, r2
 801028a:	4618      	mov	r0, r3
 801028c:	f7f2 fefe 	bl	800308c <HAL_PCD_EP_ClrStall>
 8010290:	4603      	mov	r3, r0
 8010292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010294:	7bfb      	ldrb	r3, [r7, #15]
 8010296:	4618      	mov	r0, r3
 8010298:	f000 f8fc 	bl	8010494 <USBD_Get_USB_Status>
 801029c:	4603      	mov	r3, r0
 801029e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102aa:	b480      	push	{r7}
 80102ac:	b085      	sub	sp, #20
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	460b      	mov	r3, r1
 80102b4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102bc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80102be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	da0b      	bge.n	80102de <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80102c6:	78fb      	ldrb	r3, [r7, #3]
 80102c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102cc:	68f9      	ldr	r1, [r7, #12]
 80102ce:	4613      	mov	r3, r2
 80102d0:	00db      	lsls	r3, r3, #3
 80102d2:	1a9b      	subs	r3, r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	440b      	add	r3, r1
 80102d8:	333e      	adds	r3, #62	; 0x3e
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	e00b      	b.n	80102f6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80102de:	78fb      	ldrb	r3, [r7, #3]
 80102e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102e4:	68f9      	ldr	r1, [r7, #12]
 80102e6:	4613      	mov	r3, r2
 80102e8:	00db      	lsls	r3, r3, #3
 80102ea:	1a9b      	subs	r3, r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	440b      	add	r3, r1
 80102f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80102f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3714      	adds	r7, #20
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010302:	b580      	push	{r7, lr}
 8010304:	b084      	sub	sp, #16
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
 801030a:	460b      	mov	r3, r1
 801030c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801030e:	2300      	movs	r3, #0
 8010310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010312:	2300      	movs	r3, #0
 8010314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801031c:	78fa      	ldrb	r2, [r7, #3]
 801031e:	4611      	mov	r1, r2
 8010320:	4618      	mov	r0, r3
 8010322:	f7f2 fccb 	bl	8002cbc <HAL_PCD_SetAddress>
 8010326:	4603      	mov	r3, r0
 8010328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801032a:	7bfb      	ldrb	r3, [r7, #15]
 801032c:	4618      	mov	r0, r3
 801032e:	f000 f8b1 	bl	8010494 <USBD_Get_USB_Status>
 8010332:	4603      	mov	r3, r0
 8010334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010336:	7bbb      	ldrb	r3, [r7, #14]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	607a      	str	r2, [r7, #4]
 801034a:	603b      	str	r3, [r7, #0]
 801034c:	460b      	mov	r3, r1
 801034e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010350:	2300      	movs	r3, #0
 8010352:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801035e:	7af9      	ldrb	r1, [r7, #11]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	f7f2 fde4 	bl	8002f30 <HAL_PCD_EP_Transmit>
 8010368:	4603      	mov	r3, r0
 801036a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801036c:	7dfb      	ldrb	r3, [r7, #23]
 801036e:	4618      	mov	r0, r3
 8010370:	f000 f890 	bl	8010494 <USBD_Get_USB_Status>
 8010374:	4603      	mov	r3, r0
 8010376:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010378:	7dbb      	ldrb	r3, [r7, #22]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3718      	adds	r7, #24
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b086      	sub	sp, #24
 8010386:	af00      	add	r7, sp, #0
 8010388:	60f8      	str	r0, [r7, #12]
 801038a:	607a      	str	r2, [r7, #4]
 801038c:	603b      	str	r3, [r7, #0]
 801038e:	460b      	mov	r3, r1
 8010390:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010392:	2300      	movs	r3, #0
 8010394:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010396:	2300      	movs	r3, #0
 8010398:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103a0:	7af9      	ldrb	r1, [r7, #11]
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	687a      	ldr	r2, [r7, #4]
 80103a6:	f7f2 fd60 	bl	8002e6a <HAL_PCD_EP_Receive>
 80103aa:	4603      	mov	r3, r0
 80103ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f000 f86f 	bl	8010494 <USBD_Get_USB_Status>
 80103b6:	4603      	mov	r3, r0
 80103b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80103ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3718      	adds	r7, #24
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	460b      	mov	r3, r1
 80103ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80103d6:	78fa      	ldrb	r2, [r7, #3]
 80103d8:	4611      	mov	r1, r2
 80103da:	4618      	mov	r0, r3
 80103dc:	f7f2 fd90 	bl	8002f00 <HAL_PCD_EP_GetRxCount>
 80103e0:	4603      	mov	r3, r0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
	...

080103ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	460b      	mov	r3, r1
 80103f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80103f8:	78fb      	ldrb	r3, [r7, #3]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d002      	beq.n	8010404 <HAL_PCDEx_LPM_Callback+0x18>
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d01f      	beq.n	8010442 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010402:	e03b      	b.n	801047c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d007      	beq.n	801041c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801040c:	f000 f83c 	bl	8010488 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010410:	4b1c      	ldr	r3, [pc, #112]	; (8010484 <HAL_PCDEx_LPM_Callback+0x98>)
 8010412:	691b      	ldr	r3, [r3, #16]
 8010414:	4a1b      	ldr	r2, [pc, #108]	; (8010484 <HAL_PCDEx_LPM_Callback+0x98>)
 8010416:	f023 0306 	bic.w	r3, r3, #6
 801041a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	6812      	ldr	r2, [r2, #0]
 801042a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801042e:	f023 0301 	bic.w	r3, r3, #1
 8010432:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801043a:	4618      	mov	r0, r3
 801043c:	f7fc feea 	bl	800d214 <USBD_LL_Resume>
    break;
 8010440:	e01c      	b.n	801047c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	6812      	ldr	r2, [r2, #0]
 8010450:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010454:	f043 0301 	orr.w	r3, r3, #1
 8010458:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010460:	4618      	mov	r0, r3
 8010462:	f7fc fec2 	bl	800d1ea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6a1b      	ldr	r3, [r3, #32]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d005      	beq.n	801047a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801046e:	4b05      	ldr	r3, [pc, #20]	; (8010484 <HAL_PCDEx_LPM_Callback+0x98>)
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	4a04      	ldr	r2, [pc, #16]	; (8010484 <HAL_PCDEx_LPM_Callback+0x98>)
 8010474:	f043 0306 	orr.w	r3, r3, #6
 8010478:	6113      	str	r3, [r2, #16]
    break;
 801047a:	bf00      	nop
}
 801047c:	bf00      	nop
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	e000ed00 	.word	0xe000ed00

08010488 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801048c:	f7f0 f8d6 	bl	800063c <SystemClock_Config>
}
 8010490:	bf00      	nop
 8010492:	bd80      	pop	{r7, pc}

08010494 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	4603      	mov	r3, r0
 801049c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801049e:	2300      	movs	r3, #0
 80104a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80104a2:	79fb      	ldrb	r3, [r7, #7]
 80104a4:	2b03      	cmp	r3, #3
 80104a6:	d817      	bhi.n	80104d8 <USBD_Get_USB_Status+0x44>
 80104a8:	a201      	add	r2, pc, #4	; (adr r2, 80104b0 <USBD_Get_USB_Status+0x1c>)
 80104aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104ae:	bf00      	nop
 80104b0:	080104c1 	.word	0x080104c1
 80104b4:	080104c7 	.word	0x080104c7
 80104b8:	080104cd 	.word	0x080104cd
 80104bc:	080104d3 	.word	0x080104d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80104c0:	2300      	movs	r3, #0
 80104c2:	73fb      	strb	r3, [r7, #15]
    break;
 80104c4:	e00b      	b.n	80104de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80104c6:	2303      	movs	r3, #3
 80104c8:	73fb      	strb	r3, [r7, #15]
    break;
 80104ca:	e008      	b.n	80104de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80104cc:	2301      	movs	r3, #1
 80104ce:	73fb      	strb	r3, [r7, #15]
    break;
 80104d0:	e005      	b.n	80104de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80104d2:	2303      	movs	r3, #3
 80104d4:	73fb      	strb	r3, [r7, #15]
    break;
 80104d6:	e002      	b.n	80104de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80104d8:	2303      	movs	r3, #3
 80104da:	73fb      	strb	r3, [r7, #15]
    break;
 80104dc:	bf00      	nop
  }
  return usb_status;
 80104de:	7bfb      	ldrb	r3, [r7, #15]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3714      	adds	r7, #20
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <__errno>:
 80104ec:	4b01      	ldr	r3, [pc, #4]	; (80104f4 <__errno+0x8>)
 80104ee:	6818      	ldr	r0, [r3, #0]
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	20000178 	.word	0x20000178

080104f8 <__libc_init_array>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	4d0d      	ldr	r5, [pc, #52]	; (8010530 <__libc_init_array+0x38>)
 80104fc:	4c0d      	ldr	r4, [pc, #52]	; (8010534 <__libc_init_array+0x3c>)
 80104fe:	1b64      	subs	r4, r4, r5
 8010500:	10a4      	asrs	r4, r4, #2
 8010502:	2600      	movs	r6, #0
 8010504:	42a6      	cmp	r6, r4
 8010506:	d109      	bne.n	801051c <__libc_init_array+0x24>
 8010508:	4d0b      	ldr	r5, [pc, #44]	; (8010538 <__libc_init_array+0x40>)
 801050a:	4c0c      	ldr	r4, [pc, #48]	; (801053c <__libc_init_array+0x44>)
 801050c:	f000 f93c 	bl	8010788 <_init>
 8010510:	1b64      	subs	r4, r4, r5
 8010512:	10a4      	asrs	r4, r4, #2
 8010514:	2600      	movs	r6, #0
 8010516:	42a6      	cmp	r6, r4
 8010518:	d105      	bne.n	8010526 <__libc_init_array+0x2e>
 801051a:	bd70      	pop	{r4, r5, r6, pc}
 801051c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010520:	4798      	blx	r3
 8010522:	3601      	adds	r6, #1
 8010524:	e7ee      	b.n	8010504 <__libc_init_array+0xc>
 8010526:	f855 3b04 	ldr.w	r3, [r5], #4
 801052a:	4798      	blx	r3
 801052c:	3601      	adds	r6, #1
 801052e:	e7f2      	b.n	8010516 <__libc_init_array+0x1e>
 8010530:	080109bc 	.word	0x080109bc
 8010534:	080109bc 	.word	0x080109bc
 8010538:	080109bc 	.word	0x080109bc
 801053c:	080109c0 	.word	0x080109c0

08010540 <malloc>:
 8010540:	4b02      	ldr	r3, [pc, #8]	; (801054c <malloc+0xc>)
 8010542:	4601      	mov	r1, r0
 8010544:	6818      	ldr	r0, [r3, #0]
 8010546:	f000 b88d 	b.w	8010664 <_malloc_r>
 801054a:	bf00      	nop
 801054c:	20000178 	.word	0x20000178

08010550 <free>:
 8010550:	4b02      	ldr	r3, [pc, #8]	; (801055c <free+0xc>)
 8010552:	4601      	mov	r1, r0
 8010554:	6818      	ldr	r0, [r3, #0]
 8010556:	f000 b819 	b.w	801058c <_free_r>
 801055a:	bf00      	nop
 801055c:	20000178 	.word	0x20000178

08010560 <memcpy>:
 8010560:	440a      	add	r2, r1
 8010562:	4291      	cmp	r1, r2
 8010564:	f100 33ff 	add.w	r3, r0, #4294967295
 8010568:	d100      	bne.n	801056c <memcpy+0xc>
 801056a:	4770      	bx	lr
 801056c:	b510      	push	{r4, lr}
 801056e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010576:	4291      	cmp	r1, r2
 8010578:	d1f9      	bne.n	801056e <memcpy+0xe>
 801057a:	bd10      	pop	{r4, pc}

0801057c <memset>:
 801057c:	4402      	add	r2, r0
 801057e:	4603      	mov	r3, r0
 8010580:	4293      	cmp	r3, r2
 8010582:	d100      	bne.n	8010586 <memset+0xa>
 8010584:	4770      	bx	lr
 8010586:	f803 1b01 	strb.w	r1, [r3], #1
 801058a:	e7f9      	b.n	8010580 <memset+0x4>

0801058c <_free_r>:
 801058c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801058e:	2900      	cmp	r1, #0
 8010590:	d044      	beq.n	801061c <_free_r+0x90>
 8010592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010596:	9001      	str	r0, [sp, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	f1a1 0404 	sub.w	r4, r1, #4
 801059e:	bfb8      	it	lt
 80105a0:	18e4      	addlt	r4, r4, r3
 80105a2:	f000 f8e3 	bl	801076c <__malloc_lock>
 80105a6:	4a1e      	ldr	r2, [pc, #120]	; (8010620 <_free_r+0x94>)
 80105a8:	9801      	ldr	r0, [sp, #4]
 80105aa:	6813      	ldr	r3, [r2, #0]
 80105ac:	b933      	cbnz	r3, 80105bc <_free_r+0x30>
 80105ae:	6063      	str	r3, [r4, #4]
 80105b0:	6014      	str	r4, [r2, #0]
 80105b2:	b003      	add	sp, #12
 80105b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105b8:	f000 b8de 	b.w	8010778 <__malloc_unlock>
 80105bc:	42a3      	cmp	r3, r4
 80105be:	d908      	bls.n	80105d2 <_free_r+0x46>
 80105c0:	6825      	ldr	r5, [r4, #0]
 80105c2:	1961      	adds	r1, r4, r5
 80105c4:	428b      	cmp	r3, r1
 80105c6:	bf01      	itttt	eq
 80105c8:	6819      	ldreq	r1, [r3, #0]
 80105ca:	685b      	ldreq	r3, [r3, #4]
 80105cc:	1949      	addeq	r1, r1, r5
 80105ce:	6021      	streq	r1, [r4, #0]
 80105d0:	e7ed      	b.n	80105ae <_free_r+0x22>
 80105d2:	461a      	mov	r2, r3
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	b10b      	cbz	r3, 80105dc <_free_r+0x50>
 80105d8:	42a3      	cmp	r3, r4
 80105da:	d9fa      	bls.n	80105d2 <_free_r+0x46>
 80105dc:	6811      	ldr	r1, [r2, #0]
 80105de:	1855      	adds	r5, r2, r1
 80105e0:	42a5      	cmp	r5, r4
 80105e2:	d10b      	bne.n	80105fc <_free_r+0x70>
 80105e4:	6824      	ldr	r4, [r4, #0]
 80105e6:	4421      	add	r1, r4
 80105e8:	1854      	adds	r4, r2, r1
 80105ea:	42a3      	cmp	r3, r4
 80105ec:	6011      	str	r1, [r2, #0]
 80105ee:	d1e0      	bne.n	80105b2 <_free_r+0x26>
 80105f0:	681c      	ldr	r4, [r3, #0]
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	6053      	str	r3, [r2, #4]
 80105f6:	4421      	add	r1, r4
 80105f8:	6011      	str	r1, [r2, #0]
 80105fa:	e7da      	b.n	80105b2 <_free_r+0x26>
 80105fc:	d902      	bls.n	8010604 <_free_r+0x78>
 80105fe:	230c      	movs	r3, #12
 8010600:	6003      	str	r3, [r0, #0]
 8010602:	e7d6      	b.n	80105b2 <_free_r+0x26>
 8010604:	6825      	ldr	r5, [r4, #0]
 8010606:	1961      	adds	r1, r4, r5
 8010608:	428b      	cmp	r3, r1
 801060a:	bf04      	itt	eq
 801060c:	6819      	ldreq	r1, [r3, #0]
 801060e:	685b      	ldreq	r3, [r3, #4]
 8010610:	6063      	str	r3, [r4, #4]
 8010612:	bf04      	itt	eq
 8010614:	1949      	addeq	r1, r1, r5
 8010616:	6021      	streq	r1, [r4, #0]
 8010618:	6054      	str	r4, [r2, #4]
 801061a:	e7ca      	b.n	80105b2 <_free_r+0x26>
 801061c:	b003      	add	sp, #12
 801061e:	bd30      	pop	{r4, r5, pc}
 8010620:	20005a14 	.word	0x20005a14

08010624 <sbrk_aligned>:
 8010624:	b570      	push	{r4, r5, r6, lr}
 8010626:	4e0e      	ldr	r6, [pc, #56]	; (8010660 <sbrk_aligned+0x3c>)
 8010628:	460c      	mov	r4, r1
 801062a:	6831      	ldr	r1, [r6, #0]
 801062c:	4605      	mov	r5, r0
 801062e:	b911      	cbnz	r1, 8010636 <sbrk_aligned+0x12>
 8010630:	f000 f88c 	bl	801074c <_sbrk_r>
 8010634:	6030      	str	r0, [r6, #0]
 8010636:	4621      	mov	r1, r4
 8010638:	4628      	mov	r0, r5
 801063a:	f000 f887 	bl	801074c <_sbrk_r>
 801063e:	1c43      	adds	r3, r0, #1
 8010640:	d00a      	beq.n	8010658 <sbrk_aligned+0x34>
 8010642:	1cc4      	adds	r4, r0, #3
 8010644:	f024 0403 	bic.w	r4, r4, #3
 8010648:	42a0      	cmp	r0, r4
 801064a:	d007      	beq.n	801065c <sbrk_aligned+0x38>
 801064c:	1a21      	subs	r1, r4, r0
 801064e:	4628      	mov	r0, r5
 8010650:	f000 f87c 	bl	801074c <_sbrk_r>
 8010654:	3001      	adds	r0, #1
 8010656:	d101      	bne.n	801065c <sbrk_aligned+0x38>
 8010658:	f04f 34ff 	mov.w	r4, #4294967295
 801065c:	4620      	mov	r0, r4
 801065e:	bd70      	pop	{r4, r5, r6, pc}
 8010660:	20005a18 	.word	0x20005a18

08010664 <_malloc_r>:
 8010664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010668:	1ccd      	adds	r5, r1, #3
 801066a:	f025 0503 	bic.w	r5, r5, #3
 801066e:	3508      	adds	r5, #8
 8010670:	2d0c      	cmp	r5, #12
 8010672:	bf38      	it	cc
 8010674:	250c      	movcc	r5, #12
 8010676:	2d00      	cmp	r5, #0
 8010678:	4607      	mov	r7, r0
 801067a:	db01      	blt.n	8010680 <_malloc_r+0x1c>
 801067c:	42a9      	cmp	r1, r5
 801067e:	d905      	bls.n	801068c <_malloc_r+0x28>
 8010680:	230c      	movs	r3, #12
 8010682:	603b      	str	r3, [r7, #0]
 8010684:	2600      	movs	r6, #0
 8010686:	4630      	mov	r0, r6
 8010688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801068c:	4e2e      	ldr	r6, [pc, #184]	; (8010748 <_malloc_r+0xe4>)
 801068e:	f000 f86d 	bl	801076c <__malloc_lock>
 8010692:	6833      	ldr	r3, [r6, #0]
 8010694:	461c      	mov	r4, r3
 8010696:	bb34      	cbnz	r4, 80106e6 <_malloc_r+0x82>
 8010698:	4629      	mov	r1, r5
 801069a:	4638      	mov	r0, r7
 801069c:	f7ff ffc2 	bl	8010624 <sbrk_aligned>
 80106a0:	1c43      	adds	r3, r0, #1
 80106a2:	4604      	mov	r4, r0
 80106a4:	d14d      	bne.n	8010742 <_malloc_r+0xde>
 80106a6:	6834      	ldr	r4, [r6, #0]
 80106a8:	4626      	mov	r6, r4
 80106aa:	2e00      	cmp	r6, #0
 80106ac:	d140      	bne.n	8010730 <_malloc_r+0xcc>
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	4631      	mov	r1, r6
 80106b2:	4638      	mov	r0, r7
 80106b4:	eb04 0803 	add.w	r8, r4, r3
 80106b8:	f000 f848 	bl	801074c <_sbrk_r>
 80106bc:	4580      	cmp	r8, r0
 80106be:	d13a      	bne.n	8010736 <_malloc_r+0xd2>
 80106c0:	6821      	ldr	r1, [r4, #0]
 80106c2:	3503      	adds	r5, #3
 80106c4:	1a6d      	subs	r5, r5, r1
 80106c6:	f025 0503 	bic.w	r5, r5, #3
 80106ca:	3508      	adds	r5, #8
 80106cc:	2d0c      	cmp	r5, #12
 80106ce:	bf38      	it	cc
 80106d0:	250c      	movcc	r5, #12
 80106d2:	4629      	mov	r1, r5
 80106d4:	4638      	mov	r0, r7
 80106d6:	f7ff ffa5 	bl	8010624 <sbrk_aligned>
 80106da:	3001      	adds	r0, #1
 80106dc:	d02b      	beq.n	8010736 <_malloc_r+0xd2>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	442b      	add	r3, r5
 80106e2:	6023      	str	r3, [r4, #0]
 80106e4:	e00e      	b.n	8010704 <_malloc_r+0xa0>
 80106e6:	6822      	ldr	r2, [r4, #0]
 80106e8:	1b52      	subs	r2, r2, r5
 80106ea:	d41e      	bmi.n	801072a <_malloc_r+0xc6>
 80106ec:	2a0b      	cmp	r2, #11
 80106ee:	d916      	bls.n	801071e <_malloc_r+0xba>
 80106f0:	1961      	adds	r1, r4, r5
 80106f2:	42a3      	cmp	r3, r4
 80106f4:	6025      	str	r5, [r4, #0]
 80106f6:	bf18      	it	ne
 80106f8:	6059      	strne	r1, [r3, #4]
 80106fa:	6863      	ldr	r3, [r4, #4]
 80106fc:	bf08      	it	eq
 80106fe:	6031      	streq	r1, [r6, #0]
 8010700:	5162      	str	r2, [r4, r5]
 8010702:	604b      	str	r3, [r1, #4]
 8010704:	4638      	mov	r0, r7
 8010706:	f104 060b 	add.w	r6, r4, #11
 801070a:	f000 f835 	bl	8010778 <__malloc_unlock>
 801070e:	f026 0607 	bic.w	r6, r6, #7
 8010712:	1d23      	adds	r3, r4, #4
 8010714:	1af2      	subs	r2, r6, r3
 8010716:	d0b6      	beq.n	8010686 <_malloc_r+0x22>
 8010718:	1b9b      	subs	r3, r3, r6
 801071a:	50a3      	str	r3, [r4, r2]
 801071c:	e7b3      	b.n	8010686 <_malloc_r+0x22>
 801071e:	6862      	ldr	r2, [r4, #4]
 8010720:	42a3      	cmp	r3, r4
 8010722:	bf0c      	ite	eq
 8010724:	6032      	streq	r2, [r6, #0]
 8010726:	605a      	strne	r2, [r3, #4]
 8010728:	e7ec      	b.n	8010704 <_malloc_r+0xa0>
 801072a:	4623      	mov	r3, r4
 801072c:	6864      	ldr	r4, [r4, #4]
 801072e:	e7b2      	b.n	8010696 <_malloc_r+0x32>
 8010730:	4634      	mov	r4, r6
 8010732:	6876      	ldr	r6, [r6, #4]
 8010734:	e7b9      	b.n	80106aa <_malloc_r+0x46>
 8010736:	230c      	movs	r3, #12
 8010738:	603b      	str	r3, [r7, #0]
 801073a:	4638      	mov	r0, r7
 801073c:	f000 f81c 	bl	8010778 <__malloc_unlock>
 8010740:	e7a1      	b.n	8010686 <_malloc_r+0x22>
 8010742:	6025      	str	r5, [r4, #0]
 8010744:	e7de      	b.n	8010704 <_malloc_r+0xa0>
 8010746:	bf00      	nop
 8010748:	20005a14 	.word	0x20005a14

0801074c <_sbrk_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4d06      	ldr	r5, [pc, #24]	; (8010768 <_sbrk_r+0x1c>)
 8010750:	2300      	movs	r3, #0
 8010752:	4604      	mov	r4, r0
 8010754:	4608      	mov	r0, r1
 8010756:	602b      	str	r3, [r5, #0]
 8010758:	f7f1 f82a 	bl	80017b0 <_sbrk>
 801075c:	1c43      	adds	r3, r0, #1
 801075e:	d102      	bne.n	8010766 <_sbrk_r+0x1a>
 8010760:	682b      	ldr	r3, [r5, #0]
 8010762:	b103      	cbz	r3, 8010766 <_sbrk_r+0x1a>
 8010764:	6023      	str	r3, [r4, #0]
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	20005a1c 	.word	0x20005a1c

0801076c <__malloc_lock>:
 801076c:	4801      	ldr	r0, [pc, #4]	; (8010774 <__malloc_lock+0x8>)
 801076e:	f000 b809 	b.w	8010784 <__retarget_lock_acquire_recursive>
 8010772:	bf00      	nop
 8010774:	20005a20 	.word	0x20005a20

08010778 <__malloc_unlock>:
 8010778:	4801      	ldr	r0, [pc, #4]	; (8010780 <__malloc_unlock+0x8>)
 801077a:	f000 b804 	b.w	8010786 <__retarget_lock_release_recursive>
 801077e:	bf00      	nop
 8010780:	20005a20 	.word	0x20005a20

08010784 <__retarget_lock_acquire_recursive>:
 8010784:	4770      	bx	lr

08010786 <__retarget_lock_release_recursive>:
 8010786:	4770      	bx	lr

08010788 <_init>:
 8010788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078a:	bf00      	nop
 801078c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801078e:	bc08      	pop	{r3}
 8010790:	469e      	mov	lr, r3
 8010792:	4770      	bx	lr

08010794 <_fini>:
 8010794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010796:	bf00      	nop
 8010798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801079a:	bc08      	pop	{r3}
 801079c:	469e      	mov	lr, r3
 801079e:	4770      	bx	lr
